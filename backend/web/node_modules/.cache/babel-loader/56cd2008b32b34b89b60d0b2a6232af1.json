{"ast":null,"code":"var _jsxFileName = \"/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/DigitalTwin/NewDigitalTwin.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Navigator } from '../templates/Navigator/Navigator';\nimport { Redirect } from 'react-router-dom';\nimport { routes } from '../../App';\nimport { ConfirmActionStateLabel } from '../templates/ConfirmAction/ConfirmAction';\nimport { DigitalTwinForm } from './DigitalTwinForm';\nimport { useMountEffect } from '../../utils/main';\nimport { useStore } from '../templates/Store/Store';\nimport { DigitalTwinActions } from '../../redux/actions';\nimport { getOrDownloadDigitalTwins } from '../../utils/digitalTwins';\nimport { createDigitalTwin } from '../../services/api/digital-twin';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst dtUserId = 1;\nexport const NewDigitalTwin = () => {\n  _s();\n\n  useMountEffect(() => {\n    getOrDownloadDigitalTwins(digitalTwins).then(result => {\n      dispatchDigitalTwinsActions(DigitalTwinActions.updateDigitalTwins(result));\n    }).catch(e => {\n      console.error(e);\n    });\n  });\n  const {\n    data: digitalTwins,\n    dispatchAction: dispatchDigitalTwinsActions\n  } = useStore('digitalTwins');\n  const [redirectTo, setRedirectTo] = useState(\"\");\n  const [dtName, setDtName] = useState('');\n  const [fbInputVariables, setFbInputVariables] = useState([]);\n  const [fbOutputVariables, setFbOutputVariables] = useState([]);\n  const [fbInputEvents, setFbInputEvents] = useState([]);\n  const [fbOutputEvents, setFbOutputEvents] = useState([]);\n  let dtId = 1;\n\n  const redirectToList = () => setRedirectTo(routes.digitalTwinMonitoring);\n\n  const buildDigitalTwin = () => ({\n    dtName,\n    dtId,\n    dtUserId\n  });\n\n  const redirectToListAndUpdateLocal = () => {\n    dispatchDigitalTwinsActions(DigitalTwinActions.addDigitalTwin(buildDigitalTwin()));\n    redirectToList();\n  };\n\n  const createDigitalTwinAndSmartComponentAction = () => {\n    return new Promise((res, rej) => {\n      createDigitalTwin(dtName.trim()).then(result => {\n        dtId = result.extra.lastInsertedId;\n        res('Digital Twin created');\n      }).catch(e => rej(e.msg));\n    });\n  };\n\n  if (redirectTo !== \"\") return /*#__PURE__*/_jsxDEV(Redirect, {\n    to: redirectTo,\n    push: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 12\n  }, this);\n  return /*#__PURE__*/_jsxDEV(Navigator, {\n    title: \"New Digital Twin\",\n    children: /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(DigitalTwinForm, {\n        dtName: {\n          dtName,\n          setDtName\n        },\n        fbInputVariables: {\n          fbInputVariables,\n          setFbInputVariables\n        },\n        fbOutputVariables: {\n          fbOutputVariables,\n          setFbOutputVariables\n        },\n        fbInputEvents: {\n          fbInputEvents,\n          setFbInputEvents\n        },\n        fbOutputEvents: {\n          fbOutputEvents,\n          setFbOutputEvents\n        },\n        cancel: {\n          action: redirectToList,\n          label: 'Cancel'\n        },\n        confirmDialog: {\n          buttonTitle: 'Confirm',\n          title: 'Creating Digital Twin',\n          initialState: ConfirmActionStateLabel.executing,\n          action: createDigitalTwinAndSmartComponentAction,\n          onSuccess: redirectToListAndUpdateLocal,\n          success: {\n            label: '',\n            positiveLabel: 'Ok'\n          },\n          error: {\n            label: '',\n            positiveLabel: 'Ok'\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 7\n      }, this)\n    }, void 0, false)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NewDigitalTwin, \"x8v9tY0zqfWSAA+jkeysRJZfDj4=\", false, function () {\n  return [useMountEffect, useStore];\n});\n\n_c = NewDigitalTwin;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewDigitalTwin\");","map":{"version":3,"sources":["/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/DigitalTwin/NewDigitalTwin.tsx"],"names":["React","useState","Navigator","Redirect","routes","ConfirmActionStateLabel","DigitalTwinForm","useMountEffect","useStore","DigitalTwinActions","getOrDownloadDigitalTwins","createDigitalTwin","dtUserId","NewDigitalTwin","digitalTwins","then","result","dispatchDigitalTwinsActions","updateDigitalTwins","catch","e","console","error","data","dispatchAction","redirectTo","setRedirectTo","dtName","setDtName","fbInputVariables","setFbInputVariables","fbOutputVariables","setFbOutputVariables","fbInputEvents","setFbInputEvents","fbOutputEvents","setFbOutputEvents","dtId","redirectToList","digitalTwinMonitoring","buildDigitalTwin","redirectToListAndUpdateLocal","addDigitalTwin","createDigitalTwinAndSmartComponentAction","Promise","res","rej","trim","extra","lastInsertedId","msg","action","label","buttonTitle","title","initialState","executing","onSuccess","success","positiveLabel"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport { Navigator } from '../templates/Navigator/Navigator'\r\nimport { DigitalTwin, Variable, Event } from '../../model/index'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { routes } from '../../App'\r\nimport { ConfirmActionStateLabel } from '../templates/ConfirmAction/ConfirmAction'\r\nimport { RequestResponseState } from '../../services/api/api'\r\nimport { DigitalTwinForm} from './DigitalTwinForm'\r\nimport { useMountEffect } from '../../utils/main'\r\nimport { useStore } from '../templates/Store/Store'\r\nimport { DigitalTwinActions } from '../../redux/actions'\r\nimport { getOrDownloadDigitalTwins } from '../../utils/digitalTwins'\r\nimport { createDigitalTwin } from '../../services/api/digital-twin'\r\n\r\nconst dtUserId = 1\r\n\r\nexport const NewDigitalTwin = () => {\r\n\r\n  useMountEffect(() => {\r\n    \r\n    getOrDownloadDigitalTwins(digitalTwins)\r\n      .then((result: DigitalTwin[]) => {\r\n          dispatchDigitalTwinsActions(DigitalTwinActions.updateDigitalTwins(result))\r\n      })\r\n      .catch((e:RequestResponseState) => {\r\n          console.error(e)\r\n      })\r\n\r\n  })\r\n\r\n  const {data: digitalTwins, dispatchAction:dispatchDigitalTwinsActions} = useStore('digitalTwins')\r\n\r\n  const [redirectTo, setRedirectTo] : [string, Function] = useState(\"\")\r\n\r\n  const [dtName,setDtName] : [string,Function] = useState('')\r\n\r\n  const [fbInputVariables, setFbInputVariables] : [Variable[],Function] = useState([])\r\n  const [fbOutputVariables, setFbOutputVariables] : [Variable[],Function] = useState([])\r\n\r\n  const [fbInputEvents, setFbInputEvents] : [Event[], Function] = useState([])\r\n  const [fbOutputEvents, setFbOutputEvents] : [Event[], Function] = useState([])\r\n\r\n  let dtId = 1\r\n\r\n  const redirectToList = () => setRedirectTo(routes.digitalTwinMonitoring)\r\n\r\n  const buildDigitalTwin = () : DigitalTwin => ({\r\n    dtName, dtId, dtUserId\r\n  })\r\n\r\n  const redirectToListAndUpdateLocal = () => {\r\n    dispatchDigitalTwinsActions(DigitalTwinActions.addDigitalTwin(buildDigitalTwin()))\r\n    redirectToList()\r\n  } \r\n\r\n  const createDigitalTwinAndSmartComponentAction = () : Promise<string> => {\r\n    \r\n    return new Promise<string>((res:Function, rej:Function)  => {\r\n\r\n      \r\n        createDigitalTwin(dtName.trim())\r\n\r\n            .then((result: RequestResponseState) => {\r\n            dtId= result.extra.lastInsertedId\r\n                res('Digital Twin created')\r\n            })\r\n\r\n            .catch((e:RequestResponseState) => rej(e.msg))\r\n    })\r\n  }\r\n  \r\n  if(redirectTo !== \"\") \r\n    return <Redirect to={redirectTo} push={true} />\r\n  \r\n  return (\r\n    <Navigator title=\"New Digital Twin\">\r\n      <>\r\n      <DigitalTwinForm\r\n        dtName={{dtName, setDtName}}\r\n        fbInputVariables={{fbInputVariables,setFbInputVariables}}\r\n        fbOutputVariables={{fbOutputVariables,setFbOutputVariables}}\r\n        fbInputEvents={{fbInputEvents,setFbInputEvents}}\r\n        fbOutputEvents={{fbOutputEvents,setFbOutputEvents}}\r\n        cancel={{action: redirectToList, label: 'Cancel'}}\r\n        confirmDialog={{\r\n          buttonTitle: 'Confirm',\r\n          title: 'Creating Digital Twin',\r\n          initialState: ConfirmActionStateLabel.executing,\r\n          action: createDigitalTwinAndSmartComponentAction,\r\n          onSuccess: redirectToListAndUpdateLocal,\r\n          success: {\r\n            label: '',\r\n            positiveLabel: 'Ok'\r\n          },\r\n          error: {\r\n            label: '',\r\n            positiveLabel: 'Ok'\r\n          },\r\n        }}\r\n      />\r\n      </>\r\n    </Navigator>\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}