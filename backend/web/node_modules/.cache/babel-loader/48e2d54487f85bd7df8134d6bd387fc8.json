{"ast":null,"code":"import { apiRoutes, RouteMethod, fetchRequest } from './api';\nexport const getDigitalTwins = () => fetchRequest(apiRoutes.getDigitalTwinPath(RouteMethod.get));\nexport const getFunctionalities = () => fetchRequest(apiRoutes.getFunctionalityPath(RouteMethod.get));\nexport const createDigitalTwin = digitalTwinName => fetchRequest(apiRoutes.getDigitalTwinPath(RouteMethod.post), false, {\n  digitalTwinName\n});\nexport const deleteDigitalTwin = id => fetchRequest(apiRoutes.getDigitalTwinPath(RouteMethod.delete, id));\nexport const updateDigitalTwin = (id, digitalTwinName) => fetchRequest(apiRoutes.getDigitalTwinPath(RouteMethod.put, id), false, {\n  digitalTwinName\n});\nexport const createFunctionality = functionalityName => fetchRequest(apiRoutes.getFunctionalityPath(RouteMethod.post), false, {\n  functionalityName\n});\nexport const deleteFunctionality = id => fetchRequest(apiRoutes.getFunctionalityPath(RouteMethod.delete, id));\nexport const updateFunctionality = (id, functionalityName) => fetchRequest(apiRoutes.getFunctionalityPath(RouteMethod.put, id), false, {\n  functionalityName\n});","map":{"version":3,"sources":["/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/services/api/digital-twin.ts"],"names":["apiRoutes","RouteMethod","fetchRequest","getDigitalTwins","getDigitalTwinPath","get","getFunctionalities","getFunctionalityPath","createDigitalTwin","digitalTwinName","post","deleteDigitalTwin","id","delete","updateDigitalTwin","put","createFunctionality","functionalityName","deleteFunctionality","updateFunctionality"],"mappings":"AACA,SAASA,SAAT,EAA0CC,WAA1C,EAAuDC,YAAvD,QAA2E,OAA3E;AAEA,OAAO,MAAMC,eAAe,GAAG,MAA+BD,YAAY,CAACF,SAAS,CAACI,kBAAV,CAA6BH,WAAW,CAACI,GAAzC,CAAD,CAAnE;AAEP,OAAO,MAAMC,kBAAkB,GAAG,MAAiCJ,YAAY,CAACF,SAAS,CAACO,oBAAV,CAA+BN,WAAW,CAACI,GAA3C,CAAD,CAAxE;AAEP,OAAO,MAAMG,iBAAiB,GAAGC,eAAD,IAA4DP,YAAY,CAACF,SAAS,CAACI,kBAAV,CAA6BH,WAAW,CAACS,IAAzC,CAAD,EAAgD,KAAhD,EAAsD;AAACD,EAAAA;AAAD,CAAtD,CAAjG;AAEP,OAAO,MAAME,iBAAiB,GAAIC,EAAD,IAA+CV,YAAY,CAACF,SAAS,CAACI,kBAAV,CAA6BH,WAAW,CAACY,MAAzC,EAAgDD,EAAhD,CAAD,CAArF;AAEP,OAAO,MAAME,iBAAiB,GAAG,CAACF,EAAD,EAAaH,eAAb,KAAyEP,YAAY,CAACF,SAAS,CAACI,kBAAV,CAA6BH,WAAW,CAACc,GAAzC,EAA6CH,EAA7C,CAAD,EAAkD,KAAlD,EAAwD;AAACH,EAAAA;AAAD,CAAxD,CAA/G;AAEP,OAAO,MAAMO,mBAAmB,GAAIC,iBAAD,IAA+Df,YAAY,CAACF,SAAS,CAACO,oBAAV,CAA+BN,WAAW,CAACS,IAA3C,CAAD,EAAkD,KAAlD,EAAwD;AAACO,EAAAA;AAAD,CAAxD,CAAvG;AAEP,OAAO,MAAMC,mBAAmB,GAAGN,EAAD,IAA+CV,YAAY,CAACF,SAAS,CAACO,oBAAV,CAA+BN,WAAW,CAACY,MAA3C,EAAkDD,EAAlD,CAAD,CAAtF;AAEP,OAAO,MAAMO,mBAAmB,GAAG,CAACP,EAAD,EAAaK,iBAAb,KAA2Ef,YAAY,CAACF,SAAS,CAACO,oBAAV,CAA+BN,WAAW,CAACc,GAA3C,EAA+CH,EAA/C,CAAD,EAAoD,KAApD,EAA0D;AAACK,EAAAA;AAAD,CAA1D,CAAnH","sourcesContent":["import { DigitalTwin, Functionality} from '../../model'\r\nimport { apiRoutes, RequestResponseState, RouteMethod, fetchRequest } from './api'\r\n\r\nexport const getDigitalTwins = () : Promise<DigitalTwin[]> => fetchRequest(apiRoutes.getDigitalTwinPath(RouteMethod.get))  \r\n\r\nexport const getFunctionalities = () : Promise<Functionality[]> => fetchRequest(apiRoutes.getFunctionalityPath(RouteMethod.get))  \r\n\r\nexport const createDigitalTwin= (digitalTwinName:string) : Promise<RequestResponseState> => fetchRequest(apiRoutes.getDigitalTwinPath(RouteMethod.post),false,{digitalTwinName})            \r\n\r\nexport const deleteDigitalTwin = (id:number) : Promise<RequestResponseState> => fetchRequest(apiRoutes.getDigitalTwinPath(RouteMethod.delete,id))            \r\n\r\nexport const updateDigitalTwin = (id: number, digitalTwinName: string) : Promise<RequestResponseState> => fetchRequest(apiRoutes.getDigitalTwinPath(RouteMethod.put,id),false,{digitalTwinName})            \r\n\r\nexport const createFunctionality = (functionalityName: string) : Promise<RequestResponseState> => fetchRequest(apiRoutes.getFunctionalityPath(RouteMethod.post),false,{functionalityName})            \r\n\r\nexport const deleteFunctionality= (id:number) : Promise<RequestResponseState> => fetchRequest(apiRoutes.getFunctionalityPath(RouteMethod.delete,id))   \r\n\r\nexport const updateFunctionality = (id: number, functionalityName: string) : Promise<RequestResponseState> => fetchRequest(apiRoutes.getFunctionalityPath(RouteMethod.put,id),false,{functionalityName})            "]},"metadata":{},"sourceType":"module"}