{"ast":null,"code":"var _jsxFileName = \"/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/FunctionBlocks/List/List.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Navigator } from '../../templates/Navigator/Navigator';\nimport { deleteFunctionBlock } from '../../../services/api/function-block';\nimport { useMountEffect } from '../../../utils/main';\nimport { JPTable } from '../../templates/Table/JPTable';\nimport { LazyComponent } from '../../templates/LazyComponent/LazyComponent';\nimport { ConfirmAction, ConfirmActionStateLabel } from '../../templates/ConfirmAction/ConfirmAction';\nimport { setTimeout } from 'timers';\nimport { FunctionBlockActions } from '../../../redux/actions';\nimport { Redirect } from 'react-router-dom';\nimport { useStore } from '../../templates/Store/Store';\nimport { getOrDownloadFunctionBlocks } from '../../../utils/functionBlock';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const FunctionBlockList = () => {\n  _s();\n\n  const {\n    data: functionBlocks,\n    dispatchAction: dispatchFunctionBlocksActions\n  } = useStore('functionBlocks');\n  const [fetching, setFetching] = useState(true);\n  const [error, setError] = useState('');\n  const [redirectToEdit, setRedirectToEdit] = useState(-1);\n\n  const updateFunctionBlocks = fbs => dispatchFunctionBlocksActions(FunctionBlockActions.updateFunctionBlocks(fbs));\n\n  useMountEffect(() => {\n    setTimeout(() => {\n      setFetching(true);\n      getOrDownloadFunctionBlocks(functionBlocks).then(result => {\n        updateFunctionBlocks(result);\n      }).catch(e => setError(e.msg)).finally(() => setFetching(false));\n    }, 0);\n  });\n  const errorState = {\n    label: error,\n    state: ConfirmActionStateLabel.error,\n    positiveLabel: 'Ok'\n  };\n  const indexes = [{\n    label: 'Type',\n    key: 'fbType'\n  }, {\n    label: 'Description',\n    key: 'fbDescription'\n  }, {\n    label: 'Category',\n    key: 'fbCategoryName'\n  }, {\n    label: 'General Category',\n    key: 'fbGeneralCategory'\n  } // {label: 'Responsible User', key: 'fbUserId'},\n  ];\n\n  const onCancel = () => setError('');\n\n  const deleteLocalFunctionBlock = fb => dispatchFunctionBlocksActions(FunctionBlockActions.deleteFunctionBlock(fb));\n\n  const deleteFunctionBlockAction = fb => {\n    return new Promise(async (res, rej) => {\n      setTimeout(async () => {\n        if (!fb.fbId) {\n          rej('Error');\n          return;\n        }\n\n        try {\n          const response = await deleteFunctionBlock(fb.fbId);\n          res(response);\n        } catch (err) {\n          rej(err);\n        }\n      }, 0);\n    });\n  };\n\n  const editFunctionBlockAction = fb => {\n    setRedirectToEdit(fb.fbId);\n  };\n\n  if (redirectToEdit !== -1) return /*#__PURE__*/_jsxDEV(Redirect, {\n    to: `/function-block/${redirectToEdit}`,\n    push: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 12\n  }, this);\n  return /*#__PURE__*/_jsxDEV(Navigator, {\n    title: \"Function Blocks\",\n    children: /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [error !== '' ? /*#__PURE__*/_jsxDEV(ConfirmAction, {\n        title: \"Fetching Function Blocks\",\n        currentState: errorState,\n        states: {\n          error: errorState\n        },\n        onCancel: onCancel\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this) : null, /*#__PURE__*/_jsxDEV(LazyComponent, {\n        loaded: !fetching,\n        children: /*#__PURE__*/_jsxDEV(JPTable, {\n          data: functionBlocks,\n          updateData: updateFunctionBlocks,\n          indexes: indexes,\n          sortedkey: \"fbType\",\n          tName: \"Function Block\",\n          extra: {\n            delete: {\n              action: deleteFunctionBlockAction,\n              labelKey: 'fbType',\n              onSuccessDelete: deleteLocalFunctionBlock\n            },\n            edit: {\n              action: editFunctionBlockAction\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n};\n\n_s(FunctionBlockList, \"DWkCbpodPB43QxCvtzZY4/TN+u4=\", false, function () {\n  return [useStore, useMountEffect];\n});\n\n_c = FunctionBlockList;\n\nvar _c;\n\n$RefreshReg$(_c, \"FunctionBlockList\");","map":{"version":3,"sources":["/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/FunctionBlocks/List/List.tsx"],"names":["React","useState","Navigator","deleteFunctionBlock","useMountEffect","JPTable","LazyComponent","ConfirmAction","ConfirmActionStateLabel","setTimeout","FunctionBlockActions","Redirect","useStore","getOrDownloadFunctionBlocks","FunctionBlockList","data","functionBlocks","dispatchAction","dispatchFunctionBlocksActions","fetching","setFetching","error","setError","redirectToEdit","setRedirectToEdit","updateFunctionBlocks","fbs","then","result","catch","e","msg","finally","errorState","label","state","positiveLabel","indexes","key","onCancel","deleteLocalFunctionBlock","fb","deleteFunctionBlockAction","Promise","res","rej","fbId","response","err","editFunctionBlockAction","delete","action","labelKey","onSuccessDelete","edit"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { Navigator } from '../../templates/Navigator/Navigator'\nimport { deleteFunctionBlock } from '../../../services/api/function-block'\nimport { FunctionBlock } from '../../../model/index'\nimport { useMountEffect } from '../../../utils/main'\nimport { JPTable } from '../../templates/Table/JPTable'\nimport { LazyComponent } from '../../templates/LazyComponent/LazyComponent'\nimport { ConfirmAction, ConfirmActionState, ConfirmActionStateLabel } from '../../templates/ConfirmAction/ConfirmAction'\nimport { RequestResponseState } from '../../../services/api/api'\nimport { setTimeout } from 'timers'\nimport { FunctionBlockActions } from '../../../redux/actions'\nimport { Redirect } from 'react-router-dom'\nimport { useStore } from '../../templates/Store/Store'\nimport { getOrDownloadFunctionBlocks } from '../../../utils/functionBlock'\n\nexport const FunctionBlockList = () => {\n  \n  const {data:functionBlocks,dispatchAction:dispatchFunctionBlocksActions} = useStore('functionBlocks')\n\n  const [fetching,setFetching] = useState(true)\n  const [error,setError] = useState('')\n\n  const [redirectToEdit,setRedirectToEdit] : [number, Function] = useState(-1)\n\n  const updateFunctionBlocks = (fbs: FunctionBlock[]) => dispatchFunctionBlocksActions(FunctionBlockActions.updateFunctionBlocks(fbs))\n  \n  useMountEffect(() => {\n\n    setTimeout(() => {\n\n      setFetching(true)\n      getOrDownloadFunctionBlocks(functionBlocks)\n          .then((result: FunctionBlock[]) => {\n              updateFunctionBlocks(result)\n          })\n          .catch((e:RequestResponseState) => setError(e.msg))\n          .finally(() => setFetching(false))\n\n        \n    }, 0)\n\n  })\n\n  const errorState : ConfirmActionState = {\n    label: error,\n    state: ConfirmActionStateLabel.error,\n    positiveLabel: 'Ok'\n  }\n\n  const indexes = [\n    {label: 'Type', key: 'fbType'},\n    {label: 'Description', key: 'fbDescription'},\n    {label: 'Category', key: 'fbCategoryName'},\n    {label: 'General Category', key: 'fbGeneralCategory'},\n    // {label: 'Responsible User', key: 'fbUserId'},\n  ]\n\n  const onCancel = () => setError('')\n\n  const deleteLocalFunctionBlock = (fb:FunctionBlock) => dispatchFunctionBlocksActions(FunctionBlockActions.deleteFunctionBlock(fb))\n\n  const deleteFunctionBlockAction = (fb:FunctionBlock) : Promise<any> => {\n\n    return new Promise(async (res:Function, rej: Function) => {\n\n      setTimeout(async () => {\n\n          if(!fb.fbId) {\n            rej('Error')\n            return\n          }\n\n          try {\n            const response : RequestResponseState = await deleteFunctionBlock(fb.fbId)\n            res(response)\n          }\n\n          catch(err) {\n            rej(err)\n          }\n      }, 0)\n\n    })\n\n  } \n\n  const editFunctionBlockAction = (fb:FunctionBlock) => {\n\n    setRedirectToEdit(fb.fbId)\n\n  }\n\n  if(redirectToEdit !== -1)\n    return <Redirect to={`/function-block/${redirectToEdit}`} push={true}/>\n\n\n  return (\n    <Navigator title=\"Function Blocks\">\n      <> \n        {error !== ''\n        ? <ConfirmAction title='Fetching Function Blocks' currentState={errorState} states={{error: errorState}} onCancel={onCancel}/>\n        : null \n        }\n        <LazyComponent loaded={!fetching}>\n          <JPTable\n            data={functionBlocks} \n            updateData={updateFunctionBlocks} \n            indexes={indexes}\n            sortedkey='fbType' \n            tName='Function Block'\n            extra={{\n              delete: {\n                action: deleteFunctionBlockAction,\n                labelKey: 'fbType',\n                onSuccessDelete: deleteLocalFunctionBlock\n              },\n              edit: {\n                action: editFunctionBlockAction\n              }\n            }} \n            />\n        </LazyComponent>\n      </>\n    </Navigator>\n  )\n\n}"]},"metadata":{},"sourceType":"module"}