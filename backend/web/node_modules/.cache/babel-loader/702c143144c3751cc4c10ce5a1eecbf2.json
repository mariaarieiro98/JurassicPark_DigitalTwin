{"ast":null,"code":"var _jsxFileName = \"/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/DigitalTwin/FunctionalityDetails.tsx\",\n    _s = $RefreshSig$();\n\nimport { Card, CardContent, CardHeader, Divider, Grid } from '@material-ui/core';\nimport React, { useState } from 'react';\nimport { Redirect, useRouteMatch } from 'react-router-dom';\nimport { routes } from '../../App';\nimport { FunctionalityActions, MonitoredEventActions, MonitoredVariableActions } from '../../redux/actions';\nimport { getOrDownloadFunctionalities, getOrDownloadMonitoredEvents, getOrDownloadMonitoredVariables } from '../../utils/digitalTwins';\nimport { useMountEffect } from '../../utils/main';\nimport { Navigator } from '../templates/Navigator/Navigator';\nimport { useStore } from '../templates/Store/Store';\nimport { JPTable } from '../templates/Table/JPTable';\nimport { FunctionalityForm } from './FunctionalityForm';\nimport { SocketConnection, SOCKET_EVENT } from '../../services/socket/socket';\nimport { deleteMonitoredEvent, deleteMonitoredVariable } from '../../services/api/digital-twin';\nimport { LazyComponent } from '../templates/LazyComponent/LazyComponent';\nimport { ConfirmAction, ConfirmActionStateLabel } from '../templates/ConfirmAction/ConfirmAction'; //Esta página pretende dispor informação mais detalhada da funcionalidade correspondente disponível na página \"DigitalTwinMonitoring\"\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nlet selectedMonitoredVariableGlobal = [];\nexport const FunctionalityDetails = () => {\n  _s();\n\n  //Recupera o id da funcionalidade seleccionada anteriormente na página Digital Twin Monitoring\n  const matchParams = useRouteMatch();\n  const id = matchParams.params.id; //Estabelecer a ligação com os sockets\n\n  const socket = new SocketConnection(SocketConnection.getSmartComponentsNamespace());\n  useMountEffect(() => {\n    setTimeout(() => {\n      socket.connect(() => {}, onDisconnect);\n      socket.emit(SOCKET_EVENT.UPDATE_BACKEND, \"UpdateMonitoredVariables\");\n      socket.addListener(SOCKET_EVENT.EDITED_MVI_EVENT, data => {\n        updateMonitoredVariableInstance(data);\n      });\n    }, 0);\n  }, () => socket === null || socket === void 0 ? void 0 : socket.disconnect());\n  const [error, setError] = useState('');\n  const confirmActionStates = {\n    error: {\n      label: error,\n      state: ConfirmActionStateLabel.error,\n      positiveLabel: 'Ok'\n    }\n  };\n  const confirmActionProps = {\n    title: 'Loading Monitored-Variables',\n    states: confirmActionStates,\n    currentState: confirmActionStates.error,\n    onCancel: () => setError('')\n  }; //Recuperar da base de dados as variáveis que estão a ser monitorizadas (MonitoredVariable)\n\n  const [fetching, setFetching] = useState(true);\n  const {\n    data: monitoredVariables,\n    dispatchAction: dispatchMonitoredVariableActions\n  } = useStore('monitoredVariables');\n\n  const updateMonitoredVariables = monVar => dispatchMonitoredVariableActions(MonitoredVariableActions.updateMonitoredVariable(monVar));\n\n  const [selectedMonitoredVariable, setSelectedMonitoredVariable] = useState([]);\n\n  const initializeMonitoredVariable = monVars => {\n    let monitoredVariable = monVars.filter(monVar => monVar.funcIdAssociated === parseInt(id));\n    selectedMonitoredVariableGlobal = monitoredVariable;\n    setSelectedMonitoredVariable(monitoredVariable);\n  };\n\n  useMountEffect(() => {\n    setFetching(true);\n    getOrDownloadMonitoredVariables(monitoredVariables).then(result => {\n      updateMonitoredVariables(result);\n      initializeMonitoredVariable(result);\n    }).catch(e => {\n      setError(e.msg);\n    }).finally(() => setFetching(false));\n  }); //Recuperar da base de dados os eventos que estão a ser monitorizados (MonitoredEvent)\n\n  const {\n    data: monitoredEvents,\n    dispatchAction: dispatchMonitoredEventActions\n  } = useStore('monitoredEvents');\n\n  const updateMonitoredEvents = monEv => dispatchMonitoredEventActions(MonitoredEventActions.updateMonitoredEvent(monEv));\n\n  const [selectedMonitoredEvent, setSelectedMonitoredEvent] = useState([]);\n\n  const initializeMonitoredEvent = monEvs => {\n    let monitoredEvent = monEvs.filter(monEv => monEv.funcIdAssociated === parseInt(id));\n    setSelectedMonitoredEvent(monitoredEvent);\n  };\n\n  useMountEffect(() => {\n    setFetching(true);\n    getOrDownloadMonitoredEvents(monitoredEvents).then(result => {\n      updateMonitoredEvents(result);\n      initializeMonitoredEvent(result);\n    }).catch(e => {\n      setError(e.msg);\n    }).finally(() => setFetching(false));\n  }); // Cabeçalhos da tabela Variable + Funções Necessárias\n\n  const indexes_variable = [{\n    label: 'Variable',\n    key: 'monitoredVariableName'\n  }, {\n    label: 'Function Block',\n    key: 'id'\n  }, {\n    label: 'Smart Component',\n    key: 'sc'\n  }, {\n    label: 'Current Value',\n    key: 'currentValueData'\n  }]; // Cabeçalhos da tabela Event + Funções Necessárias\n\n  const indexes_event = [{\n    label: 'Event',\n    key: 'monitoredEventName'\n  }, {\n    label: 'Function Block',\n    key: 'fbAssociated'\n  }, {\n    label: 'Smart Component',\n    key: 'scAssociated'\n  }];\n\n  const getDataMonitoredEvent = () => selectedMonitoredEvent.map(monitoredEvent => {\n    return { ...monitoredEvent\n    };\n  });\n\n  const deleteMonitoredVariableAction = monVar => {\n    return new Promise(async (res, rej) => {\n      let i = 0;\n      let idMonitoredVariable = 0;\n\n      while (i < selectedMonitoredVariableGlobal.length) {\n        if (selectedMonitoredVariableGlobal[i].monitoredVariableName === monVar.monitoredVariableName && selectedMonitoredVariableGlobal[i].scAssociated === monVar.sc && selectedMonitoredVariableGlobal[i].fbAssociated === monVar.id) {\n          idMonitoredVariable = selectedMonitoredVariableGlobal[i].idMonitoredVariable;\n        }\n\n        i++;\n      }\n\n      if (!idMonitoredVariable) {\n        rej('Error');\n        return;\n      }\n\n      try {\n        const response = await deleteMonitoredVariable(idMonitoredVariable);\n        res(response);\n      } catch (err) {\n        rej(err);\n      }\n    });\n  };\n\n  const deleteMonitoredEventAction = monEv => {\n    return new Promise(async (res, rej) => {\n      if (!monEv.idMonitoredEvent) {\n        rej('Error');\n        return;\n      }\n\n      try {\n        const response = await deleteMonitoredEvent(monEv.idMonitoredEvent);\n        res(response);\n      } catch (err) {\n        rej(err);\n      }\n    });\n  }; // Variáveis e funções que permitem o redireccionamento para a página DigitalTwinMonitoring\n\n\n  const [redirectTo, setRedirectTo] = useState(\"\");\n\n  const redirectToList = () => {\n    socket.connect(() => {}, onDisconnect);\n    socket.emit(SOCKET_EVENT.OPCUA_DISCONNECT, \"OpcuaDisconnectSubscriptions\");\n    setRedirectTo(routes.digitalTwinMonitoring);\n  }; // Recuperar da base de dados as funcionalidades (Functionality)\n\n\n  const {\n    data: functionalities,\n    dispatchAction: dispatchFunctionalityActions\n  } = useStore('functionalities');\n\n  const updateFunctionalities = funcs => dispatchFunctionalityActions(FunctionalityActions.updateFunctionalities(funcs));\n\n  useMountEffect(() => {\n    setTimeout(() => {\n      setFetching(true);\n      getOrDownloadFunctionalities(functionalities).then(result => updateFunctionalities(result)).catch(e => setError(e.msg)).finally(() => setFetching(false));\n    }, 0);\n  }); //Recuperar dados da funcionalidade\n\n  let [functionalityName, setFunctionalityName] = useState([]);\n  let i = 0;\n\n  while (i < functionalities.length) {\n    if (functionalities[i].funcId === parseInt(id)) {\n      functionalityName = functionalities[i].funcName;\n    }\n\n    i++;\n  }\n\n  const [monitoredVariableInstances, setMonitoredVariableInstances] = useState([]);\n\n  const updateMonitoredVariableInstances = monVars => setMonitoredVariableInstances(getMonitoredVariablesWithCurrentValue(monVars));\n\n  const updateMonitoredVariableInstance = monVars => {\n    for (const monVar of monVars) {\n      if (selectedMonitoredVariableGlobal.length === 0) {\n        return [];\n      } else {\n        for (const selectedMonVar of selectedMonitoredVariableGlobal) {\n          if (selectedMonVar.monitoredVariableName === monVar.monitoredVariableName && selectedMonVar.scAssociated === monVar.sc && selectedMonVar.fbAssociated === monVar.id) {\n            setMonitoredVariableInstances(prevMonitoredVariables => {\n              let newMonVar = true;\n              const newMonitoredVariables = getMonitoredVariablesWithCurrentValue(prevMonitoredVariables.map(oMonVar => {\n                if (oMonVar.monitoredVariableName === monVar.monitoredVariableName && oMonVar.sc === monVar.sc && oMonVar.id === monVar.id) {\n                  newMonVar = false;\n                  return monVar;\n                }\n\n                return oMonVar;\n              }));\n\n              if (newMonVar) {\n                return [...prevMonitoredVariables, addCurrentValueData(monVar)];\n              }\n\n              return newMonitoredVariables;\n            });\n          }\n        }\n      }\n    }\n  };\n\n  const getMonitoredVariablesWithCurrentValue = monVars => {\n    return monVars.map(monVar => addCurrentValueData(monVar));\n  };\n\n  const addCurrentValueData = monVar => {\n    return { ...monVar,\n      currentValueData: {\n        key: monVar.monitoredVariableName,\n        data: monVar.currentValue\n      }\n    };\n  };\n\n  const onDisconnect = () => {\n    setError(\"Server error\");\n    setFetching(false);\n    setMonitoredVariableInstances([]);\n  }; //Função de trigger --> manipulação de dados quando carrega no botão de trigger\n\n\n  const triggerEventAction = monEv => {\n    return new Promise(async (res, rej) => {\n      try {\n        socket.connect(() => {}, onDisconnect);\n        socket.emit(SOCKET_EVENT.TRIGGER_EVENT, monEv);\n      } catch (err) {\n        rej(err);\n      }\n    });\n  };\n\n  if (redirectTo !== \"\") return /*#__PURE__*/_jsxDEV(Redirect, {\n    to: redirectTo,\n    push: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 332,\n    columnNumber: 12\n  }, this);\n  return /*#__PURE__*/_jsxDEV(Navigator, {\n    title: \"Digital Twin Monitoring\",\n    children: /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n            title: functionalityName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 339,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 340,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              children: /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                children: /*#__PURE__*/_jsxDEV(LazyComponent, {\n                  loaded: !fetching,\n                  children: error !== '' ? /*#__PURE__*/_jsxDEV(ConfirmAction, { ...confirmActionProps\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 346,\n                    columnNumber: 39\n                  }, this) : /*#__PURE__*/_jsxDEV(JPTable, {\n                    sortedkey: \"idMonitoredVariable\",\n                    data: monitoredVariableInstances,\n                    updateData: updateMonitoredVariableInstances,\n                    indexes: indexes_variable,\n                    tName: \"Monitored Variable\",\n                    extra: {\n                      delete: {\n                        action: deleteMonitoredVariableAction,\n                        labelKey: 'idMonitoredVariable',\n                        onSuccessDelete: () => {}\n                      }\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 347,\n                    columnNumber: 42\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 344,\n                  columnNumber: 29\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 343,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 342,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 341,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              children: /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                children: /*#__PURE__*/_jsxDEV(JPTable, {\n                  sortedkey: \"idMonitoredEvent\",\n                  data: getDataMonitoredEvent(),\n                  updateData: updateMonitoredEvents,\n                  indexes: indexes_event,\n                  tName: \"MonitoredEvent\",\n                  extra: {\n                    trigger_button: {\n                      action: triggerEventAction\n                    },\n                    delete: {\n                      action: deleteMonitoredEventAction,\n                      labelKey: 'idMonitoredEvent',\n                      onSuccessDelete: () => {}\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 368,\n                  columnNumber: 33\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 367,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 366,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 365,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FunctionalityForm, {\n        cancel: {\n          action: redirectToList,\n          label: 'Cancel'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 335,\n    columnNumber: 5\n  }, this);\n};\n\n_s(FunctionalityDetails, \"04P3J8YHkuZkHQpQNPRew/SuNbI=\", false, function () {\n  return [useRouteMatch, useMountEffect, useStore, useMountEffect, useStore, useMountEffect, useStore, useMountEffect];\n});\n\n_c = FunctionalityDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"FunctionalityDetails\");","map":{"version":3,"sources":["/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/DigitalTwin/FunctionalityDetails.tsx"],"names":["Card","CardContent","CardHeader","Divider","Grid","React","useState","Redirect","useRouteMatch","routes","FunctionalityActions","MonitoredEventActions","MonitoredVariableActions","getOrDownloadFunctionalities","getOrDownloadMonitoredEvents","getOrDownloadMonitoredVariables","useMountEffect","Navigator","useStore","JPTable","FunctionalityForm","SocketConnection","SOCKET_EVENT","deleteMonitoredEvent","deleteMonitoredVariable","LazyComponent","ConfirmAction","ConfirmActionStateLabel","selectedMonitoredVariableGlobal","FunctionalityDetails","matchParams","id","params","socket","getSmartComponentsNamespace","setTimeout","connect","onDisconnect","emit","UPDATE_BACKEND","addListener","EDITED_MVI_EVENT","data","updateMonitoredVariableInstance","disconnect","error","setError","confirmActionStates","label","state","positiveLabel","confirmActionProps","title","states","currentState","onCancel","fetching","setFetching","monitoredVariables","dispatchAction","dispatchMonitoredVariableActions","updateMonitoredVariables","monVar","updateMonitoredVariable","selectedMonitoredVariable","setSelectedMonitoredVariable","initializeMonitoredVariable","monVars","monitoredVariable","filter","funcIdAssociated","parseInt","then","result","catch","e","msg","finally","monitoredEvents","dispatchMonitoredEventActions","updateMonitoredEvents","monEv","updateMonitoredEvent","selectedMonitoredEvent","setSelectedMonitoredEvent","initializeMonitoredEvent","monEvs","monitoredEvent","indexes_variable","key","indexes_event","getDataMonitoredEvent","map","deleteMonitoredVariableAction","Promise","res","rej","i","idMonitoredVariable","length","monitoredVariableName","scAssociated","sc","fbAssociated","response","err","deleteMonitoredEventAction","idMonitoredEvent","redirectTo","setRedirectTo","redirectToList","OPCUA_DISCONNECT","digitalTwinMonitoring","functionalities","dispatchFunctionalityActions","updateFunctionalities","funcs","functionalityName","setFunctionalityName","funcId","funcName","monitoredVariableInstances","setMonitoredVariableInstances","updateMonitoredVariableInstances","getMonitoredVariablesWithCurrentValue","selectedMonVar","prevMonitoredVariables","newMonVar","newMonitoredVariables","oMonVar","addCurrentValueData","currentValueData","currentValue","triggerEventAction","TRIGGER_EVENT","delete","action","labelKey","onSuccessDelete","trigger_button"],"mappings":";;;AAAA,SAASA,IAAT,EAAeC,WAAf,EAA4BC,UAA5B,EAAwCC,OAAxC,EAAiDC,IAAjD,QAA6D,mBAA7D;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAAgBC,QAAhB,EAA0BC,aAA1B,QAA+C,kBAA/C;AACA,SAASC,MAAT,QAAuB,WAAvB;AAEA,SAASC,oBAAT,EAA+BC,qBAA/B,EAAsDC,wBAAtD,QAAsF,qBAAtF;AAEA,SAASC,4BAAT,EAAuCC,4BAAvC,EAAqEC,+BAArE,QAA4G,0BAA5G;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,SAAT,QAA0B,kCAA1B;AACA,SAASC,QAAT,QAAyB,0BAAzB;AACA,SAASC,OAAT,QAAwB,4BAAxB;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AACA,SAASC,gBAAT,EAA2BC,YAA3B,QAA+C,8BAA/C;AACA,SAASC,oBAAT,EAA+BC,uBAA/B,QAA8D,iCAA9D;AACA,SAASC,aAAT,QAA8B,0CAA9B;AACA,SAASC,aAAT,EAA4CC,uBAA5C,QAA2E,0CAA3E,C,CAEA;;;;AAEA,IAAIC,+BAAqD,GAAG,EAA5D;AASA,OAAO,MAAMC,oBAAoB,GAAG,MAA2B;AAAA;;AAE3D;AACA,QAAMC,WAAmB,GAAGtB,aAAa,EAAzC;AACA,QAAMuB,EAAE,GAAID,WAAW,CAACE,MAAb,CAA4BD,EAAvC,CAJ2D,CAM3D;;AACA,QAAME,MAAyB,GAAG,IAAIZ,gBAAJ,CAAqBA,gBAAgB,CAACa,2BAAjB,EAArB,CAAlC;AAEAlB,EAAAA,cAAc,CAAC,MAAM;AACjBmB,IAAAA,UAAU,CAAC,MAAM;AAEbF,MAAAA,MAAM,CAACG,OAAP,CAAe,MAAM,CAAE,CAAvB,EAAyBC,YAAzB;AACAJ,MAAAA,MAAM,CAACK,IAAP,CAAYhB,YAAY,CAACiB,cAAzB,EAAwC,0BAAxC;AACAN,MAAAA,MAAM,CAACO,WAAP,CAAmBlB,YAAY,CAACmB,gBAAhC,EAAmDC,IAAD,IAAU;AACxDC,QAAAA,+BAA+B,CAACD,IAAD,CAA/B;AACH,OAFD;AAIH,KARS,EAQP,CARO,CAAV;AAUH,GAXa,EAWX,MAAMT,MAAN,aAAMA,MAAN,uBAAMA,MAAM,CAAEW,UAAR,EAXK,CAAd;AAaA,QAAM,CAACC,KAAD,EAAOC,QAAP,IAAmBxC,QAAQ,CAAC,EAAD,CAAjC;AAEA,QAAMyC,mBAAmB,GAAG;AAExBF,IAAAA,KAAK,EAAE;AACLG,MAAAA,KAAK,EAAEH,KADF;AAELI,MAAAA,KAAK,EAAEtB,uBAAuB,CAACkB,KAF1B;AAGLK,MAAAA,aAAa,EAAE;AAHV;AAFiB,GAA5B;AASA,QAAMC,kBAAuC,GAAG;AAE5CC,IAAAA,KAAK,EAAE,6BAFqC;AAG5CC,IAAAA,MAAM,EAAEN,mBAHoC;AAI5CO,IAAAA,YAAY,EAAEP,mBAAmB,CAACF,KAJU;AAK5CU,IAAAA,QAAQ,EAAE,MAAMT,QAAQ,CAAC,EAAD;AALoB,GAAhD,CAjC2D,CAyC3D;;AACA,QAAM,CAACU,QAAD,EAAUC,WAAV,IAAyBnD,QAAQ,CAAC,IAAD,CAAvC;AACA,QAAM;AAACoC,IAAAA,IAAI,EAAEgB,kBAAP;AAA2BC,IAAAA,cAAc,EAAEC;AAA3C,MAA+E1C,QAAQ,CAAC,oBAAD,CAA7F;;AACA,QAAM2C,wBAAwB,GAAIC,MAAD,IAAiCF,gCAAgC,CAAChD,wBAAwB,CAACmD,uBAAzB,CAAiDD,MAAjD,CAAD,CAAlG;;AAEA,QAAM,CAACE,yBAAD,EAA4BC,4BAA5B,IAA8F3D,QAAQ,CAAC,EAAD,CAA5G;;AAEA,QAAM4D,2BAA2B,GAAIC,OAAD,IAAkC;AAElE,QAAIC,iBAAuC,GAAGD,OAAO,CAACE,MAAR,CAAgBP,MAAD,IAAYA,MAAM,CAACQ,gBAAP,KAA4BC,QAAQ,CAACxC,EAAD,CAA/D,CAA9C;AAEAH,IAAAA,+BAA+B,GAAGwC,iBAAlC;AAEAH,IAAAA,4BAA4B,CAACG,iBAAD,CAA5B;AAEH,GARD;;AAUApD,EAAAA,cAAc,CAAC,MAAM;AACjByC,IAAAA,WAAW,CAAC,IAAD,CAAX;AACA1C,IAAAA,+BAA+B,CAAC2C,kBAAD,CAA/B,CACCc,IADD,CACOC,MAAD,IAAiC;AACnCZ,MAAAA,wBAAwB,CAACY,MAAD,CAAxB;AACAP,MAAAA,2BAA2B,CAACO,MAAD,CAA3B;AACH,KAJD,EAKCC,KALD,CAKQC,CAAD,IAA4B;AAC/B7B,MAAAA,QAAQ,CAAC6B,CAAC,CAACC,GAAH,CAAR;AACH,KAPD,EAQCC,OARD,CAQS,MAAMpB,WAAW,CAAC,KAAD,CAR1B;AASH,GAXa,CAAd,CA1D2D,CAuE3D;;AACA,QAAM;AAACf,IAAAA,IAAI,EAAEoC,eAAP;AAAwBnB,IAAAA,cAAc,EAAEoB;AAAxC,MAAyE7D,QAAQ,CAAC,iBAAD,CAAvF;;AACA,QAAM8D,qBAAqB,GAAIC,KAAD,IAA6BF,6BAA6B,CAACpE,qBAAqB,CAACuE,oBAAtB,CAA2CD,KAA3C,CAAD,CAAxF;;AAEA,QAAM,CAACE,sBAAD,EAAyBC,yBAAzB,IAAqF9E,QAAQ,CAAC,EAAD,CAAnG;;AAEA,QAAM+E,wBAAwB,GAAIC,MAAD,IAA8B;AAE3D,QAAIC,cAAiC,GAAGD,MAAM,CAACjB,MAAP,CAAeY,KAAD,IAAWA,KAAK,CAACX,gBAAN,KAA2BC,QAAQ,CAACxC,EAAD,CAA5D,CAAxC;AAEAqD,IAAAA,yBAAyB,CAACG,cAAD,CAAzB;AAEH,GAND;;AAQAvE,EAAAA,cAAc,CAAC,MAAM;AAEjByC,IAAAA,WAAW,CAAC,IAAD,CAAX;AACA3C,IAAAA,4BAA4B,CAACgE,eAAD,CAA5B,CACCN,IADD,CACOC,MAAD,IAA8B;AAChCO,MAAAA,qBAAqB,CAACP,MAAD,CAArB;AACAY,MAAAA,wBAAwB,CAACZ,MAAD,CAAxB;AACH,KAJD,EAKCC,KALD,CAKQC,CAAD,IAA4B;AAC/B7B,MAAAA,QAAQ,CAAC6B,CAAC,CAACC,GAAH,CAAR;AACH,KAPD,EAQCC,OARD,CAQS,MAAMpB,WAAW,CAAC,KAAD,CAR1B;AAUH,GAba,CAAd,CArF2D,CAoG3D;;AACA,QAAM+B,gBAAgB,GAAG,CACrB;AAACxC,IAAAA,KAAK,EAAE,UAAR;AAAoByC,IAAAA,GAAG,EAAE;AAAzB,GADqB,EAErB;AAACzC,IAAAA,KAAK,EAAE,gBAAR;AAA0ByC,IAAAA,GAAG,EAAE;AAA/B,GAFqB,EAGrB;AAACzC,IAAAA,KAAK,EAAE,iBAAR;AAA2ByC,IAAAA,GAAG,EAAE;AAAhC,GAHqB,EAIrB;AAACzC,IAAAA,KAAK,EAAE,eAAR;AAAyByC,IAAAA,GAAG,EAAE;AAA9B,GAJqB,CAAzB,CArG2D,CA4G3D;;AACA,QAAMC,aAAa,GAAG,CAClB;AAAC1C,IAAAA,KAAK,EAAE,OAAR;AAAiByC,IAAAA,GAAG,EAAE;AAAtB,GADkB,EAElB;AAACzC,IAAAA,KAAK,EAAE,gBAAR;AAA0ByC,IAAAA,GAAG,EAAE;AAA/B,GAFkB,EAGlB;AAACzC,IAAAA,KAAK,EAAE,iBAAR;AAA2ByC,IAAAA,GAAG,EAAE;AAAhC,GAHkB,CAAtB;;AAMA,QAAME,qBAAqB,GAAG,MAAOR,sBAAsB,CAACS,GAAvB,CAA4BL,cAAD,IAAoC;AAEhG,WAAO,EACH,GAAGA;AADA,KAAP;AAIH,GANoC,CAArC;;AAQA,QAAMM,6BAA6B,GAAI/B,MAAD,IAAsD;AAExF,WAAO,IAAIgC,OAAJ,CAAY,OAAMC,GAAN,EAAmBC,GAAnB,KAAoC;AAEnD,UAAIC,CAAC,GAAG,CAAR;AACA,UAAIC,mBAAuC,GAAG,CAA9C;;AAEA,aAAMD,CAAC,GAAGrE,+BAA+B,CAACuE,MAA1C,EAAkD;AAC9C,YAAIvE,+BAA+B,CAACqE,CAAD,CAA/B,CAAmCG,qBAAnC,KAA6DtC,MAAM,CAACsC,qBAArE,IAAgGxE,+BAA+B,CAACqE,CAAD,CAA/B,CAAmCI,YAAnC,KAAoDvC,MAAM,CAACwC,EAA3J,IAAmK1E,+BAA+B,CAACqE,CAAD,CAA/B,CAAmCM,YAAnC,KAAoDzC,MAAM,CAAC/B,EAAjO,EAAqO;AACjOmE,UAAAA,mBAAmB,GAAGtE,+BAA+B,CAACqE,CAAD,CAA/B,CAAmCC,mBAAzD;AACH;;AACDD,QAAAA,CAAC;AACJ;;AAED,UAAG,CAACC,mBAAJ,EAAyB;AACrBF,QAAAA,GAAG,CAAC,OAAD,CAAH;AACA;AACH;;AAED,UAAI;AACA,cAAMQ,QAA+B,GAAG,MAAMhF,uBAAuB,CAAC0E,mBAAD,CAArE;AACAH,QAAAA,GAAG,CAACS,QAAD,CAAH;AACH,OAHD,CAKA,OAAMC,GAAN,EAAW;AACPT,QAAAA,GAAG,CAACS,GAAD,CAAH;AACH;AACJ,KAzBM,CAAP;AA0BH,GA5BD;;AA8BA,QAAMC,0BAA0B,GAAIzB,KAAD,IAA0C;AAEzE,WAAO,IAAIa,OAAJ,CAAY,OAAMC,GAAN,EAAmBC,GAAnB,KAAoC;AAEnD,UAAG,CAACf,KAAK,CAAC0B,gBAAV,EAA4B;AACxBX,QAAAA,GAAG,CAAC,OAAD,CAAH;AACA;AACH;;AAED,UAAI;AACA,cAAMQ,QAA+B,GAAG,MAAMjF,oBAAoB,CAAC0D,KAAK,CAAC0B,gBAAP,CAAlE;AACAZ,QAAAA,GAAG,CAACS,QAAD,CAAH;AACH,OAHD,CAKA,OAAMC,GAAN,EAAW;AACPT,QAAAA,GAAG,CAACS,GAAD,CAAH;AACH;AACJ,KAfM,CAAP;AAgBH,GAlBD,CAzJ2D,CA6K3D;;;AACA,QAAM,CAACG,UAAD,EAAaC,aAAb,IAAmDvG,QAAQ,CAAC,EAAD,CAAjE;;AAEA,QAAMwG,cAAc,GAAG,MAAM;AAEzB7E,IAAAA,MAAM,CAACG,OAAP,CAAe,MAAM,CAAE,CAAvB,EAAyBC,YAAzB;AACAJ,IAAAA,MAAM,CAACK,IAAP,CAAYhB,YAAY,CAACyF,gBAAzB,EAA0C,8BAA1C;AAEAF,IAAAA,aAAa,CAACpG,MAAM,CAACuG,qBAAR,CAAb;AACH,GAND,CAhL2D,CAwL3D;;;AACA,QAAM;AAACtE,IAAAA,IAAI,EAACuE,eAAN;AAAuBtD,IAAAA,cAAc,EAACuD;AAAtC,MAAsEhG,QAAQ,CAAC,iBAAD,CAApF;;AACA,QAAMiG,qBAAqB,GAAIC,KAAD,IAA4BF,4BAA4B,CAACxG,oBAAoB,CAACyG,qBAArB,CAA2CC,KAA3C,CAAD,CAAtF;;AAEApG,EAAAA,cAAc,CAAC,MAAM;AACjBmB,IAAAA,UAAU,CAAC,MAAM;AAEbsB,MAAAA,WAAW,CAAC,IAAD,CAAX;AACA5C,MAAAA,4BAA4B,CAACoG,eAAD,CAA5B,CACCzC,IADD,CACOC,MAAD,IAA6B0C,qBAAqB,CAAC1C,MAAD,CADxD,EAECC,KAFD,CAEQC,CAAD,IAA4B7B,QAAQ,CAAC6B,CAAC,CAACC,GAAH,CAF3C,EAGCC,OAHD,CAGS,MAAMpB,WAAW,CAAC,KAAD,CAH1B;AAIH,KAPS,EAOP,CAPO,CAAV;AAQH,GATa,CAAd,CA5L2D,CAuM3D;;AACA,MAAI,CAAC4D,iBAAD,EAAoBC,oBAApB,IAA0EhH,QAAQ,CAAC,EAAD,CAAtF;AAEA,MAAI2F,CAAC,GAAG,CAAR;;AACA,SAAMA,CAAC,GAAGgB,eAAe,CAACd,MAA1B,EAAiC;AAE7B,QAAGc,eAAe,CAAChB,CAAD,CAAf,CAAmBsB,MAAnB,KAA8BhD,QAAQ,CAACxC,EAAD,CAAzC,EAA+C;AAE3CsF,MAAAA,iBAAiB,GAAGJ,eAAe,CAAChB,CAAD,CAAf,CAAmBuB,QAAvC;AACH;;AACDvB,IAAAA,CAAC;AACJ;;AAED,QAAM,CAACwB,0BAAD,EAA4BC,6BAA5B,IAA8GpH,QAAQ,CAAC,EAAD,CAA5H;;AAEA,QAAMqH,gCAAgC,GAAIxD,OAAD,IAAyCuD,6BAA6B,CAACE,qCAAqC,CAACzD,OAAD,CAAtC,CAA/G;;AAEA,QAAMxB,+BAA+B,GAAIwB,OAAD,IAA0C;AAE1E,SAAI,MAAML,MAAV,IAAoBK,OAApB,EAA6B;AAEzB,UAAGvC,+BAA+B,CAACuE,MAAhC,KAA2C,CAA9C,EAAgD;AAC5C,eAAO,EAAP;AACH,OAFD,MAII;AAEA,aAAI,MAAM0B,cAAV,IAA4BjG,+BAA5B,EAA4D;AAExD,cAAIiG,cAAc,CAACzB,qBAAf,KAAyCtC,MAAM,CAACsC,qBAAjD,IAA4EyB,cAAc,CAACxB,YAAf,KAAgCvC,MAAM,CAACwC,EAAnH,IAA2HuB,cAAc,CAACtB,YAAf,KAAgCzC,MAAM,CAAC/B,EAArK,EAAyK;AAErK2F,YAAAA,6BAA6B,CAAEI,sBAAD,IAAiE;AAE3F,kBAAIC,SAAS,GAAG,IAAhB;AAEA,oBAAMC,qBAAqB,GAAGJ,qCAAqC,CAACE,sBAAsB,CAAClC,GAAvB,CAA4BqC,OAAD,IAA+C;AAE1I,oBAAIA,OAAO,CAAC7B,qBAAR,KAAkCtC,MAAM,CAACsC,qBAA1C,IAAqE6B,OAAO,CAAC3B,EAAR,KAAexC,MAAM,CAACwC,EAA3F,IAAoG2B,OAAO,CAAClG,EAAR,KAAe+B,MAAM,CAAC/B,EAA7H,EAAkI;AAC9HgG,kBAAAA,SAAS,GAAG,KAAZ;AACA,yBAAOjE,MAAP;AACH;;AACD,uBAAOmE,OAAP;AAEH,eARmE,CAAD,CAAnE;;AAUA,kBAAGF,SAAH,EAAa;AACT,uBAAO,CAAC,GAAGD,sBAAJ,EAA4BI,mBAAmB,CAACpE,MAAD,CAA/C,CAAP;AACH;;AACD,qBAAOkE,qBAAP;AAEH,aAnB4B,CAA7B;AAoBH;AACJ;AACJ;AAEJ;AAER,GAxCD;;AA0CA,QAAMJ,qCAAqC,GAAIzD,OAAD,IAAgF;AAE1H,WAAOA,OAAO,CAACyB,GAAR,CAAa9B,MAAD,IAAsCoE,mBAAmB,CAACpE,MAAD,CAArE,CAAP;AAEH,GAJD;;AAMA,QAAMoE,mBAAmB,GAAIpE,MAAD,IAA2E;AAEnG,WACI,EACI,GAAGA,MADP;AAEIqE,MAAAA,gBAAgB,EAAG;AACf1C,QAAAA,GAAG,EAAE3B,MAAM,CAACsC,qBADG;AAEf1D,QAAAA,IAAI,EAAEoB,MAAM,CAACsE;AAFE;AAFvB,KADJ;AASH,GAXD;;AAaA,QAAM/F,YAAY,GAAG,MAAM;AACvBS,IAAAA,QAAQ,CAAC,cAAD,CAAR;AACAW,IAAAA,WAAW,CAAC,KAAD,CAAX;AACAiE,IAAAA,6BAA6B,CAAC,EAAD,CAA7B;AACH,GAJD,CArR2D,CA2R3D;;;AACA,QAAMW,kBAAkB,GAAIpD,KAAD,IAA0C;AAEjE,WAAO,IAAIa,OAAJ,CAAY,OAAMC,GAAN,EAAmBC,GAAnB,KAAoC;AAEnD,UAAI;AAEA/D,QAAAA,MAAM,CAACG,OAAP,CAAe,MAAM,CAAE,CAAvB,EAAyBC,YAAzB;AACAJ,QAAAA,MAAM,CAACK,IAAP,CAAYhB,YAAY,CAACgH,aAAzB,EAAuCrD,KAAvC;AAED,OALH,CAOA,OAAMwB,GAAN,EAAW;AACPT,QAAAA,GAAG,CAACS,GAAD,CAAH;AACH;AACJ,KAZM,CAAP;AAaH,GAfD;;AAiBA,MAAGG,UAAU,KAAK,EAAlB,EACA,oBAAO,QAAC,QAAD;AAAU,IAAA,EAAE,EAAEA,UAAd;AAA0B,IAAA,IAAI,EAAE;AAAhC;AAAA;AAAA;AAAA;AAAA,UAAP;AAEA,sBACA,QAAC,SAAD;AAAW,IAAA,KAAK,EAAC,yBAAjB;AAAA,2BACA;AAAA,8BACI,QAAC,IAAD;AAAM,QAAA,IAAI,MAAV;AAAA,+BACI,QAAC,IAAD;AAAA,kCACI,QAAC,UAAD;AAAY,YAAA,KAAK,EAAES;AAAnB;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,kBAFJ,eAGQ,QAAC,WAAD;AAAA,mCACI,QAAC,IAAD;AAAM,cAAA,IAAI,MAAV;AAAW,cAAA,EAAE,EAAE,EAAf;AAAA,qCACI,QAAC,IAAD;AAAM,gBAAA,IAAI,MAAV;AAAA,uCACA,QAAC,aAAD;AAAe,kBAAA,MAAM,EAAE,CAAC7D,QAAxB;AAAA,4BACKX,KAAK,KAAK,EAAV,gBACK,QAAC,aAAD,OAAmBM;AAAnB;AAAA;AAAA;AAAA;AAAA,0BADL,gBAEQ,QAAC,OAAD;AACD,oBAAA,SAAS,EAAC,qBADT;AAED,oBAAA,IAAI,EAAEsE,0BAFL;AAGD,oBAAA,UAAU,EAAEE,gCAHX;AAID,oBAAA,OAAO,EAAEnC,gBAJR;AAKD,oBAAA,KAAK,EAAC,oBALL;AAMD,oBAAA,KAAK,EAAI;AACL+C,sBAAAA,MAAM,EAAE;AACRC,wBAAAA,MAAM,EAAE3C,6BADA;AAER4C,wBAAAA,QAAQ,EAAE,qBAFF;AAGRC,wBAAAA,eAAe,EAAE,MAAM,CAAE;AAHjB;AADH;AANR;AAAA;AAAA;AAAA;AAAA;AAHb;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBAHR,eA2BQ,QAAC,WAAD;AAAA,mCACI,QAAC,IAAD;AAAM,cAAA,IAAI,MAAV;AAAW,cAAA,EAAE,EAAE,EAAf;AAAA,qCACI,QAAC,IAAD;AAAM,gBAAA,IAAI,MAAV;AAAA,uCACI,QAAC,OAAD;AACI,kBAAA,SAAS,EAAC,kBADd;AAEI,kBAAA,IAAI,EAAE/C,qBAAqB,EAF/B;AAGI,kBAAA,UAAU,EAAEX,qBAHhB;AAII,kBAAA,OAAO,EAAEU,aAJb;AAKI,kBAAA,KAAK,EAAC,gBALV;AAMI,kBAAA,KAAK,EAAE;AACHiD,oBAAAA,cAAc,EAAE;AACZH,sBAAAA,MAAM,EAAEH;AADI,qBADb;AAIHE,oBAAAA,MAAM,EAAE;AACJC,sBAAAA,MAAM,EAAE9B,0BADJ;AAEJ+B,sBAAAA,QAAQ,EAAE,kBAFN;AAGJC,sBAAAA,eAAe,EAAE,MAAM,CAAE;AAHrB;AAJL;AANX;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBA3BR;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ,eAsDI,QAAC,iBAAD;AACI,QAAA,MAAM,EAAE;AAACF,UAAAA,MAAM,EAAE1B,cAAT;AAAyB9D,UAAAA,KAAK,EAAE;AAAhC;AADZ;AAAA;AAAA;AAAA;AAAA,cAtDJ;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,UADA;AA+DH,CA/WM;;GAAMnB,oB;UAGmBrB,a,EAM5BQ,c,EAkCqFE,Q,EAerFF,c,EAc+EE,Q,EAa/EF,c,EAoG4EE,Q,EAG5EF,c;;;KA5LSa,oB","sourcesContent":["import { Card, CardContent, CardHeader, Divider, Grid } from '@material-ui/core'\r\nimport React, { useState } from 'react'\r\nimport { match, Redirect, useRouteMatch } from 'react-router-dom'\r\nimport { routes } from '../../App'\r\nimport { Functionality, MonitoredEvent, MonitoredVariable, MonitoredVariableInstance } from '../../model'\r\nimport { FunctionalityActions, MonitoredEventActions, MonitoredVariableActions } from '../../redux/actions'\r\nimport { RequestResponseState } from '../../services/api/api'\r\nimport { getOrDownloadFunctionalities, getOrDownloadMonitoredEvents, getOrDownloadMonitoredVariables } from '../../utils/digitalTwins'\r\nimport { useMountEffect } from '../../utils/main'\r\nimport { Navigator } from '../templates/Navigator/Navigator'\r\nimport { useStore } from '../templates/Store/Store'\r\nimport { JPTable } from '../templates/Table/JPTable'\r\nimport { FunctionalityForm } from './FunctionalityForm'\r\nimport { SocketConnection, SOCKET_EVENT } from '../../services/socket/socket'\r\nimport { deleteMonitoredEvent, deleteMonitoredVariable } from '../../services/api/digital-twin'\r\nimport { LazyComponent } from '../templates/LazyComponent/LazyComponent'\r\nimport { ConfirmAction, ConfirmActionProps, ConfirmActionStateLabel } from '../templates/ConfirmAction/ConfirmAction'\r\n\r\n//Esta página pretende dispor informação mais detalhada da funcionalidade correspondente disponível na página \"DigitalTwinMonitoring\"\r\n\r\nlet selectedMonitoredVariableGlobal : MonitoredVariable[] = []\r\n\r\ninterface MonitoredVariableWithCurrentValue extends MonitoredVariableInstance {\r\n    currentValueData: {\r\n        key: string | undefined\r\n        data: number\r\n    }\r\n}\r\n\r\nexport const FunctionalityDetails = () : React.ReactElement => {\r\n    \r\n    //Recupera o id da funcionalidade seleccionada anteriormente na página Digital Twin Monitoring\r\n    const matchParams : match = useRouteMatch()\r\n    const id = (matchParams.params as any).id\r\n\r\n    //Estabelecer a ligação com os sockets\r\n    const socket : SocketConnection = new SocketConnection(SocketConnection.getSmartComponentsNamespace())\r\n\r\n    useMountEffect(() => {\r\n        setTimeout(() => {\r\n\r\n            socket.connect(() => {}, onDisconnect)\r\n            socket.emit(SOCKET_EVENT.UPDATE_BACKEND,\"UpdateMonitoredVariables\")\r\n            socket.addListener(SOCKET_EVENT.EDITED_MVI_EVENT, (data) => { \r\n                updateMonitoredVariableInstance(data)\r\n            })\r\n            \r\n        }, 0)\r\n\r\n    }, () => socket?.disconnect())\r\n\r\n    const [error,setError] = useState('')\r\n\r\n    const confirmActionStates = {\r\n\r\n        error: {\r\n          label: error,\r\n          state: ConfirmActionStateLabel.error,\r\n          positiveLabel: 'Ok'\r\n        },\r\n    }\r\n\r\n    const confirmActionProps : ConfirmActionProps = {\r\n\r\n        title: 'Loading Monitored-Variables',\r\n        states: confirmActionStates,\r\n        currentState: confirmActionStates.error,\r\n        onCancel: () => setError(''),      \r\n    }\r\n    \r\n    //Recuperar da base de dados as variáveis que estão a ser monitorizadas (MonitoredVariable)\r\n    const [fetching,setFetching] = useState(true)\r\n    const {data: monitoredVariables, dispatchAction: dispatchMonitoredVariableActions} = useStore('monitoredVariables')\r\n    const updateMonitoredVariables = (monVar: MonitoredVariable[]) => dispatchMonitoredVariableActions(MonitoredVariableActions.updateMonitoredVariable(monVar))\r\n    \r\n    const [selectedMonitoredVariable, setSelectedMonitoredVariable] : [MonitoredVariable[], Function] = useState([])\r\n    \r\n    const initializeMonitoredVariable = (monVars: MonitoredVariable[]) => {\r\n        \r\n        let monitoredVariable : MonitoredVariable[] = monVars.filter((monVar) => monVar.funcIdAssociated === parseInt(id))\r\n        \r\n        selectedMonitoredVariableGlobal = monitoredVariable;\r\n        \r\n        setSelectedMonitoredVariable(monitoredVariable)\r\n        \r\n    }\r\n    \r\n    useMountEffect(() => {\r\n        setFetching(true)\r\n        getOrDownloadMonitoredVariables(monitoredVariables)\r\n        .then((result: MonitoredVariable[]) => {\r\n            updateMonitoredVariables(result)\r\n            initializeMonitoredVariable(result)\r\n        })\r\n        .catch((e:RequestResponseState) => {\r\n            setError(e.msg)\r\n        })\r\n        .finally(() => setFetching(false))\r\n    })\r\n    \r\n    //Recuperar da base de dados os eventos que estão a ser monitorizados (MonitoredEvent)\r\n    const {data: monitoredEvents, dispatchAction: dispatchMonitoredEventActions} = useStore('monitoredEvents')\r\n    const updateMonitoredEvents = (monEv: MonitoredEvent[]) => dispatchMonitoredEventActions(MonitoredEventActions.updateMonitoredEvent(monEv))\r\n    \r\n    const [selectedMonitoredEvent, setSelectedMonitoredEvent] : [MonitoredEvent[], Function] = useState([])\r\n    \r\n    const initializeMonitoredEvent = (monEvs: MonitoredEvent[]) => {\r\n        \r\n        let monitoredEvent : MonitoredEvent[] = monEvs.filter((monEv) => monEv.funcIdAssociated === parseInt(id))\r\n        \r\n        setSelectedMonitoredEvent(monitoredEvent)\r\n        \r\n    }\r\n    \r\n    useMountEffect(() => {\r\n        \r\n        setFetching(true)\r\n        getOrDownloadMonitoredEvents(monitoredEvents)\r\n        .then((result: MonitoredEvent[]) => {\r\n            updateMonitoredEvents(result)\r\n            initializeMonitoredEvent(result)\r\n        })\r\n        .catch((e:RequestResponseState) => {\r\n            setError(e.msg)\r\n        })\r\n        .finally(() => setFetching(false))\r\n        \r\n    })\r\n    \r\n    // Cabeçalhos da tabela Variable + Funções Necessárias\r\n    const indexes_variable = [\r\n        {label: 'Variable', key: 'monitoredVariableName'},\r\n        {label: 'Function Block', key: 'id'},\r\n        {label: 'Smart Component', key: 'sc'},\r\n        {label: 'Current Value', key: 'currentValueData'},\r\n    ]\r\n    \r\n    // Cabeçalhos da tabela Event + Funções Necessárias\r\n    const indexes_event = [\r\n        {label: 'Event', key: 'monitoredEventName'},\r\n        {label: 'Function Block', key: 'fbAssociated'},\r\n        {label: 'Smart Component', key: 'scAssociated'},\r\n    ]\r\n    \r\n    const getDataMonitoredEvent = () =>  selectedMonitoredEvent.map((monitoredEvent: MonitoredEvent) => {    \r\n        \r\n        return {\r\n            ...monitoredEvent\r\n        }\r\n\r\n    })\r\n    \r\n    const deleteMonitoredVariableAction = (monVar: MonitoredVariableInstance) : Promise<any> => {\r\n        \r\n        return new Promise(async(res:Function,rej:Function) => {\r\n\r\n            let i = 0\r\n            let idMonitoredVariable: number | undefined = 0\r\n            \r\n            while(i < selectedMonitoredVariableGlobal.length) {\r\n                if((selectedMonitoredVariableGlobal[i].monitoredVariableName === monVar.monitoredVariableName) && (selectedMonitoredVariableGlobal[i].scAssociated === monVar.sc) && (selectedMonitoredVariableGlobal[i].fbAssociated === monVar.id)){\r\n                    idMonitoredVariable = selectedMonitoredVariableGlobal[i].idMonitoredVariable\r\n                }\r\n                i++\r\n            }\r\n            \r\n            if(!idMonitoredVariable) {\r\n                rej('Error')\r\n                return\r\n            }\r\n            \r\n            try {\r\n                const response : RequestResponseState = await deleteMonitoredVariable(idMonitoredVariable)\r\n                res(response)\r\n            }\r\n            \r\n            catch(err) {\r\n                rej(err)\r\n            }\r\n        })\r\n    }\r\n    \r\n    const deleteMonitoredEventAction = (monEv: MonitoredEvent) : Promise<any> => {\r\n        \r\n        return new Promise(async(res:Function,rej:Function) => {\r\n            \r\n            if(!monEv.idMonitoredEvent) {\r\n                rej('Error')\r\n                return\r\n            }\r\n            \r\n            try {\r\n                const response : RequestResponseState = await deleteMonitoredEvent(monEv.idMonitoredEvent)\r\n                res(response)\r\n            }\r\n            \r\n            catch(err) {\r\n                rej(err)\r\n            }\r\n        })\r\n    }\r\n    \r\n    // Variáveis e funções que permitem o redireccionamento para a página DigitalTwinMonitoring\r\n    const [redirectTo, setRedirectTo] : [string, Function] = useState(\"\")\r\n    \r\n    const redirectToList = () => {\r\n\r\n        socket.connect(() => {}, onDisconnect)\r\n        socket.emit(SOCKET_EVENT.OPCUA_DISCONNECT,\"OpcuaDisconnectSubscriptions\")\r\n        \r\n        setRedirectTo(routes.digitalTwinMonitoring)\r\n    }\r\n    \r\n    // Recuperar da base de dados as funcionalidades (Functionality)\r\n    const {data:functionalities, dispatchAction:dispatchFunctionalityActions} = useStore('functionalities')\r\n    const updateFunctionalities = (funcs: Functionality[]) => dispatchFunctionalityActions(FunctionalityActions.updateFunctionalities(funcs))\r\n    \r\n    useMountEffect(() => {\r\n        setTimeout(() => {\r\n            \r\n            setFetching(true)\r\n            getOrDownloadFunctionalities(functionalities)\r\n            .then((result: Functionality[]) => updateFunctionalities(result))\r\n            .catch((e:RequestResponseState) => setError(e.msg))\r\n            .finally(() => setFetching(false))\r\n        }, 0)\r\n    })\r\n    \r\n    //Recuperar dados da funcionalidade\r\n    let [functionalityName, setFunctionalityName] : [Functionality[], Function] = useState([])\r\n    \r\n    let i = 0;\r\n    while(i < functionalities.length){\r\n    \r\n        if(functionalities[i].funcId === parseInt(id)) {\r\n         \r\n            functionalityName = functionalities[i].funcName\r\n        }\r\n        i++\r\n    }\r\n    \r\n    const [monitoredVariableInstances,setMonitoredVariableInstances] : [MonitoredVariableWithCurrentValue[],Function] = useState([])\r\n    \r\n    const updateMonitoredVariableInstances = (monVars:MonitoredVariableInstance[]) => setMonitoredVariableInstances(getMonitoredVariablesWithCurrentValue(monVars))\r\n    \r\n    const updateMonitoredVariableInstance = (monVars: MonitoredVariableInstance[]) => { \r\n            \r\n            for(const monVar of monVars) {\r\n                \r\n                if(selectedMonitoredVariableGlobal.length === 0){\r\n                    return []\r\n                }\r\n\r\n                else{\r\n                    \r\n                    for(const selectedMonVar of selectedMonitoredVariableGlobal){\r\n                        \r\n                        if((selectedMonVar.monitoredVariableName === monVar.monitoredVariableName) && (selectedMonVar.scAssociated === monVar.sc) && (selectedMonVar.fbAssociated === monVar.id)){\r\n                            \r\n                            setMonitoredVariableInstances((prevMonitoredVariables: MonitoredVariableWithCurrentValue[]) => {\r\n                                \r\n                                let newMonVar = true\r\n                                \r\n                                const newMonitoredVariables = getMonitoredVariablesWithCurrentValue(prevMonitoredVariables.map((oMonVar:MonitoredVariableWithCurrentValue) => {\r\n                                    \r\n                                    if((oMonVar.monitoredVariableName === monVar.monitoredVariableName) && (oMonVar.sc === monVar.sc) &&  (oMonVar.id === monVar.id)) {\r\n                                        newMonVar = false\r\n                                        return monVar\r\n                                    }\r\n                                    return oMonVar\r\n                                    \r\n                                }))\r\n                                \r\n                                if(newMonVar){\r\n                                    return [...prevMonitoredVariables, addCurrentValueData(monVar)]\r\n                                }\r\n                                return newMonitoredVariables\r\n                                \r\n                            })\r\n                        }\r\n                    }\r\n                }\r\n                \r\n            }\r\n        \r\n    }\r\n    \r\n    const getMonitoredVariablesWithCurrentValue = (monVars: MonitoredVariableInstance[]) : MonitoredVariableWithCurrentValue[] => {\r\n        \r\n        return monVars.map((monVar:MonitoredVariableInstance) => addCurrentValueData(monVar))\r\n        \r\n    }\r\n    \r\n    const addCurrentValueData = (monVar: MonitoredVariableInstance) : MonitoredVariableWithCurrentValue => {\r\n        \r\n        return (\r\n            {\r\n                ...monVar, \r\n                currentValueData:  {\r\n                    key: monVar.monitoredVariableName,\r\n                    data: monVar.currentValue\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    const onDisconnect = () => {\r\n        setError(\"Server error\")\r\n        setFetching(false)\r\n        setMonitoredVariableInstances([])\r\n    }\r\n\r\n    //Função de trigger --> manipulação de dados quando carrega no botão de trigger\r\n    const triggerEventAction = (monEv: MonitoredEvent) : Promise<any> => {\r\n        \r\n        return new Promise(async(res:Function,rej:Function) => {\r\n            \r\n            try {\r\n    \r\n                socket.connect(() => {}, onDisconnect)\r\n                socket.emit(SOCKET_EVENT.TRIGGER_EVENT,monEv)\r\n\r\n              }\r\n    \r\n            catch(err) {\r\n                rej(err)\r\n            }\r\n        })\r\n    }\r\n\r\n    if(redirectTo !== \"\") \r\n    return <Redirect to={redirectTo} push={true} />\r\n\r\n    return(\r\n    <Navigator title=\"Digital Twin Monitoring\">\r\n    <>\r\n        <Grid item>\r\n            <Card>\r\n                <CardHeader title={functionalityName} />\r\n                <Divider />\r\n                    <CardContent>\r\n                        <Grid item xs={12}>        \r\n                            <Grid item> \r\n                            <LazyComponent loaded={!fetching}>\r\n                                {error !== ''\r\n                                    ? <ConfirmAction {...confirmActionProps}/> \r\n                                    :    <JPTable\r\n                                        sortedkey=\"idMonitoredVariable\"\r\n                                        data={monitoredVariableInstances} \r\n                                        updateData={updateMonitoredVariableInstances} \r\n                                        indexes={indexes_variable} \r\n                                        tName='Monitored Variable'\r\n                                        extra = {{   \r\n                                            delete: {\r\n                                            action: deleteMonitoredVariableAction,\r\n                                            labelKey: 'idMonitoredVariable',\r\n                                            onSuccessDelete: () => {}\r\n                                    }}}\r\n                                />\r\n                                }\r\n                            </LazyComponent>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </CardContent>\r\n                    <CardContent>\r\n                        <Grid item xs={12}>        \r\n                            <Grid item>\r\n                                <JPTable\r\n                                    sortedkey=\"idMonitoredEvent\"\r\n                                    data={getDataMonitoredEvent()} \r\n                                    updateData={updateMonitoredEvents} \r\n                                    indexes={indexes_event} \r\n                                    tName='MonitoredEvent'\r\n                                    extra={{\r\n                                        trigger_button: {\r\n                                            action: triggerEventAction\r\n                                        },\r\n                                        delete: {\r\n                                            action: deleteMonitoredEventAction,\r\n                                            labelKey: 'idMonitoredEvent',\r\n                                            onSuccessDelete: () => {}\r\n                                        }\r\n                                    }} \r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                    </CardContent>\r\n            </Card>\r\n        </Grid>\r\n        <FunctionalityForm\r\n            cancel={{action: redirectToList, label: 'Cancel'}}\r\n        />\r\n    </>\r\n    \r\n    </Navigator>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}