{"ast":null,"code":"var _jsxFileName = \"/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/DigitalTwin/FunctionalityDetails.tsx\",\n    _s = $RefreshSig$();\n\nimport { Card, CardContent, CardHeader, Divider, Grid } from '@material-ui/core';\nimport React, { useState } from 'react';\nimport { Redirect, useRouteMatch } from 'react-router-dom';\nimport { routes } from '../../App';\nimport { FunctionalityActions, MonitoredEventActions, MonitoredVariableActions } from '../../redux/actions';\nimport { getOrDownloadFunctionalities, getOrDownloadMonitoredEvents, getOrDownloadMonitoredVariables } from '../../utils/digitalTwins';\nimport { useMountEffect } from '../../utils/main';\nimport { Navigator } from '../templates/Navigator/Navigator';\nimport { useStore } from '../templates/Store/Store';\nimport { JPTable } from '../templates/Table/JPTable';\nimport { FunctionalityForm } from './FunctionalityForm';\nimport { SocketConnection, SOCKET_EVENT } from '../../services/socket/socket';\nimport { useSmartComponentStyles } from '../SmartComponents/style';\nimport { deleteMonitoredVariable } from '../../services/api/digital-twin'; //Esta página pretende dispor informação mais detalhada da funcionalidade correspondente disponível na página \"DigitalTwinMonitoring\"\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const FunctionalityDetails = () => {\n  _s();\n\n  //Recupera o id da funcionalidade seleccionada anteriormente na página Digital Twin Monitoring\n  const matchParams = useRouteMatch();\n  const id = matchParams.params.id; // Recuperar da base de dados as variáveis que estão a ser monitorizadas (MonitoredVariable)\n\n  const [fetching, setFetching] = useState(true);\n  const [error, setError] = useState('');\n  const {\n    data: monitoredVariables,\n    dispatchAction: dispatchMonitoredVariableActions\n  } = useStore('monitoredVariables');\n\n  const updateMonitoredVariables = monVar => dispatchMonitoredVariableActions(MonitoredVariableActions.updateMonitoredVariable(monVar));\n\n  const [selectedMonitoredVariable, setSelectedMonitoredVariable] = useState([]);\n\n  const initializeMonitoredVariable = monVars => {\n    let monitoredVariable = monVars.filter(monVar => monVar.funcIdAssociated === parseInt(id));\n    setSelectedMonitoredVariable(monitoredVariable);\n  };\n\n  useMountEffect(() => {\n    setFetching(true);\n    getOrDownloadMonitoredVariables(monitoredVariables).then(result => {\n      updateMonitoredVariables(result);\n      initializeMonitoredVariable(result);\n    }).catch(e => {\n      setError(e.msg);\n    }).finally(() => setFetching(false));\n  }); // Recuperar da base de dados os eventos que estão a ser monitorizados (MonitoredEvent)\n\n  const {\n    data: monitoredEvents,\n    dispatchAction: dispatchMonitoredEventActions\n  } = useStore('monitoredEvents');\n\n  const updateMonitoredEvents = monEv => dispatchMonitoredEventActions(MonitoredEventActions.updateMonitoredEvent(monEv));\n\n  const [selectedMonitoredEvent, setSelectedMonitoredEvent] = useState([]);\n\n  const initializeMonitoredEvent = monEvs => {\n    let monitoredEvent = monEvs.filter(monEv => monEv.funcIdAssociated === parseInt(id));\n    setSelectedMonitoredEvent(monitoredEvent);\n  };\n\n  useMountEffect(() => {\n    setFetching(true);\n    getOrDownloadMonitoredEvents(monitoredEvents).then(result => {\n      updateMonitoredEvents(result);\n      initializeMonitoredEvent(result);\n    }).catch(e => {\n      setError(e.msg);\n    }).finally(() => setFetching(false));\n  }); // Cabeçalhos da tabela Variable + Funções Necessárias\n\n  const indexes_variable = [{\n    label: 'Variable',\n    key: 'monitoredVariableName'\n  }, {\n    label: 'Function Block',\n    key: 'fbAssociated'\n  }, {\n    label: 'Smart Component',\n    key: 'scAssociated'\n  }, {\n    label: 'Current Value',\n    key: 'state'\n  } //{label: 'Graph', key: 'dtName'},\n  //{label: 'Remove', key: 'dtName'},\n  ];\n\n  const getDataMonitoredVariable = () => selectedMonitoredVariable.map(monitoredVariable => {\n    return { ...monitoredVariable\n    };\n  }); // Cabeçalhos da tabela Event + Funções Necessárias\n\n\n  const indexes_event = [{\n    label: 'Event',\n    key: 'monitoredEventName'\n  }, {\n    label: 'Function Block',\n    key: 'fbAssociated'\n  }, {\n    label: 'Smart Component',\n    key: 'scAssociated'\n  }, {\n    label: 'Trigger',\n    key: 'dtName'\n  }, {\n    label: 'Current Value',\n    key: 'sc.scState'\n  } //{label: 'Graph', key: 'dtName'},\n  //{label: 'Remove', key: 'dtName'},\n  ];\n\n  const getDataMonitoredEvent = () => selectedMonitoredEvent.map(monitoredEvent => {\n    return { ...monitoredEvent\n    };\n  });\n\n  const deleteMonitoredVariableAction = monVar => {\n    return new Promise(async (res, rej) => {\n      if (!monVar.idMonitoredVariable) {\n        rej('Error');\n        return;\n      }\n\n      try {\n        console.log(\"id:\", monVar.idMonitoredVariable);\n        const response = await deleteMonitoredVariable(monVar.idMonitoredVariable);\n        res(response);\n      } catch (err) {\n        rej(err);\n      }\n    });\n  }; // Variáveis e funções que permitem o redireccionamento para a página DigitalTwinMonitoring\n\n\n  const [redirectTo, setRedirectTo] = useState(\"\");\n\n  const redirectToList = () => setRedirectTo(routes.digitalTwinMonitoring); // Recuperar da base de dados as funcionalidades (Functionality)\n\n\n  const {\n    data: functionalities,\n    dispatchAction: dispatchFunctionalityActions\n  } = useStore('functionalities');\n\n  const updateFunctionalities = funcs => dispatchFunctionalityActions(FunctionalityActions.updateFunctionalities(funcs));\n\n  useMountEffect(() => {\n    setTimeout(() => {\n      setFetching(true);\n      getOrDownloadFunctionalities(functionalities).then(result => updateFunctionalities(result)).catch(e => setError(e.msg)).finally(() => setFetching(false));\n    }, 0);\n  }); // Recuperar dados da funcionalidade\n\n  let [functionalityName, setFunctionalityName] = useState([]);\n  let i = 0;\n\n  while (i < functionalities.length) {\n    if (functionalities[i].funcId == id) {\n      functionalityName = functionalities[i].funcName;\n    }\n\n    i++;\n  } // Estabelecer a ligação com os sockets\n\n\n  const socket = new SocketConnection(SocketConnection.getSmartComponentsNamespace());\n  const [smartComponents, setSmartComponents] = useState([]);\n  const [monitoredVariableInstances, setMonitoredVariableInstances] = useState([]);\n  const classes = useSmartComponentStyles();\n\n  const updateMonitoredVariablesInstances = monVars => setMonitoredVariableInstances(getMonitoredVariablesCurrentValue(monVars));\n\n  const getMonitoredVariablesCurrentValue = monVars => {\n    return monVars.map(monVar => addCurrentValueData(monVar));\n  };\n\n  const addCurrentValueData = monVar => {\n    return { ...monVar,\n      currentValueData: {\n        key: monVar.currentValue,\n        data: monVar.currentValue\n      }\n    };\n  };\n\n  const onInitialData = data => {\n    setFetching(false);\n  };\n\n  const onDisconnect = () => {\n    setError(\"Server error\");\n    setFetching(false);\n    setSmartComponents([]);\n  };\n\n  useMountEffect(() => {\n    setTimeout(() => {\n      socket.connect(() => {}, onDisconnect, onInitialData);\n      socket.addListener(SOCKET_EVENT.EDITED_MVI_EVENT, updateSmartComponentMonitoredVariableInstances);\n    }, 0);\n  }, () => socket === null || socket === void 0 ? void 0 : socket.disconnect());\n  const [smartComponentMvInstances, setSmartComponentMvInstances] = useState([]);\n\n  const updateSmartComponentMonitoredVariableInstances = instances => {\n    setSmartComponentMvInstances(instances);\n  };\n\n  if (redirectTo !== \"\") return /*#__PURE__*/_jsxDEV(Redirect, {\n    to: redirectTo,\n    push: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 254,\n    columnNumber: 12\n  }, this);\n  return /*#__PURE__*/_jsxDEV(Navigator, {\n    title: \"Digital Twin monitoring\",\n    children: /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n            title: functionalityName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              children: /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                children: /*#__PURE__*/_jsxDEV(JPTable, {\n                  sortedkey: \"idMonitoredVariable\",\n                  data: getDataMonitoredVariable(),\n                  updateData: updateMonitoredVariablesInstances,\n                  indexes: indexes_variable,\n                  tName: \"MonitoredVariable\",\n                  extra: {\n                    delete: {\n                      action: deleteMonitoredVariableAction,\n                      labelKey: 'monitoredVariableName',\n                      onSuccessDelete: () => {}\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 266,\n                  columnNumber: 33\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 265,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 264,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              children: /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                children: /*#__PURE__*/_jsxDEV(JPTable, {\n                  sortedkey: \"idMonitoredEvent\",\n                  data: monitoredVariableInstances,\n                  updateData: updateMonitoredEvents,\n                  indexes: indexes_event,\n                  tName: \"MonitoredEvent\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 286,\n                  columnNumber: 33\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 285,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 284,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 283,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FunctionalityForm, {\n        cancel: {\n          action: redirectToList,\n          label: 'Cancel'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 257,\n    columnNumber: 5\n  }, this);\n};\n\n_s(FunctionalityDetails, \"CKzweMfUaEUH3gweo/lxOHRkCfA=\", false, function () {\n  return [useRouteMatch, useStore, useMountEffect, useStore, useMountEffect, useStore, useMountEffect, useSmartComponentStyles, useMountEffect];\n});\n\n_c = FunctionalityDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"FunctionalityDetails\");","map":{"version":3,"sources":["/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/DigitalTwin/FunctionalityDetails.tsx"],"names":["Card","CardContent","CardHeader","Divider","Grid","React","useState","Redirect","useRouteMatch","routes","FunctionalityActions","MonitoredEventActions","MonitoredVariableActions","getOrDownloadFunctionalities","getOrDownloadMonitoredEvents","getOrDownloadMonitoredVariables","useMountEffect","Navigator","useStore","JPTable","FunctionalityForm","SocketConnection","SOCKET_EVENT","useSmartComponentStyles","deleteMonitoredVariable","FunctionalityDetails","matchParams","id","params","fetching","setFetching","error","setError","data","monitoredVariables","dispatchAction","dispatchMonitoredVariableActions","updateMonitoredVariables","monVar","updateMonitoredVariable","selectedMonitoredVariable","setSelectedMonitoredVariable","initializeMonitoredVariable","monVars","monitoredVariable","filter","funcIdAssociated","parseInt","then","result","catch","e","msg","finally","monitoredEvents","dispatchMonitoredEventActions","updateMonitoredEvents","monEv","updateMonitoredEvent","selectedMonitoredEvent","setSelectedMonitoredEvent","initializeMonitoredEvent","monEvs","monitoredEvent","indexes_variable","label","key","getDataMonitoredVariable","map","indexes_event","getDataMonitoredEvent","deleteMonitoredVariableAction","Promise","res","rej","idMonitoredVariable","console","log","response","err","redirectTo","setRedirectTo","redirectToList","digitalTwinMonitoring","functionalities","dispatchFunctionalityActions","updateFunctionalities","funcs","setTimeout","functionalityName","setFunctionalityName","i","length","funcId","funcName","socket","getSmartComponentsNamespace","smartComponents","setSmartComponents","monitoredVariableInstances","setMonitoredVariableInstances","classes","updateMonitoredVariablesInstances","getMonitoredVariablesCurrentValue","addCurrentValueData","currentValueData","currentValue","onInitialData","onDisconnect","connect","addListener","EDITED_MVI_EVENT","updateSmartComponentMonitoredVariableInstances","disconnect","smartComponentMvInstances","setSmartComponentMvInstances","instances","delete","action","labelKey","onSuccessDelete"],"mappings":"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","sourcesContent":["import { Box, Button, Card, CardContent, CardHeader, Divider, Grid } from '@material-ui/core'\r\nimport React, { useState } from 'react'\r\nimport { match, Redirect, useRouteMatch } from 'react-router-dom'\r\nimport { routes } from '../../App'\r\nimport { Functionality, MonitoredEvent, MonitoredVariable, MonitoredVariableInstance, SmartComponent } from '../../model'\r\nimport { FunctionalityActions, MonitoredEventActions, MonitoredVariableActions } from '../../redux/actions'\r\nimport { RequestResponseState } from '../../services/api/api'\r\nimport { getOrDownloadFunctionalities, getOrDownloadMonitoredEvents, getOrDownloadMonitoredVariables } from '../../utils/digitalTwins'\r\nimport { useMountEffect } from '../../utils/main'\r\nimport { Navigator } from '../templates/Navigator/Navigator'\r\nimport { useStore } from '../templates/Store/Store'\r\nimport { JPTable } from '../templates/Table/JPTable'\r\nimport { FunctionalityForm } from './FunctionalityForm'\r\nimport { SocketConnection, SOCKET_EVENT } from '../../services/socket/socket'\r\nimport { Visibility } from '@material-ui/icons'\r\nimport { useSmartComponentStyles } from '../SmartComponents/style'\r\nimport { deleteMonitoredVariable } from '../../services/api/digital-twin'\r\n\r\n//Esta página pretende dispor informação mais detalhada da funcionalidade correspondente disponível na página \"DigitalTwinMonitoring\"\r\n\r\ninterface SmartComponentWithDataState extends SmartComponent {\r\n    state: {\r\n        key:string | undefined\r\n        data: React.ReactElement\r\n    },\r\n    detail: {\r\n        key: 'detail'\r\n        data: React.ReactElement\r\n    }\r\n}\r\n\r\ninterface MonitoredVariableWithDataState extends MonitoredVariableInstance {\r\n    currentValueData: {\r\n        key: number | undefined\r\n        data: number\r\n    }\r\n}\r\n\r\n\r\nexport const FunctionalityDetails = () => {\r\n\r\n    //Recupera o id da funcionalidade seleccionada anteriormente na página Digital Twin Monitoring\r\n    const matchParams : match = useRouteMatch()\r\n    const id = (matchParams.params as any).id\r\n\r\n    // Recuperar da base de dados as variáveis que estão a ser monitorizadas (MonitoredVariable)\r\n    const [fetching,setFetching] = useState(true)\r\n    const [error,setError] = useState('')\r\n    const {data: monitoredVariables, dispatchAction: dispatchMonitoredVariableActions} = useStore('monitoredVariables')\r\n    const updateMonitoredVariables = (monVar: MonitoredVariable[]) => dispatchMonitoredVariableActions(MonitoredVariableActions.updateMonitoredVariable(monVar))\r\n\r\n    const [selectedMonitoredVariable, setSelectedMonitoredVariable] : [MonitoredVariable[], Function] = useState([])\r\n\r\n    const initializeMonitoredVariable = (monVars: MonitoredVariable[]) => {\r\n        \r\n        let monitoredVariable : MonitoredVariable[] = monVars.filter((monVar) => monVar.funcIdAssociated === parseInt(id))\r\n        \r\n        setSelectedMonitoredVariable(monitoredVariable)\r\n\r\n    }\r\n\r\n    useMountEffect(() => {\r\n\r\n        setFetching(true)\r\n        getOrDownloadMonitoredVariables(monitoredVariables)\r\n            .then((result: MonitoredVariable[]) => {\r\n                updateMonitoredVariables(result)\r\n                initializeMonitoredVariable(result)\r\n            })\r\n            .catch((e:RequestResponseState) => {\r\n                setError(e.msg)\r\n            })\r\n            .finally(() => setFetching(false))\r\n\r\n    })\r\n\r\n    // Recuperar da base de dados os eventos que estão a ser monitorizados (MonitoredEvent)\r\n    const {data: monitoredEvents, dispatchAction: dispatchMonitoredEventActions} = useStore('monitoredEvents')\r\n    const updateMonitoredEvents = (monEv: MonitoredEvent[]) => dispatchMonitoredEventActions(MonitoredEventActions.updateMonitoredEvent(monEv))\r\n\r\n    const [selectedMonitoredEvent, setSelectedMonitoredEvent] : [MonitoredEvent[], Function] = useState([])\r\n    \r\n    const initializeMonitoredEvent = (monEvs: MonitoredEvent[]) => {\r\n            \r\n        let monitoredEvent : MonitoredEvent[] = monEvs.filter((monEv) => monEv.funcIdAssociated === parseInt(id))\r\n            \r\n        setSelectedMonitoredEvent(monitoredEvent)\r\n    \r\n    }\r\n    \r\n    useMountEffect(() => {\r\n    \r\n        setFetching(true)\r\n        getOrDownloadMonitoredEvents(monitoredEvents)\r\n            .then((result: MonitoredEvent[]) => {\r\n                updateMonitoredEvents(result)\r\n                initializeMonitoredEvent(result)\r\n            })\r\n            .catch((e:RequestResponseState) => {\r\n                setError(e.msg)\r\n            })\r\n            .finally(() => setFetching(false))\r\n    \r\n    })\r\n    \r\n    // Cabeçalhos da tabela Variable + Funções Necessárias\r\n    const indexes_variable = [\r\n        {label: 'Variable', key: 'monitoredVariableName'},\r\n        {label: 'Function Block', key: 'fbAssociated'},\r\n        {label: 'Smart Component', key: 'scAssociated'},\r\n        {label: 'Current Value', key: 'state'},\r\n        //{label: 'Graph', key: 'dtName'},\r\n        //{label: 'Remove', key: 'dtName'},\r\n    ]\r\n\r\n    const getDataMonitoredVariable = () =>  selectedMonitoredVariable.map((monitoredVariable: MonitoredVariable) => {    \r\n        \r\n        return {\r\n            ...monitoredVariable\r\n        }\r\n\r\n    })\r\n\r\n    // Cabeçalhos da tabela Event + Funções Necessárias\r\n    const indexes_event = [\r\n        {label: 'Event', key: 'monitoredEventName'},\r\n        {label: 'Function Block', key: 'fbAssociated'},\r\n        {label: 'Smart Component', key: 'scAssociated'},\r\n        {label: 'Trigger', key: 'dtName'},\r\n        {label: 'Current Value', key: 'sc.scState'},\r\n        //{label: 'Graph', key: 'dtName'},\r\n        //{label: 'Remove', key: 'dtName'},\r\n    ]\r\n\r\n    const getDataMonitoredEvent = () =>  selectedMonitoredEvent.map((monitoredEvent: MonitoredEvent) => {    \r\n        \r\n        return {\r\n            ...monitoredEvent\r\n        }\r\n\r\n    })\r\n\r\n    const deleteMonitoredVariableAction = (monVar: MonitoredVariable) : Promise<any> => {\r\n\r\n        return new Promise(async(res:Function,rej:Function) => {\r\n    \r\n            if(!monVar.idMonitoredVariable) {\r\n                rej('Error')\r\n                return\r\n            }\r\n            \r\n            try {\r\n                console.log(\"id:\",monVar.idMonitoredVariable)\r\n                const response : RequestResponseState = await deleteMonitoredVariable(monVar.idMonitoredVariable)\r\n                res(response)\r\n              }\r\n    \r\n            catch(err) {\r\n                rej(err)\r\n            }\r\n        })\r\n    }\r\n\r\n    // Variáveis e funções que permitem o redireccionamento para a página DigitalTwinMonitoring\r\n    const [redirectTo, setRedirectTo] : [string, Function] = useState(\"\")\r\n\r\n    const redirectToList = () => setRedirectTo(routes.digitalTwinMonitoring)\r\n\r\n    // Recuperar da base de dados as funcionalidades (Functionality)\r\n    const {data:functionalities, dispatchAction:dispatchFunctionalityActions} = useStore('functionalities')\r\n    const updateFunctionalities = (funcs: Functionality[]) => dispatchFunctionalityActions(FunctionalityActions.updateFunctionalities(funcs))\r\n\r\n    useMountEffect(() => {\r\n\r\n    setTimeout(() => {\r\n\r\n    setFetching(true)\r\n    getOrDownloadFunctionalities(functionalities)\r\n        .then((result: Functionality[]) => updateFunctionalities(result))\r\n        .catch((e:RequestResponseState) => setError(e.msg))\r\n        .finally(() => setFetching(false))\r\n    }, 0)\r\n    })\r\n\r\n    // Recuperar dados da funcionalidade\r\n    let [functionalityName, setFunctionalityName] : [Functionality[], Function] = useState([])\r\n\r\n    let i = 0;\r\n    while(i < functionalities.length){\r\n\r\n        if(functionalities[i].funcId == id) {\r\n          functionalityName = functionalities[i].funcName\r\n        }\r\n        i++\r\n    }\r\n\r\n    // Estabelecer a ligação com os sockets\r\n    const socket : SocketConnection = new SocketConnection(SocketConnection.getSmartComponentsNamespace())\r\n    \r\n    const [smartComponents,setSmartComponents] : [SmartComponentWithDataState[],Function] = useState([])\r\n    const [monitoredVariableInstances,setMonitoredVariableInstances] : [MonitoredVariableWithDataState[],Function] = useState([])\r\n\r\n    const classes = useSmartComponentStyles()\r\n\r\n    const updateMonitoredVariablesInstances = (monVars:MonitoredVariableInstance[]) => setMonitoredVariableInstances(getMonitoredVariablesCurrentValue(monVars))\r\n\r\n    const getMonitoredVariablesCurrentValue = (monVars: MonitoredVariableInstance[]) : MonitoredVariableWithDataState[] => {\r\n\r\n        return monVars.map((monVar:MonitoredVariableInstance) => addCurrentValueData(monVar))\r\n\r\n    }\r\n\r\n    const addCurrentValueData = (monVar: MonitoredVariableInstance) : MonitoredVariableWithDataState => {\r\n\r\n        return (\r\n            {\r\n                ...monVar, \r\n                currentValueData: {\r\n                    key: monVar.currentValue,\r\n                    data: monVar.currentValue\r\n                },\r\n            }\r\n        )\r\n    }\r\n\r\n    const onInitialData = (data:any) => {\r\n        setFetching(false)\r\n    } \r\n\r\n    const onDisconnect = () => {\r\n        setError(\"Server error\")\r\n        setFetching(false)\r\n        setSmartComponents([])\r\n    }\r\n\r\n    useMountEffect(() => {\r\n\r\n        setTimeout(() => {\r\n\r\n            socket.connect(() => {}, onDisconnect, onInitialData)\r\n            socket.addListener(SOCKET_EVENT.EDITED_MVI_EVENT, updateSmartComponentMonitoredVariableInstances)\r\n        }, 0)\r\n\r\n    }, () => socket?.disconnect())\r\n\r\n    const [smartComponentMvInstances,setSmartComponentMvInstances] : [MonitoredVariableInstance[],Function] = useState([])\r\n\r\n    const updateSmartComponentMonitoredVariableInstances = (instances: MonitoredVariableInstance[]) => {\r\n        setSmartComponentMvInstances(instances)\r\n\r\n    }\r\n\r\n    if(redirectTo !== \"\") \r\n    return <Redirect to={redirectTo} push={true} />\r\n\r\n    return(\r\n    <Navigator title=\"Digital Twin monitoring\">\r\n    <>\r\n        <Grid item>\r\n            <Card>\r\n                <CardHeader title={functionalityName} />\r\n                <Divider />\r\n                    <CardContent>\r\n                        <Grid item xs={12}>        \r\n                            <Grid item>\r\n                                <JPTable\r\n                                    sortedkey=\"idMonitoredVariable\"\r\n                                    data={getDataMonitoredVariable()} \r\n                                    updateData={updateMonitoredVariablesInstances} \r\n                                    indexes={indexes_variable} \r\n                                    tName='MonitoredVariable'\r\n                                    extra={{\r\n                                        delete: {\r\n                                            action: deleteMonitoredVariableAction,\r\n                                            labelKey: 'monitoredVariableName',\r\n                                            onSuccessDelete: () => {}\r\n                                        }\r\n                                    }} \r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                    </CardContent>\r\n                    <CardContent>\r\n                        <Grid item xs={12}>        \r\n                            <Grid item>\r\n                                <JPTable\r\n                                    sortedkey=\"idMonitoredEvent\"\r\n                                    data={monitoredVariableInstances} \r\n                                    updateData={updateMonitoredEvents} \r\n                                    indexes={indexes_event} \r\n                                    tName='MonitoredEvent'\r\n                                />\r\n                            </Grid>\r\n                            \r\n                        </Grid>\r\n                    </CardContent>\r\n            </Card>\r\n        </Grid>\r\n        <FunctionalityForm\r\n            cancel={{action: redirectToList, label: 'Cancel'}}\r\n        />\r\n    </>\r\n    </Navigator>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}