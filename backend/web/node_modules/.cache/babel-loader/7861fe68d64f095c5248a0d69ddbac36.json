{"ast":null,"code":"import { apiRoutes, RouteMethod, fetchRequest } from './api';\nexport const getDigitalTwins = () => fetchRequest(apiRoutes.getDigitalTwinPath(RouteMethod.get));\nexport const getFunctionalities = () => fetchRequest(apiRoutes.getFunctionalityPath(RouteMethod.get));\nexport const getMonitoredVariables = funcId => fetchRequest(apiRoutes.getMonitoredVariablePath(RouteMethod.get), false, {\n  funcId\n});\nexport const getMonitoredEvents = () => fetchRequest(apiRoutes.getMonitoredEventPath(RouteMethod.get));\nexport const getAssociatedSmartComponents = () => fetchRequest(apiRoutes.getAssociatedSmartComponentPath(RouteMethod.get));\nexport const createDigitalTwin = digitalTwinName => fetchRequest(apiRoutes.getDigitalTwinPath(RouteMethod.post), false, {\n  digitalTwinName\n});\nexport const createFunctionality = functionality => fetchRequest(apiRoutes.getFunctionalityPath(RouteMethod.post), false, functionality);\nexport const createMonitoredVariable = monitoredVariable => fetchRequest(apiRoutes.getMonitoredVariablePath(RouteMethod.post), false, monitoredVariable);\nexport const createMonitoredEvent = monitoredEvent => fetchRequest(apiRoutes.getMonitoredEventPath(RouteMethod.post), false, monitoredEvent);\nexport const createAssociatedSmartComponents = associatedSmartComponent => fetchRequest(apiRoutes.getAssociatedSmartComponentPath(RouteMethod.post), false, associatedSmartComponent);\nexport const deleteDigitalTwin = id => fetchRequest(apiRoutes.getDigitalTwinPath(RouteMethod.delete, id));\nexport const deleteFunctionality = id => fetchRequest(apiRoutes.getFunctionalityPath(RouteMethod.delete, id));\nexport const updateDigitalTwin = (id, digitalTwinName) => fetchRequest(apiRoutes.getDigitalTwinPath(RouteMethod.put, id), false, {\n  digitalTwinName\n});\nexport const updateFunctionality = functionality => fetchRequest(apiRoutes.getFunctionalityPath(RouteMethod.put, functionality.funcId), false, functionality);\nexport const updateMonitoredVariable = monitoredVariable => fetchRequest(apiRoutes.getFunctionalityPath(RouteMethod.put, monitoredVariable.idMonitoredVariable), false, monitoredVariable);","map":{"version":3,"sources":["/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/services/api/digital-twin.ts"],"names":["apiRoutes","RouteMethod","fetchRequest","getDigitalTwins","getDigitalTwinPath","get","getFunctionalities","getFunctionalityPath","getMonitoredVariables","funcId","getMonitoredVariablePath","getMonitoredEvents","getMonitoredEventPath","getAssociatedSmartComponents","getAssociatedSmartComponentPath","createDigitalTwin","digitalTwinName","post","createFunctionality","functionality","createMonitoredVariable","monitoredVariable","createMonitoredEvent","monitoredEvent","createAssociatedSmartComponents","associatedSmartComponent","deleteDigitalTwin","id","delete","deleteFunctionality","updateDigitalTwin","put","updateFunctionality","updateMonitoredVariable","idMonitoredVariable"],"mappings":"AACA,SAASA,SAAT,EAA0CC,WAA1C,EAAuDC,YAAvD,QAA2E,OAA3E;AAGA,OAAO,MAAMC,eAAe,GAAG,MAA+BD,YAAY,CAACF,SAAS,CAACI,kBAAV,CAA6BH,WAAW,CAACI,GAAzC,CAAD,CAAnE;AAEP,OAAO,MAAMC,kBAAkB,GAAG,MAAiCJ,YAAY,CAACF,SAAS,CAACO,oBAAV,CAA+BN,WAAW,CAACI,GAA3C,CAAD,CAAxE;AAEP,OAAO,MAAMG,qBAAqB,GAAIC,MAAD,IAAmDP,YAAY,CAACF,SAAS,CAACU,wBAAV,CAAmCT,WAAW,CAACI,GAA/C,CAAD,EAAqD,KAArD,EAA2D;AAACI,EAAAA;AAAD,CAA3D,CAA7F;AAEP,OAAO,MAAME,kBAAkB,GAAG,MAAkCT,YAAY,CAACF,SAAS,CAACY,qBAAV,CAAgCX,WAAW,CAACI,GAA5C,CAAD,CAAzE;AAEP,OAAO,MAAMQ,4BAA4B,GAAG,MAA4CX,YAAY,CAACF,SAAS,CAACc,+BAAV,CAA0Cb,WAAW,CAACI,GAAtD,CAAD,CAA7F;AAEP,OAAO,MAAMU,iBAAiB,GAAIC,eAAD,IAA6Dd,YAAY,CAACF,SAAS,CAACI,kBAAV,CAA6BH,WAAW,CAACgB,IAAzC,CAAD,EAAgD,KAAhD,EAAsD;AAACD,EAAAA;AAAD,CAAtD,CAAnG;AAEP,OAAO,MAAME,mBAAmB,GAAIC,aAAD,IAAkEjB,YAAY,CAACF,SAAS,CAACO,oBAAV,CAA+BN,WAAW,CAACgB,IAA3C,CAAD,EAAkD,KAAlD,EAAyDE,aAAzD,CAA1G;AAEP,OAAO,MAAMC,uBAAuB,GAAIC,iBAAD,IAA0EnB,YAAY,CAACF,SAAS,CAACU,wBAAV,CAAmCT,WAAW,CAACgB,IAA/C,CAAD,EAAsD,KAAtD,EAA6DI,iBAA7D,CAAtH;AAEP,OAAO,MAAMC,oBAAoB,GAAIC,cAAD,IAAoErB,YAAY,CAACF,SAAS,CAACY,qBAAV,CAAgCX,WAAW,CAACgB,IAA5C,CAAD,EAAmD,KAAnD,EAA0DM,cAA1D,CAA7G;AAEP,OAAO,MAAMC,+BAA+B,GAAGC,wBAAD,IAAwFvB,YAAY,CAACF,SAAS,CAACc,+BAAV,CAA0Cb,WAAW,CAACgB,IAAtD,CAAD,EAA6D,KAA7D,EAAoEQ,wBAApE,CAA3I;AAEP,OAAO,MAAMC,iBAAiB,GAAIC,EAAD,IAA+CzB,YAAY,CAACF,SAAS,CAACI,kBAAV,CAA6BH,WAAW,CAAC2B,MAAzC,EAAgDD,EAAhD,CAAD,CAArF;AAEP,OAAO,MAAME,mBAAmB,GAAGF,EAAD,IAA+CzB,YAAY,CAACF,SAAS,CAACO,oBAAV,CAA+BN,WAAW,CAAC2B,MAA3C,EAAkDD,EAAlD,CAAD,CAAtF;AAEP,OAAO,MAAMG,iBAAiB,GAAG,CAACH,EAAD,EAAaX,eAAb,KAAyEd,YAAY,CAACF,SAAS,CAACI,kBAAV,CAA6BH,WAAW,CAAC8B,GAAzC,EAA6CJ,EAA7C,CAAD,EAAkD,KAAlD,EAAwD;AAACX,EAAAA;AAAD,CAAxD,CAA/G;AAEP,OAAO,MAAMgB,mBAAmB,GAAIb,aAAD,IAAkEjB,YAAY,CAACF,SAAS,CAACO,oBAAV,CAA+BN,WAAW,CAAC8B,GAA3C,EAA+CZ,aAAa,CAACV,MAA7D,CAAD,EAAsE,KAAtE,EAA4EU,aAA5E,CAA1G;AAEP,OAAO,MAAMc,uBAAuB,GAAIZ,iBAAD,IAA0EnB,YAAY,CAACF,SAAS,CAACO,oBAAV,CAA+BN,WAAW,CAAC8B,GAA3C,EAA+CV,iBAAiB,CAACa,mBAAjE,CAAD,EAAuF,KAAvF,EAA6Fb,iBAA7F,CAAtH","sourcesContent":["import { DigitalTwin, Functionality, MonitoredEvent, MonitoredVariable} from '../../model'\r\nimport { apiRoutes, RequestResponseState, RouteMethod, fetchRequest } from './api'\r\nimport { AssociatedSmartComponent } from \"../../model/model/AssociatedSmartComponent\";\r\n\r\nexport const getDigitalTwins = () : Promise<DigitalTwin[]> => fetchRequest(apiRoutes.getDigitalTwinPath(RouteMethod.get))  \r\n\r\nexport const getFunctionalities = () : Promise<Functionality[]> => fetchRequest(apiRoutes.getFunctionalityPath(RouteMethod.get))  \r\n\r\nexport const getMonitoredVariables = (funcId: number) : Promise<MonitoredVariable[]> => fetchRequest(apiRoutes.getMonitoredVariablePath(RouteMethod.get),false,{funcId})\r\n\r\nexport const getMonitoredEvents = () : Promise<MonitoredEvent[]> => fetchRequest(apiRoutes.getMonitoredEventPath(RouteMethod.get))  \r\n\r\nexport const getAssociatedSmartComponents = () : Promise<AssociatedSmartComponent[]> => fetchRequest(apiRoutes.getAssociatedSmartComponentPath(RouteMethod.get))  \r\n\r\nexport const createDigitalTwin = (digitalTwinName: string) : Promise<RequestResponseState> => fetchRequest(apiRoutes.getDigitalTwinPath(RouteMethod.post),false,{digitalTwinName})            \r\n\r\nexport const createFunctionality = (functionality: Functionality) : Promise<RequestResponseState> => fetchRequest(apiRoutes.getFunctionalityPath(RouteMethod.post),false, functionality)     \r\n\r\nexport const createMonitoredVariable = (monitoredVariable: MonitoredVariable) : Promise<RequestResponseState> => fetchRequest(apiRoutes.getMonitoredVariablePath(RouteMethod.post),false, monitoredVariable)   \r\n\r\nexport const createMonitoredEvent = (monitoredEvent: MonitoredEvent) : Promise<RequestResponseState> => fetchRequest(apiRoutes.getMonitoredEventPath(RouteMethod.post),false, monitoredEvent)               \r\n\r\nexport const createAssociatedSmartComponents= (associatedSmartComponent: AssociatedSmartComponent) : Promise<RequestResponseState> => fetchRequest(apiRoutes.getAssociatedSmartComponentPath(RouteMethod.post),false, associatedSmartComponent)            \r\n\r\nexport const deleteDigitalTwin = (id:number) : Promise<RequestResponseState> => fetchRequest(apiRoutes.getDigitalTwinPath(RouteMethod.delete,id))            \r\n\r\nexport const deleteFunctionality= (id:number) : Promise<RequestResponseState> => fetchRequest(apiRoutes.getFunctionalityPath(RouteMethod.delete,id))   \r\n\r\nexport const updateDigitalTwin = (id: number, digitalTwinName: string) : Promise<RequestResponseState> => fetchRequest(apiRoutes.getDigitalTwinPath(RouteMethod.put,id),false,{digitalTwinName})            \r\n\r\nexport const updateFunctionality = (functionality: Functionality) : Promise<RequestResponseState> => fetchRequest(apiRoutes.getFunctionalityPath(RouteMethod.put,functionality.funcId),false,functionality)     \r\n\r\nexport const updateMonitoredVariable = (monitoredVariable: MonitoredVariable) : Promise<RequestResponseState> => fetchRequest(apiRoutes.getFunctionalityPath(RouteMethod.put,monitoredVariable.idMonitoredVariable),false,monitoredVariable)     "]},"metadata":{},"sourceType":"module"}