{"ast":null,"code":"import { apiRoutes, RouteMethod, fetchRequest } from './api';\nexport const getDigitalTwins = () => fetchRequest(apiRoutes.getDigitalTwinPath(RouteMethod.get));\nexport const getFunctionalities = () => fetchRequest(apiRoutes.getFunctionalityPath(RouteMethod.get));\nexport const createDigitalTwin = digitalTwinName => fetchRequest(apiRoutes.getDigitalTwinPath(RouteMethod.post), false, {\n  digitalTwinName\n});\nexport const createFunctionality = functionality => fetchRequest(apiRoutes.getFunctionalityPath(RouteMethod.post), false, functionality);\nexport const deleteDigitalTwin = id => fetchRequest(apiRoutes.getDigitalTwinPath(RouteMethod.delete, id));\nexport const deleteFunctionality = id => fetchRequest(apiRoutes.getFunctionalityPath(RouteMethod.delete, id));\nexport const updateDigitalTwin = (id, digitalTwinName) => fetchRequest(apiRoutes.getDigitalTwinPath(RouteMethod.put, id), false, {\n  digitalTwinName\n});\nexport const updateFunctionality = functionality => fetchRequest(apiRoutes.getFunctionalityPath(RouteMethod.put, functionality.funcId), false, functionality);\nexport const getAssociatedSmartComponents = () => fetchRequest(apiRoutes.getAssociatedSmartComponentPath(RouteMethod.get));\nexport const createAssociatedSmartComponents = associatedSmartComponent => fetchRequest(apiRoutes.getAssociatedSmartComponentPath(RouteMethod.post), false, {\n  assSc,\n  scDtId\n});","map":{"version":3,"sources":["/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/services/api/digital-twin.ts"],"names":["apiRoutes","RouteMethod","fetchRequest","getDigitalTwins","getDigitalTwinPath","get","getFunctionalities","getFunctionalityPath","createDigitalTwin","digitalTwinName","post","createFunctionality","functionality","deleteDigitalTwin","id","delete","deleteFunctionality","updateDigitalTwin","put","updateFunctionality","funcId","getAssociatedSmartComponents","getAssociatedSmartComponentPath","createAssociatedSmartComponents","associatedSmartComponent","assSc","scDtId"],"mappings":"AACA,SAASA,SAAT,EAA0CC,WAA1C,EAAuDC,YAAvD,QAA2E,OAA3E;AAGA,OAAO,MAAMC,eAAe,GAAG,MAA+BD,YAAY,CAACF,SAAS,CAACI,kBAAV,CAA6BH,WAAW,CAACI,GAAzC,CAAD,CAAnE;AAEP,OAAO,MAAMC,kBAAkB,GAAG,MAAiCJ,YAAY,CAACF,SAAS,CAACO,oBAAV,CAA+BN,WAAW,CAACI,GAA3C,CAAD,CAAxE;AAEP,OAAO,MAAMG,iBAAiB,GAAGC,eAAD,IAA6DP,YAAY,CAACF,SAAS,CAACI,kBAAV,CAA6BH,WAAW,CAACS,IAAzC,CAAD,EAAgD,KAAhD,EAAsD;AAACD,EAAAA;AAAD,CAAtD,CAAlG;AAEP,OAAO,MAAME,mBAAmB,GAAIC,aAAD,IAAkEV,YAAY,CAACF,SAAS,CAACO,oBAAV,CAA+BN,WAAW,CAACS,IAA3C,CAAD,EAAkD,KAAlD,EAAyDE,aAAzD,CAA1G;AAEP,OAAO,MAAMC,iBAAiB,GAAIC,EAAD,IAA+CZ,YAAY,CAACF,SAAS,CAACI,kBAAV,CAA6BH,WAAW,CAACc,MAAzC,EAAgDD,EAAhD,CAAD,CAArF;AAEP,OAAO,MAAME,mBAAmB,GAAGF,EAAD,IAA+CZ,YAAY,CAACF,SAAS,CAACO,oBAAV,CAA+BN,WAAW,CAACc,MAA3C,EAAkDD,EAAlD,CAAD,CAAtF;AAEP,OAAO,MAAMG,iBAAiB,GAAG,CAACH,EAAD,EAAaL,eAAb,KAAyEP,YAAY,CAACF,SAAS,CAACI,kBAAV,CAA6BH,WAAW,CAACiB,GAAzC,EAA6CJ,EAA7C,CAAD,EAAkD,KAAlD,EAAwD;AAACL,EAAAA;AAAD,CAAxD,CAA/G;AAEP,OAAO,MAAMU,mBAAmB,GAAIP,aAAD,IAAkEV,YAAY,CAACF,SAAS,CAACO,oBAAV,CAA+BN,WAAW,CAACiB,GAA3C,EAA+CN,aAAa,CAACQ,MAA7D,CAAD,EAAsE,KAAtE,EAA4ER,aAA5E,CAA1G;AAEP,OAAO,MAAMS,4BAA4B,GAAG,MAA4CnB,YAAY,CAACF,SAAS,CAACsB,+BAAV,CAA0CrB,WAAW,CAACI,GAAtD,CAAD,CAA7F;AAEP,OAAO,MAAMkB,+BAA+B,GAAGC,wBAAD,IAA0FtB,YAAY,CAACF,SAAS,CAACsB,+BAAV,CAA0CrB,WAAW,CAACS,IAAtD,CAAD,EAA6D,KAA7D,EAAoE;AAACe,EAAAA,KAAD;AAAQC,EAAAA;AAAR,CAApE,CAA7I","sourcesContent":["import { DigitalTwin, Functionality} from '../../model'\r\nimport { apiRoutes, RequestResponseState, RouteMethod, fetchRequest } from './api'\r\nimport { AssociatedSmartComponent } from \"../../model/model/AssociatedSmartComponent\";\r\n\r\nexport const getDigitalTwins = () : Promise<DigitalTwin[]> => fetchRequest(apiRoutes.getDigitalTwinPath(RouteMethod.get))  \r\n\r\nexport const getFunctionalities = () : Promise<Functionality[]> => fetchRequest(apiRoutes.getFunctionalityPath(RouteMethod.get))  \r\n\r\nexport const createDigitalTwin= (digitalTwinName: string) : Promise<RequestResponseState> => fetchRequest(apiRoutes.getDigitalTwinPath(RouteMethod.post),false,{digitalTwinName})            \r\n\r\nexport const createFunctionality = (functionality: Functionality) : Promise<RequestResponseState> => fetchRequest(apiRoutes.getFunctionalityPath(RouteMethod.post),false, functionality)            \r\n\r\nexport const deleteDigitalTwin = (id:number) : Promise<RequestResponseState> => fetchRequest(apiRoutes.getDigitalTwinPath(RouteMethod.delete,id))            \r\n\r\nexport const deleteFunctionality= (id:number) : Promise<RequestResponseState> => fetchRequest(apiRoutes.getFunctionalityPath(RouteMethod.delete,id))   \r\n\r\nexport const updateDigitalTwin = (id: number, digitalTwinName: string) : Promise<RequestResponseState> => fetchRequest(apiRoutes.getDigitalTwinPath(RouteMethod.put,id),false,{digitalTwinName})            \r\n\r\nexport const updateFunctionality = (functionality: Functionality) : Promise<RequestResponseState> => fetchRequest(apiRoutes.getFunctionalityPath(RouteMethod.put,functionality.funcId),false,functionality)     \r\n\r\nexport const getAssociatedSmartComponents = () : Promise<AssociatedSmartComponent[]> => fetchRequest(apiRoutes.getAssociatedSmartComponentPath(RouteMethod.get))  \r\n\r\nexport const createAssociatedSmartComponents= (associatedSmartComponent: AssociatedSmartComponent[]) : Promise<RequestResponseState> => fetchRequest(apiRoutes.getAssociatedSmartComponentPath(RouteMethod.post),false, {assSc, scDtId})            "]},"metadata":{},"sourceType":"module"}