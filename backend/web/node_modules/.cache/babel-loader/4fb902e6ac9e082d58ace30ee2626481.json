{"ast":null,"code":"export let RouteMethod;\n\n(function (RouteMethod) {\n  RouteMethod[\"get\"] = \"get\";\n  RouteMethod[\"post\"] = \"post\";\n  RouteMethod[\"put\"] = \"put\";\n  RouteMethod[\"delete\"] = \"delete\";\n  RouteMethod[\"patch\"] = \"patch\";\n})(RouteMethod || (RouteMethod = {}));\n\nclass API {\n  constructor(host, port) {\n    this.host = void 0;\n    this.port = void 0;\n    this.base = void 0;\n    this.resources = {\n      functionBlocks: 'function-block',\n      functionBlockCategories: 'function-block-category',\n      digitalTwins: 'digital-twin',\n      functionalities: 'functionality',\n      smartComponents: 'smart-component',\n      images: 'images',\n      icons: 'icons',\n      file: 'public',\n      associatedSmartComponents: 'associated-smart-components',\n      monitoredVariables: 'monitored-variable',\n      monitoredEvents: 'monitored-event',\n      monitoredVariableInstances: 'monitored-variable-instance'\n    };\n\n    this.getBase = () => this.base;\n\n    this.getImage = (code, resource) => this.getFile(code, this.resources.images, resource);\n\n    this.getIcon = (code, resource) => this.getFile(code, this.resources.icons, resource);\n\n    this.getFile = (code, type, resource) => ({\n      path: `${this.base}${this.resources.file}/${type}/${resource}/${code}.jpg`,\n      method: RouteMethod.get\n    });\n\n    this.getFunctionBlockPath = (method, id) => ({\n      path: `${this.base}${this.resources.functionBlocks}/${id ? id : ''}`,\n      method: method\n    });\n\n    this.getFunctionBlockCategoryPath = (method, id) => ({\n      path: `${this.base}${this.resources.functionBlockCategories}/${id ? id : ''}`,\n      method: method\n    });\n\n    this.getDigitalTwinPath = (method, id) => ({\n      path: `${this.base}${this.resources.digitalTwins}/${id ? id : ''}`,\n      method: method\n    });\n\n    this.getFunctionalityPath = (method, id) => ({\n      path: `${this.base}${this.resources.functionalities}/${id ? id : ''}`,\n      method: method\n    });\n\n    this.getSmartObjectPath = (method, id) => ({\n      path: `${this.base}${this.resources.smartComponents}/${id ? id : ''}`,\n      method: method\n    });\n\n    this.getMonitoredVariableInstancePath = (method, id) => ({\n      path: `${this.base}${this.resources.monitoredVariableInstances}/${id ? id : ''}`,\n      method: method\n    });\n\n    this.getAssociatedSmartComponentPath = (method, id) => ({\n      path: `${this.base}${this.resources.associatedSmartComponents}/${id ? id : ''}`,\n      method: method\n    });\n\n    this.getMonitoredVariablePath = (method, id) => ({\n      path: `${this.base}${this.resources.monitoredVariables}/${id ? id : ''}`,\n      method: method\n    });\n\n    this.getMonitoredEventPath = (method, id) => ({\n      path: `${this.base}${this.resources.monitoredEvents}/${id ? id : ''}`,\n      method: method\n    });\n\n    this.getVariableToMonitorPath = (method, id) => ({\n      path: `${this.base}${this.resources.variablesToMonitor}/${id ? id : ''}`,\n      method: method\n    });\n\n    this.host = host === undefined ? 'localhost' : host;\n    this.port = port === undefined ? 3000 : parseInt(port);\n    this.base = `${this.host}:${this.port}/`;\n  }\n\n}\n/**\n * \n * @param route \n * @param body \n * @param cors \n * @param headers\n * \n * @returns Promise that resolves to a RequestResponseState in case of a post,put or delete and a result in case of get, and rejects to a RequestResponseState\n */\n\n\nexport const fetchRequest = (route, hasData = true, body = undefined, cors = true, headers = {\n  'Content-Type': 'application/json'\n}) => {\n  let options = {};\n  if (cors) options.credentials = 'include';\n\n  if (route.method !== RouteMethod.get) {\n    options.headers = headers;\n    options.body = JSON.stringify(body);\n    options.method = route.method;\n  }\n\n  return new Promise((res, rej) => {\n    fetch(route.path, options).then(result => {\n      if (result.ok) result.json().then(json => hasData ? res(json.result) : res(json.state)).catch(error => rej(unknowErrorState(error)));else {\n        result.json().then(json => rej(json.state)).catch(error => rej(unknowErrorState(error)));\n      }\n    }).catch(error => rej(unknowErrorState(error)));\n  });\n};\n\nconst unknowErrorState = error => ({\n  error: true,\n  msg: error.toString ? error.toString() : 'Unknown error',\n  errorCode: 0,\n  extra: {}\n});\n\nexport const apiRoutes = new API(process.env.REACT_APP_BACKEND_HOST, process.env.REACT_APP_BACKEND_PORT);","map":{"version":3,"sources":["/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/services/api/api.ts"],"names":["RouteMethod","API","constructor","host","port","base","resources","functionBlocks","functionBlockCategories","digitalTwins","functionalities","smartComponents","images","icons","file","associatedSmartComponents","monitoredVariables","monitoredEvents","monitoredVariableInstances","getBase","getImage","code","resource","getFile","getIcon","type","path","method","get","getFunctionBlockPath","id","getFunctionBlockCategoryPath","getDigitalTwinPath","getFunctionalityPath","getSmartObjectPath","getMonitoredVariableInstancePath","getAssociatedSmartComponentPath","getMonitoredVariablePath","getMonitoredEventPath","getVariableToMonitorPath","variablesToMonitor","undefined","parseInt","fetchRequest","route","hasData","body","cors","headers","options","credentials","JSON","stringify","Promise","res","rej","fetch","then","result","ok","json","state","catch","error","unknowErrorState","msg","toString","errorCode","extra","apiRoutes","process","env","REACT_APP_BACKEND_HOST","REACT_APP_BACKEND_PORT"],"mappings":"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","sourcesContent":["export enum RouteMethod {\n    get='get',\n    post='post',\n    put='put',\n    delete='delete',\n    patch='patch'\n}\n\nexport interface Route {\n    path: string\n    method: RouteMethod\n}\n\nclass API {\n\n    private host : string \n    private port : number \n    private base : string\n\n    private resources = {\n        functionBlocks: 'function-block',\n        functionBlockCategories: 'function-block-category',\n        digitalTwins: 'digital-twin',\n        functionalities: 'functionality',\n        smartComponents: 'smart-component',\n        images: 'images',\n        icons: 'icons',\n        file: 'public',\n        associatedSmartComponents: 'associated-smart-components',\n        monitoredVariables: 'monitored-variable',\n        monitoredEvents: 'monitored-event',\n        monitoredVariableInstances: 'monitored-variable-instance'\n    }\n\n    \n    constructor(host: string | undefined, port: string | undefined) {\n        this.host = host === undefined ? 'localhost' : host\n        this.port = port === undefined ? 3000 : parseInt(port)\n        this.base = `${this.host}:${this.port}/`\n    }\n    \n    public getBase = () => this.base\n   \n    public getImage = (code: string, resource: string) : Route => this.getFile(code,this.resources.images,resource)\n    \n    public getIcon = (code: string, resource: string) : Route => this.getFile(code,this.resources.icons,resource)\n\n    public getFile = (code: string, type: string, resource: string) : Route => ({\n        path: `${this.base}${this.resources.file}/${type}/${resource}/${code}.jpg`,\n        method: RouteMethod.get\n    })\n    \n    public getFunctionBlockPath = (method: RouteMethod, id?: number) : Route => ({\n        \n        path: `${this.base}${this.resources.functionBlocks}/${id ? id : ''}`,\n        method: method\n        \n    })\n\n    public getFunctionBlockCategoryPath = (method: RouteMethod, id?: number) : Route => ({\n        \n        path: `${this.base}${this.resources.functionBlockCategories}/${id ? id : ''}`,\n        method: method\n        \n    })\n\n    public getDigitalTwinPath = (method: RouteMethod, id?: number) : Route => ({\n        \n        path: `${this.base}${this.resources.digitalTwins}/${id ? id : ''}`,\n        method: method\n        \n    })\n\n    public getFunctionalityPath = (method: RouteMethod, id?: number) : Route => ({\n        \n        path: `${this.base}${this.resources.functionalities}/${id ? id : ''}`,\n        method: method\n        \n    })\n\n    public getSmartObjectPath = (method: RouteMethod, id?: number) : Route => ({\n        \n        path: `${this.base}${this.resources.smartComponents}/${id ? id : ''}`,\n        method: method \n    })\n\n    public getMonitoredVariableInstancePath = (method: RouteMethod, id?: number) : Route => ({\n        \n        path: `${this.base}${this.resources.monitoredVariableInstances}/${id ? id : ''}`,\n        method: method \n    })\n\n    public getAssociatedSmartComponentPath = (method: RouteMethod, id?: number) : Route => ({\n        \n        path: `${this.base}${this.resources.associatedSmartComponents}/${id ? id : ''}`,\n        method: method \n    })\n\n    public getMonitoredVariablePath = (method: RouteMethod, id?: number) : Route => ({\n        \n        path: `${this.base}${this.resources.monitoredVariables}/${id ? id : ''}`,\n        method: method \n    })\n\n    public getMonitoredEventPath = (method: RouteMethod, id?: number) : Route => ({\n        \n        path: `${this.base}${this.resources.monitoredEvents}/${id ? id : ''}`,\n        method: method \n    })\n\n    public getVariableToMonitorPath = (method: RouteMethod, id?: number) : Route => ({\n        \n        path: `${this.base}${this.resources.variablesToMonitor}/${id ? id : ''}`,\n        method: method \n    })\n}\n\n/**\n * \n * @param route \n * @param body \n * @param cors \n * @param headers\n * \n * @returns Promise that resolves to a RequestResponseState in case of a post,put or delete and a result in case of get, and rejects to a RequestResponseState\n */\n\nexport const fetchRequest = (route:Route, hasData:boolean=true, body: Object | undefined = undefined, cors: boolean = true, headers: any = {'Content-Type':'application/json'}) : Promise<any> => {\n\n    let options : RequestInit = {}\n\n    if(cors)\n        options.credentials = 'include'\n\n    if(route.method !== RouteMethod.get) {\n        options.headers = headers\n        options.body = JSON.stringify(body)\n        options.method = route.method\n    }\n \n    return new Promise((res:Function, rej:Function) => {\n\n        fetch(route.path,options).then(result => {\n\n            if(result.ok)\n                result.json()\n                    .then((json: RequestResponse) => hasData ? res(json.result) : res(json.state))\n                    .catch(error =>  rej(unknowErrorState(error)))\n            else {\n                result.json()\n                    .then((json: RequestResponse) => rej(json.state))\n                    .catch(error => rej(unknowErrorState(error)))\n            }\n                \n        })\n        \n        .catch(error => rej(unknowErrorState(error)))\n\n    })\n\n}\n\n\nconst unknowErrorState = (error:any) : RequestResponseState => ({\n    \n    error: true,\n    msg: error.toString ? error.toString() : 'Unknown error',\n    errorCode: 0,\n    extra: {}\n    \n})\n\nexport interface RequestResponseState {\n    error: boolean\n    msg: string\n    errorCode: number\n    extra: any\n}\n\nexport interface RequestResponse {\n    state:RequestResponseState\n    result: any\n}\n\nexport const apiRoutes = new API(process.env.REACT_APP_BACKEND_HOST, process.env.REACT_APP_BACKEND_PORT)"]},"metadata":{},"sourceType":"module"}