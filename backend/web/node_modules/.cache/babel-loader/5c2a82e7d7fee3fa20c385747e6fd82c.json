{"ast":null,"code":"// const updateOnRemoveSmartComponent = (smartComponents: SmartComponent[], smartComponentToRemove: SmartComponent ) : SmartComponent[] => {\n//   const newSmartComponents : SmartComponent[] = [...smartComponents]\n//   newSmartComponents.forEach((sc: SmartComponent) => {\n//       //sc.scName = sc.scName.filter((smartComponent: SmartComponent) => smartComponent.scName !== smartComponentToRemove.scName)\n//   })\n//   return newSmartComponents\n// }\nexport const FunctionalityForm = props => {//     /**styles */\n  //     const classes = useFunctionBlockStyles()\n  //     /* Buttons */\n  //     const onCancel = props.cancel.action\n  //     const cancelLabel = props.cancel.label\n  //     const confirmLabel = props.confirmDialog.buttonTitle\n  //     /* Confirmation */\n  //     const [confirm, setConfirm] : [boolean, Function] = useState(false)\n  //     const validateFields = () : boolean => {\n  //         const cValidDtName = dtName.trim() !== ''\n  //         if(!cValidDtName) setValidDtName(cValidDtName)\n  //         return cValidDtName \n  //     }\n  //     const confirmButtonAction = () => {\n  //         if(validateFields())\n  //           setConfirm(true)\n  //     }\n  //     const confirmActionStates = {\n  //         start: {\n  //             label: props.confirmDialog.start?.label,\n  //             positiveLabel: props.confirmDialog.start?.positiveLabel,\n  //             negativeLabel: props.confirmDialog.start?.negativeLabel,\n  //             state: ConfirmActionStateLabel.start\n  //         },\n  //         executing: {\n  //           label: '',\n  //           state: ConfirmActionStateLabel.executing,\n  //         },\n  //         success: {\n  //           label: props.confirmDialog.success.label,\n  //           state: ConfirmActionStateLabel.success,\n  //           positiveLabel: props.confirmDialog.success.positiveLabel\n  //         },\n  //         error: {\n  //           label: props.confirmDialog.error.label,\n  //           state: ConfirmActionStateLabel.error,\n  //           positiveLabel: props.confirmDialog.success.positiveLabel\n  //         },\n  //       }\n  //     const confirmActionProps : ConfirmActionProps = {\n  //         title: props.confirmDialog.title,\n  //         states: confirmActionStates,\n  //         currentState: confirmActionStates.executing,\n  //         onCancel: () => setConfirm(false),\n  //         onError: () => setConfirm(false),\n  //         onSuccess: props.confirmDialog.onSuccess,\n  //         action:props.confirmDialog.action,\n  //     }\n  //     //Associar um SmartComponent pelo frontend\n  //     const {data:smartComponents, dispatchAction:dispatchSmartComponentActions} = useStore('smartComponents')\n  //     const updateSmartComponents = (scs: SmartComponent[]) => dispatchSmartComponentActions(SmartComponentActions.updateSmartComponent(scs))\n  //     const {associatedSc, setAssociatedSc} = props.associatedSc\n  //     const onSmartComponentRemoval = useCallback((smartComponentToRemove: SmartComponent) => {\n  //       setAssociatedSc((prevSmartComponents: SmartComponent[]) =>  updateOnRemoveSmartComponent(prevSmartComponents,smartComponentToRemove))\n  //   }, [setAssociatedSc])\n  //     return (\n  //       <Grid className={classes.box} spacing={2} container direction=\"column\" component=\"form\">\n  //         <> {confirm ? <ConfirmAction {...confirmActionProps} /> : null}\n  //           <Grid item container direction=\"row\" justify=\"space-between\" alignItems=\"center\">\n  //             {props.order ?\n  //             <Grid item xs={1}>\n  //                 {props.order}\n  //             </Grid>\n  //             : null\n  //             }\n  //             <Grid className={classes.box} spacing={1} item container direction=\"row\">\n  //                 <Grid item xs={6}>\n  //                   <SmartComponentList onSmartComponentRemoval={onSmartComponentRemoval} setSmartComponents={setAssociatedSc}  title=\"Smart Component\" smartComponents={associatedSc} />\n  //                 </Grid>\n  //             </Grid>\n  //           </Grid>\n  //           <Grid item xs container direction=\"row\" justify=\"space-between\" alignItems=\"center\"> \n  //             <Grid item xs={6} container direction=\"row\" spacing={2} alignItems=\"center\" justify=\"flex-end\">\n  //               <Grid item>\n  //                   <Button onClick={onCancel} color=\"secondary\" variant=\"contained\"><Clear/>{cancelLabel}</Button>\n  //               </Grid>\n  //               <Grid>\n  //                 <Button onClick={confirmButtonAction} color=\"primary\" variant=\"contained\"><Done/>{confirmLabel}</Button>\n  //               </Grid>\n  //             </Grid>\n  //           </Grid>\n  //         </>\n  //     </Grid>\n  //   ) \n};\n_c = FunctionalityForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"FunctionalityForm\");","map":{"version":3,"sources":["/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/DigitalTwin/FunctionalityForm.tsx"],"names":["FunctionalityForm","props"],"mappings":"AAaA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AAqCC,OAAO,MAAMA,iBAAiB,GAAIC,KAAD,IAAmC,CAErE;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,CA7GO;KAAMD,iB","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react'\r\nimport { TextField, Grid, Button, InputLabel, Select, MenuItem, FormControl } from '@material-ui/core'\r\nimport { AssociatedSmartComponent, SmartComponent } from '../../model'\r\nimport { useFunctionBlockStyles } from '../FunctionBlocks/FunctionBlock/style'\r\nimport { Done, Clear } from '@material-ui/icons'\r\nimport { ConfirmActionProps, ConfirmActionStateLabel, ConfirmActionAction, ConfirmAction } from '../templates/ConfirmAction/ConfirmAction'\r\nimport { AssociatedSmartComponentActions, SmartComponentActions } from '../../redux/actions'\r\nimport { useStore } from '../templates/Store/Store'\r\nimport { getOrDownloadSmartComponents } from '../../utils/smartComponents'\r\nimport { useMountEffect } from '../../utils/main'\r\nimport { RequestResponseState } from '../../services/api/api'\r\nimport { SmartComponentList } from './SmartComponent'\r\n\r\n// const updateOnRemoveSmartComponent = (smartComponents: SmartComponent[], smartComponentToRemove: SmartComponent ) : SmartComponent[] => {\r\n\r\n//   const newSmartComponents : SmartComponent[] = [...smartComponents]\r\n//   newSmartComponents.forEach((sc: SmartComponent) => {\r\n\r\n//       //sc.scName = sc.scName.filter((smartComponent: SmartComponent) => smartComponent.scName !== smartComponentToRemove.scName)\r\n\r\n//   })\r\n\r\n//   return newSmartComponents\r\n\r\n// }\r\n\r\n\r\ninterface FunctionalityFormProps {\r\n\r\n    associatedSc: {\r\n        associatedSc: SmartComponent[]\r\n        setAssociatedSc: Function\r\n    }\r\n    cancel: {\r\n        label: string\r\n        action: () => void\r\n    },\r\n    confirmDialog: {\r\n        buttonTitle: string\r\n        title: string\r\n        initialState: ConfirmActionStateLabel\r\n        action: ConfirmActionAction\r\n        onSuccess : () => void\r\n        start? : {\r\n            label: string\r\n            positiveLabel: string\r\n            negativeLabel: string\r\n        }\r\n        success: {\r\n            label:string\r\n            positiveLabel: string\r\n        }\r\n        error: {\r\n            label: string\r\n            positiveLabel: string\r\n        }\r\n    },\r\n    order?: number,\r\n    newSc?: boolean,\r\n}\r\n\r\n export const FunctionalityForm = (props: FunctionalityFormProps) => {\r\n\r\n//     /**styles */\r\n//     const classes = useFunctionBlockStyles()\r\n\r\n//     /* Buttons */\r\n\r\n//     const onCancel = props.cancel.action\r\n//     const cancelLabel = props.cancel.label\r\n\r\n//     const confirmLabel = props.confirmDialog.buttonTitle\r\n\r\n//     /* Confirmation */\r\n\r\n//     const [confirm, setConfirm] : [boolean, Function] = useState(false)\r\n\r\n//     const validateFields = () : boolean => {\r\n\r\n//         const cValidDtName = dtName.trim() !== ''\r\n            \r\n//         if(!cValidDtName) setValidDtName(cValidDtName)\r\n    \r\n//         return cValidDtName \r\n    \r\n//     }\r\n\r\n//     const confirmButtonAction = () => {\r\n\r\n//         if(validateFields())\r\n//           setConfirm(true)\r\n//     }\r\n\r\n//     const confirmActionStates = {\r\n//         start: {\r\n//             label: props.confirmDialog.start?.label,\r\n//             positiveLabel: props.confirmDialog.start?.positiveLabel,\r\n//             negativeLabel: props.confirmDialog.start?.negativeLabel,\r\n//             state: ConfirmActionStateLabel.start\r\n//         },\r\n//         executing: {\r\n//           label: '',\r\n//           state: ConfirmActionStateLabel.executing,\r\n//         },\r\n//         success: {\r\n//           label: props.confirmDialog.success.label,\r\n//           state: ConfirmActionStateLabel.success,\r\n//           positiveLabel: props.confirmDialog.success.positiveLabel\r\n//         },\r\n//         error: {\r\n//           label: props.confirmDialog.error.label,\r\n//           state: ConfirmActionStateLabel.error,\r\n//           positiveLabel: props.confirmDialog.success.positiveLabel\r\n//         },\r\n//       }\r\n    \r\n//     const confirmActionProps : ConfirmActionProps = {\r\n\r\n//         title: props.confirmDialog.title,\r\n//         states: confirmActionStates,\r\n//         currentState: confirmActionStates.executing,\r\n//         onCancel: () => setConfirm(false),\r\n//         onError: () => setConfirm(false),\r\n//         onSuccess: props.confirmDialog.onSuccess,\r\n//         action:props.confirmDialog.action,\r\n      \r\n//     }\r\n  \r\n//     //Associar um SmartComponent pelo frontend\r\n    \r\n//     const {data:smartComponents, dispatchAction:dispatchSmartComponentActions} = useStore('smartComponents')\r\n//     const updateSmartComponents = (scs: SmartComponent[]) => dispatchSmartComponentActions(SmartComponentActions.updateSmartComponent(scs))\r\n\r\n//     const {associatedSc, setAssociatedSc} = props.associatedSc\r\n\r\n//     const onSmartComponentRemoval = useCallback((smartComponentToRemove: SmartComponent) => {\r\n\r\n//       setAssociatedSc((prevSmartComponents: SmartComponent[]) =>  updateOnRemoveSmartComponent(prevSmartComponents,smartComponentToRemove))\r\n\r\n//   }, [setAssociatedSc])\r\n\r\n//     return (\r\n//       <Grid className={classes.box} spacing={2} container direction=\"column\" component=\"form\">\r\n//         <> {confirm ? <ConfirmAction {...confirmActionProps} /> : null}\r\n//           <Grid item container direction=\"row\" justify=\"space-between\" alignItems=\"center\">\r\n//             {props.order ?\r\n//             <Grid item xs={1}>\r\n//                 {props.order}\r\n//             </Grid>\r\n//             : null\r\n//             }\r\n//             <Grid className={classes.box} spacing={1} item container direction=\"row\">\r\n//                 <Grid item xs={6}>\r\n//                   <SmartComponentList onSmartComponentRemoval={onSmartComponentRemoval} setSmartComponents={setAssociatedSc}  title=\"Smart Component\" smartComponents={associatedSc} />\r\n//                 </Grid>\r\n//             </Grid>\r\n//           </Grid>\r\n//           <Grid item xs container direction=\"row\" justify=\"space-between\" alignItems=\"center\"> \r\n//             <Grid item xs={6} container direction=\"row\" spacing={2} alignItems=\"center\" justify=\"flex-end\">\r\n//               <Grid item>\r\n//                   <Button onClick={onCancel} color=\"secondary\" variant=\"contained\"><Clear/>{cancelLabel}</Button>\r\n//               </Grid>\r\n//               <Grid>\r\n//                 <Button onClick={confirmButtonAction} color=\"primary\" variant=\"contained\"><Done/>{confirmLabel}</Button>\r\n//               </Grid>\r\n//             </Grid>\r\n//           </Grid>\r\n//         </>\r\n//     </Grid>\r\n//   ) \r\n}"]},"metadata":{},"sourceType":"module"}