{"ast":null,"code":"var _jsxFileName = \"/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/DigitalTwin/FunctionalityDetails.tsx\",\n    _s = $RefreshSig$();\n\nimport { Card, CardContent, CardHeader, Divider, Grid } from '@material-ui/core';\nimport { useState } from 'react';\nimport { Redirect, useRouteMatch } from 'react-router-dom';\nimport { routes } from '../../App';\nimport { FunctionalityActions, MonitoredEventActions, MonitoredVariableActions } from '../../redux/actions';\nimport { getOrDownloadFunctionalities, getOrDownloadMonitoredEvents, getOrDownloadMonitoredVariables } from '../../utils/digitalTwins';\nimport { useMountEffect } from '../../utils/main';\nimport { Navigator } from '../templates/Navigator/Navigator';\nimport { useStore } from '../templates/Store/Store';\nimport { JPTable } from '../templates/Table/JPTable';\nimport { FunctionalityForm } from './FunctionalityForm';\nimport { SocketConnection, SOCKET_EVENT } from '../../services/socket/socket'; //Esta página pretende dispor informação mais detalhada da funcionalidade correspondente disponível na página \"DigitalTwinMonitoring\"\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const FunctionalityDetails = () => {\n  _s();\n\n  //Recupera o id da funcionalidade seleccionada anteriormente na página Digital Twin Monitoring\n  const matchParams = useRouteMatch();\n  const id = matchParams.params.id; // Recuperar da base de dados as variáveis que estão a ser monitorizadas (MonitoredVariable)\n\n  const [fetching, setFetching] = useState(true);\n  const [error, setError] = useState('');\n  const {\n    data: monitoredVariables,\n    dispatchAction: dispatchMonitoredVariableActions\n  } = useStore('monitoredVariables');\n\n  const updateMonitoredVariables = monVar => dispatchMonitoredVariableActions(MonitoredVariableActions.updateMonitoredVariable(monVar));\n\n  const [selectedMonitoredVariable, setSelectedMonitoredVariable] = useState([]);\n\n  const initializeMonitoredVariable = monVars => {\n    let monitoredVariable = monVars.filter(monVar => monVar.funcIdAssociated === parseInt(id));\n    setSelectedMonitoredVariable(monitoredVariable);\n  };\n\n  useMountEffect(() => {\n    setFetching(true);\n    getOrDownloadMonitoredVariables(monitoredVariables).then(result => {\n      updateMonitoredVariables(result);\n      initializeMonitoredVariable(result);\n    }).catch(e => {\n      setError(e.msg);\n    }).finally(() => setFetching(false));\n  }); // Recuperar da base de dados os eventos que estão a ser monitorizados (MonitoredEvent)\n\n  const {\n    data: monitoredEvents,\n    dispatchAction: dispatchMonitoredEventActions\n  } = useStore('monitoredEvents');\n\n  const updateMonitoredEvents = monEv => dispatchMonitoredEventActions(MonitoredEventActions.updateMonitoredEvent(monEv));\n\n  const [selectedMonitoredEvent, setSelectedMonitoredEvent] = useState([]);\n\n  const initializeMonitoredEvent = monEvs => {\n    let monitoredEvent = monEvs.filter(monEv => monEv.funcIdAssociated === parseInt(id));\n    setSelectedMonitoredEvent(monitoredEvent);\n  };\n\n  useMountEffect(() => {\n    setFetching(true);\n    getOrDownloadMonitoredEvents(monitoredEvents).then(result => {\n      updateMonitoredEvents(result);\n      initializeMonitoredEvent(result);\n    }).catch(e => {\n      setError(e.msg);\n    }).finally(() => setFetching(false));\n  }); //Cabeçalhos da tabela Variable + Funções Necessárias\n\n  const indexes_variable = [{\n    label: 'Variable',\n    key: 'monitoredVariableName'\n  }, {\n    label: 'Function Block',\n    key: 'fbAssociated'\n  }, {\n    label: 'Smart Component',\n    key: 'scAssociated'\n  }, {\n    label: 'Current Value',\n    key: 'dtMonitoredVariableEvent'\n  }, {\n    label: 'Graph',\n    key: 'dtName'\n  }, {\n    label: 'Remove',\n    key: 'dtName'\n  }];\n\n  const getDataMonitoredVariable = () => selectedMonitoredVariable.map(monitoredVariable => {\n    return { ...monitoredVariable\n    };\n  }); //Cabeçalhos da tabela Event + Funções Necessárias\n\n\n  const indexes_event = [{\n    label: 'Event',\n    key: 'monitoredEventName'\n  }, {\n    label: 'Function Block',\n    key: 'fbAssociated'\n  }, {\n    label: 'Smart Component',\n    key: 'scAssociated'\n  }, {\n    label: 'Trigger',\n    key: 'dtName'\n  }, {\n    label: 'Current Value',\n    key: 'dtMonitoredVariableEvent'\n  }, {\n    label: 'Graph',\n    key: 'dtName'\n  }, {\n    label: 'Remove',\n    key: 'dtName'\n  }];\n\n  const getDataMonitoredEvent = () => selectedMonitoredEvent.map(monitoredEvent => {\n    return { ...monitoredEvent\n    };\n  }); //Variáveis e funções que permitem o redireccionamento para a página DigitalTwinMonitoring\n\n\n  const [redirectTo, setRedirectTo] = useState(\"\");\n\n  const redirectToList = () => setRedirectTo(routes.digitalTwinMonitoring); // Recuperar da base de dados as funcionalidades (Functionality)\n\n\n  const {\n    data: functionalities,\n    dispatchAction: dispatchFunctionalityActions\n  } = useStore('functionalities');\n\n  const updateFunctionalities = funcs => dispatchFunctionalityActions(FunctionalityActions.updateFunctionalities(funcs));\n\n  useMountEffect(() => {\n    setTimeout(() => {\n      setFetching(true);\n      getOrDownloadFunctionalities(functionalities).then(result => updateFunctionalities(result)).catch(e => setError(e.msg)).finally(() => setFetching(false));\n    }, 0);\n  }); //Recuperar dados da funcionalidade\n\n  let [functionalityName, setFunctionalityName] = useState([]);\n  let i = 0;\n\n  while (i < functionalities.length) {\n    if (functionalities[i].funcId == id) {\n      functionalityName = functionalities[i].funcName;\n    }\n\n    i++;\n  } //Recuperar dos sockets a info da MonitoredVariableInstance \n\n\n  let id_sc = 2;\n  const socket = new SocketConnection(SocketConnection.getSmartComponentNamespace(id_sc));\n  const [smartComponentMonVarInstances, setSmartComponentMonVarInstances] = useState([]);\n  const [initialData, setInititalData] = useState(false);\n\n  const onInitialData = data => {\n    updateSmartComponent({\n      monVar: data.monitoredVariableInstances\n    }); //updateSmartComponentMonitoredVariableInstances(data.monitoredVariableInstances ?? [])\n\n    setInititalData(true);\n  };\n\n  const [monitoredVariableInstanceId, setMonitoredVariableInstanceId] = useState('');\n  const [monitoredVariableInstanceCurrentValue, setMonitoredVariableInstanceCurrentValue] = useState(0);\n  const [monitoredVariableInstanceName, setMonitoredVariableInstanceName] = useState('');\n\n  const updateSmartComponentMonitoredVariableInstances = instances => {\n    //console.log(\"instances: \", instances)\n    setSmartComponentMonVarInstances(instances);\n  };\n\n  const updateSmartComponent = data => {\n    console.log(\"data: \", data);\n    const monVarI = data;\n    console.log(\"monVarI: \", monVarI);\n    setMonitoredVariableInstanceId(monVarI.id);\n    if (monitoredVariableInstanceId !== monVarI.monitoredVariableName) setMonitoredVariableInstanceId(monVarI.id); // if(monitoredVariableInstanceCurrentValue !== monVarI.currentValue)\n    //     setMonitoredVariableInstanceCurrentValue(monVarI.currentValue)\n    // if(monitoredVariableInstanceName !== monVarI.monitoredVariableName)\n    //     setMonitoredVariableInstanceName(monVarI.monitoredVariableName)\n\n    console.log(\"monitoredVariableInstanceId: \", monitoredVariableInstanceId);\n  };\n\n  useMountEffect(() => {\n    setTimeout(() => {\n      socket.connect(() => {}, () => {}, onInitialData);\n      socket.addListener(SOCKET_EVENT.EDITED_MVI_EVENT, updateSmartComponent);\n    }, 0);\n  }, () => socket === null || socket === void 0 ? void 0 : socket.disconnect());\n  if (redirectTo !== \"\") return /*#__PURE__*/_jsxDEV(Redirect, {\n    to: redirectTo,\n    push: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 207,\n    columnNumber: 12\n  }, this);\n  return /*#__PURE__*/_jsxDEV(Navigator, {\n    title: \"Digital Twin monitoring\",\n    children: /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n            title: functionalityName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              children: /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                children: /*#__PURE__*/_jsxDEV(JPTable, {\n                  sortedkey: \"idMonitoredVariable\",\n                  data: getDataMonitoredVariable(),\n                  updateData: updateMonitoredVariables,\n                  indexes: indexes_variable,\n                  tName: \"MonitoredVariable\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 219,\n                  columnNumber: 33\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 218,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              children: /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                children: /*#__PURE__*/_jsxDEV(JPTable, {\n                  sortedkey: \"idMonitoredEvent\",\n                  data: getDataMonitoredEvent(),\n                  updateData: updateMonitoredEvents,\n                  indexes: indexes_event,\n                  tName: \"MonitoredEvent\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 232,\n                  columnNumber: 33\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 231,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 230,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FunctionalityForm, {\n        cancel: {\n          action: redirectToList,\n          label: 'Cancel'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 210,\n    columnNumber: 5\n  }, this);\n};\n\n_s(FunctionalityDetails, \"fMH9GCKXayG6eEQTrXbVwAEBDkw=\", false, function () {\n  return [useRouteMatch, useStore, useMountEffect, useStore, useMountEffect, useStore, useMountEffect, useMountEffect];\n});\n\n_c = FunctionalityDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"FunctionalityDetails\");","map":{"version":3,"sources":["/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/DigitalTwin/FunctionalityDetails.tsx"],"names":["Card","CardContent","CardHeader","Divider","Grid","useState","Redirect","useRouteMatch","routes","FunctionalityActions","MonitoredEventActions","MonitoredVariableActions","getOrDownloadFunctionalities","getOrDownloadMonitoredEvents","getOrDownloadMonitoredVariables","useMountEffect","Navigator","useStore","JPTable","FunctionalityForm","SocketConnection","SOCKET_EVENT","FunctionalityDetails","matchParams","id","params","fetching","setFetching","error","setError","data","monitoredVariables","dispatchAction","dispatchMonitoredVariableActions","updateMonitoredVariables","monVar","updateMonitoredVariable","selectedMonitoredVariable","setSelectedMonitoredVariable","initializeMonitoredVariable","monVars","monitoredVariable","filter","funcIdAssociated","parseInt","then","result","catch","e","msg","finally","monitoredEvents","dispatchMonitoredEventActions","updateMonitoredEvents","monEv","updateMonitoredEvent","selectedMonitoredEvent","setSelectedMonitoredEvent","initializeMonitoredEvent","monEvs","monitoredEvent","indexes_variable","label","key","getDataMonitoredVariable","map","indexes_event","getDataMonitoredEvent","redirectTo","setRedirectTo","redirectToList","digitalTwinMonitoring","functionalities","dispatchFunctionalityActions","updateFunctionalities","funcs","setTimeout","functionalityName","setFunctionalityName","i","length","funcId","funcName","id_sc","socket","getSmartComponentNamespace","smartComponentMonVarInstances","setSmartComponentMonVarInstances","initialData","setInititalData","onInitialData","updateSmartComponent","monitoredVariableInstances","monitoredVariableInstanceId","setMonitoredVariableInstanceId","monitoredVariableInstanceCurrentValue","setMonitoredVariableInstanceCurrentValue","monitoredVariableInstanceName","setMonitoredVariableInstanceName","updateSmartComponentMonitoredVariableInstances","instances","console","log","monVarI","monitoredVariableName","connect","addListener","EDITED_MVI_EVENT","disconnect","action"],"mappings":"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","sourcesContent":["import { Card, CardContent, CardHeader, Divider, Grid } from '@material-ui/core'\r\nimport { useState } from 'react'\r\nimport { match, Redirect, useRouteMatch } from 'react-router-dom'\r\nimport { routes } from '../../App'\r\nimport { Functionality, MonitoredEvent, MonitoredVariable, MonitoredVariableInstance, SmartComponent } from '../../model'\r\nimport { FunctionalityActions, MonitoredEventActions, MonitoredVariableActions } from '../../redux/actions'\r\nimport { RequestResponseState } from '../../services/api/api'\r\nimport { getOrDownloadFunctionalities, getOrDownloadMonitoredEvents, getOrDownloadMonitoredVariables } from '../../utils/digitalTwins'\r\nimport { useMountEffect } from '../../utils/main'\r\nimport { Navigator } from '../templates/Navigator/Navigator'\r\nimport { useStore } from '../templates/Store/Store'\r\nimport { JPTable } from '../templates/Table/JPTable'\r\nimport { FunctionalityForm } from './FunctionalityForm'\r\nimport { SocketConnection, SOCKET_EVENT } from '../../services/socket/socket'\r\n\r\n//Esta página pretende dispor informação mais detalhada da funcionalidade correspondente disponível na página \"DigitalTwinMonitoring\"\r\n\r\nexport const FunctionalityDetails = () => {\r\n\r\n    //Recupera o id da funcionalidade seleccionada anteriormente na página Digital Twin Monitoring\r\n    const matchParams : match = useRouteMatch()\r\n    const id = (matchParams.params as any).id\r\n\r\n    // Recuperar da base de dados as variáveis que estão a ser monitorizadas (MonitoredVariable)\r\n    const [fetching,setFetching] = useState(true)\r\n    const [error,setError] = useState('')\r\n    const {data: monitoredVariables, dispatchAction: dispatchMonitoredVariableActions} = useStore('monitoredVariables')\r\n    const updateMonitoredVariables = (monVar: MonitoredVariable[]) => dispatchMonitoredVariableActions(MonitoredVariableActions.updateMonitoredVariable(monVar))\r\n\r\n    const [selectedMonitoredVariable, setSelectedMonitoredVariable] : [MonitoredVariable[], Function] = useState([])\r\n\r\n    const initializeMonitoredVariable = (monVars: MonitoredVariable[]) => {\r\n        \r\n        let monitoredVariable : MonitoredVariable[] = monVars.filter((monVar) => monVar.funcIdAssociated === parseInt(id))\r\n        \r\n        setSelectedMonitoredVariable(monitoredVariable)\r\n\r\n    }\r\n\r\n    useMountEffect(() => {\r\n\r\n        setFetching(true)\r\n        getOrDownloadMonitoredVariables(monitoredVariables)\r\n            .then((result: MonitoredVariable[]) => {\r\n                updateMonitoredVariables(result)\r\n                initializeMonitoredVariable(result)\r\n            })\r\n            .catch((e:RequestResponseState) => {\r\n                setError(e.msg)\r\n            })\r\n            .finally(() => setFetching(false))\r\n\r\n    })\r\n\r\n    // Recuperar da base de dados os eventos que estão a ser monitorizados (MonitoredEvent)\r\n    const {data: monitoredEvents, dispatchAction: dispatchMonitoredEventActions} = useStore('monitoredEvents')\r\n    const updateMonitoredEvents = (monEv: MonitoredEvent[]) => dispatchMonitoredEventActions(MonitoredEventActions.updateMonitoredEvent(monEv))\r\n\r\n    const [selectedMonitoredEvent, setSelectedMonitoredEvent] : [MonitoredEvent[], Function] = useState([])\r\n    \r\n    const initializeMonitoredEvent = (monEvs: MonitoredEvent[]) => {\r\n            \r\n        let monitoredEvent : MonitoredEvent[] = monEvs.filter((monEv) => monEv.funcIdAssociated === parseInt(id))\r\n            \r\n        setSelectedMonitoredEvent(monitoredEvent)\r\n    \r\n    }\r\n    \r\n    useMountEffect(() => {\r\n    \r\n        setFetching(true)\r\n        getOrDownloadMonitoredEvents(monitoredEvents)\r\n            .then((result: MonitoredEvent[]) => {\r\n                updateMonitoredEvents(result)\r\n                initializeMonitoredEvent(result)\r\n            })\r\n            .catch((e:RequestResponseState) => {\r\n                setError(e.msg)\r\n            })\r\n            .finally(() => setFetching(false))\r\n    \r\n    })\r\n    \r\n    //Cabeçalhos da tabela Variable + Funções Necessárias\r\n    const indexes_variable = [\r\n        {label: 'Variable', key: 'monitoredVariableName'},\r\n        {label: 'Function Block', key: 'fbAssociated'},\r\n        {label: 'Smart Component', key: 'scAssociated'},\r\n        {label: 'Current Value', key: 'dtMonitoredVariableEvent'},\r\n        {label: 'Graph', key: 'dtName'},\r\n        {label: 'Remove', key: 'dtName'},\r\n    ]\r\n\r\n    const getDataMonitoredVariable = () =>  selectedMonitoredVariable.map((monitoredVariable: MonitoredVariable) => {    \r\n        \r\n        return {\r\n            ...monitoredVariable\r\n        }\r\n\r\n    })\r\n\r\n    //Cabeçalhos da tabela Event + Funções Necessárias\r\n    const indexes_event = [\r\n        {label: 'Event', key: 'monitoredEventName'},\r\n        {label: 'Function Block', key: 'fbAssociated'},\r\n        {label: 'Smart Component', key: 'scAssociated'},\r\n        {label: 'Trigger', key: 'dtName'},\r\n        {label: 'Current Value', key: 'dtMonitoredVariableEvent'},\r\n        {label: 'Graph', key: 'dtName'},\r\n        {label: 'Remove', key: 'dtName'},\r\n    ]\r\n\r\n    const getDataMonitoredEvent = () =>  selectedMonitoredEvent.map((monitoredEvent: MonitoredEvent) => {    \r\n        \r\n        return {\r\n            ...monitoredEvent\r\n        }\r\n\r\n    })\r\n\r\n    //Variáveis e funções que permitem o redireccionamento para a página DigitalTwinMonitoring\r\n    const [redirectTo, setRedirectTo] : [string, Function] = useState(\"\")\r\n\r\n    const redirectToList = () => setRedirectTo(routes.digitalTwinMonitoring)\r\n\r\n    // Recuperar da base de dados as funcionalidades (Functionality)\r\n    const {data:functionalities, dispatchAction:dispatchFunctionalityActions} = useStore('functionalities')\r\n    const updateFunctionalities = (funcs: Functionality[]) => dispatchFunctionalityActions(FunctionalityActions.updateFunctionalities(funcs))\r\n\r\n    useMountEffect(() => {\r\n\r\n    setTimeout(() => {\r\n\r\n    setFetching(true)\r\n    getOrDownloadFunctionalities(functionalities)\r\n        .then((result: Functionality[]) => updateFunctionalities(result))\r\n        .catch((e:RequestResponseState) => setError(e.msg))\r\n        .finally(() => setFetching(false))\r\n    }, 0)\r\n    })\r\n\r\n    //Recuperar dados da funcionalidade\r\n    let [functionalityName, setFunctionalityName] : [Functionality[], Function] = useState([])\r\n\r\n    let i = 0;\r\n    while(i < functionalities.length){\r\n\r\n        if(functionalities[i].funcId == id) {\r\n          functionalityName = functionalities[i].funcName\r\n        }\r\n        i++\r\n    }\r\n\r\n    //Recuperar dos sockets a info da MonitoredVariableInstance \r\n    let id_sc = 2\r\n    const socket : SocketConnection = new SocketConnection(SocketConnection.getSmartComponentNamespace(id_sc))\r\n    const [smartComponentMonVarInstances,setSmartComponentMonVarInstances] : [MonitoredVariableInstance[],Function] = useState([])\r\n\r\n    const [initialData,setInititalData] = useState(false)\r\n\r\n    const onInitialData = (data: SmartComponent) => {\r\n    \r\n        updateSmartComponent({monVar: data.monitoredVariableInstances})\r\n        //updateSmartComponentMonitoredVariableInstances(data.monitoredVariableInstances ?? [])\r\n        setInititalData(true)\r\n\r\n    } \r\n    \r\n    const [monitoredVariableInstanceId, setMonitoredVariableInstanceId] : [string,Function] = useState('')\r\n    const [monitoredVariableInstanceCurrentValue,setMonitoredVariableInstanceCurrentValue] : [number,Function] = useState(0)\r\n    const [monitoredVariableInstanceName,setMonitoredVariableInstanceName] : [string,Function] = useState('')\r\n\r\n    const updateSmartComponentMonitoredVariableInstances = (instances: MonitoredVariableInstance[]) => {\r\n        //console.log(\"instances: \", instances)\r\n        setSmartComponentMonVarInstances(instances)\r\n\r\n    }\r\n\r\n    const updateSmartComponent = (data: any) => {\r\n        \r\n        console.log(\"data: \", data)\r\n        const monVarI : MonitoredVariableInstance = data\r\n        console.log(\"monVarI: \", monVarI)\r\n        setMonitoredVariableInstanceId(monVarI.id)\r\n        if(monitoredVariableInstanceId !== monVarI.monitoredVariableName)\r\n            setMonitoredVariableInstanceId(monVarI.id)\r\n        // if(monitoredVariableInstanceCurrentValue !== monVarI.currentValue)\r\n        //     setMonitoredVariableInstanceCurrentValue(monVarI.currentValue)\r\n        // if(monitoredVariableInstanceName !== monVarI.monitoredVariableName)\r\n        //     setMonitoredVariableInstanceName(monVarI.monitoredVariableName)\r\n        \r\n        console.log(\"monitoredVariableInstanceId: \", monitoredVariableInstanceId)\r\n    }\r\n    \r\n    useMountEffect(() => {\r\n        \r\n        setTimeout(() => {\r\n            \r\n            socket.connect(()=>{}, () => {},onInitialData)\r\n            socket.addListener(SOCKET_EVENT.EDITED_MVI_EVENT,updateSmartComponent)\r\n        }\r\n        ,0)\r\n\r\n    }, () => socket?.disconnect())\r\n\r\n    if(redirectTo !== \"\") \r\n    return <Redirect to={redirectTo} push={true} />\r\n\r\n    return(\r\n    <Navigator title=\"Digital Twin monitoring\">\r\n    <>\r\n        <Grid item>\r\n            <Card>\r\n                <CardHeader title={functionalityName} />\r\n                <Divider />\r\n                    <CardContent>\r\n                        <Grid item xs={12}>        \r\n                            <Grid item>\r\n                                <JPTable\r\n                                    sortedkey=\"idMonitoredVariable\"\r\n                                    data={getDataMonitoredVariable()} \r\n                                    updateData={updateMonitoredVariables} \r\n                                    indexes={indexes_variable} \r\n                                    tName='MonitoredVariable'\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                    </CardContent>\r\n                    <CardContent>\r\n                        <Grid item xs={12}>        \r\n                            <Grid item>\r\n                                <JPTable\r\n                                    sortedkey=\"idMonitoredEvent\"\r\n                                    data={getDataMonitoredEvent()} \r\n                                    updateData={updateMonitoredEvents} \r\n                                    indexes={indexes_event} \r\n                                    tName='MonitoredEvent'\r\n                                />\r\n                            </Grid>\r\n                            \r\n                        </Grid>\r\n                    </CardContent>\r\n            </Card>\r\n        </Grid>\r\n        <FunctionalityForm\r\n            cancel={{action: redirectToList, label: 'Cancel'}}\r\n        />\r\n    </>\r\n    </Navigator>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}