{"ast":null,"code":"var _jsxFileName = \"/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/FunctionBlocks/FunctionBlock/Variable.tsx\";\nimport React, { useEffect, useState, useCallback } from 'react';\nimport { useFunctionBlockStyles } from \"./style\";\nimport { DataType } from \"../../../model/index\";\nimport { Grid, TextField, FormControl, InputLabel, Select, Button, MenuItem } from \"@material-ui/core\";\nexport const VariableList = React.memo(props => {\n  const {\n    variables,\n    setVariables,\n    onVariableRemoval,\n    onVariableEdition\n  } = props;\n  const classes = useFunctionBlockStyles();\n  const newVar = {\n    variableId: -1,\n    variableDataType: DataType.dtString,\n    variableOpcua: \"\",\n    variableInoutType: props.inOutType,\n    variableName: \"\"\n  };\n  const [newVariable, setNewVariable] = useState(newVar);\n  const setVariable = useCallback((variable, index) => {\n    setVariables(prevVars => {\n      const oldVariable = prevVars[index];\n      const newVariables = [...prevVars];\n      newVariables[index] = variable;\n      onVariableEdition(oldVariable, variable);\n      return newVariables;\n    });\n  }, [onVariableEdition, setVariables]);\n  const addVariable = useCallback(varToAdd => {\n    setVariables(prevVariables => [...prevVariables, varToAdd]);\n    setNewVariable(newVar);\n  }, [setVariables, newVar]);\n  const removeVariable = useCallback(variableToRemove => {\n    setVariables(prevVars => prevVars.filter((variable, index) => variable !== variableToRemove));\n    onVariableRemoval(variableToRemove);\n  }, [onVariableRemoval, setVariables]);\n  return /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    direction: \"column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }, props.title), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    className: classes.box,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, variables.map((variable, index) => /*#__PURE__*/React.createElement(VariableRow, {\n    key: index,\n    index: index,\n    addRemoveVariable: removeVariable,\n    setVariable: setVariable,\n    variable: variable,\n    newVar: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 61\n    }\n  })), /*#__PURE__*/React.createElement(VariableRow, {\n    index: -1,\n    addRemoveVariable: addVariable,\n    setVariable: setNewVariable,\n    variable: newVariable,\n    newVar: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  })));\n});\nconst VariableRow = React.memo(props => {\n  const classes = useFunctionBlockStyles();\n  const [validName, setValidName] = useState(\"\");\n\n  const action = () => {\n    if (!isValid() && props.newVar) setValidName(\"Mandatory\");else props.addRemoveVariable(props.variable);\n  };\n\n  const isValid = useCallback(() => props.variable.variableName !== '', [props.variable]);\n  const validate = useCallback(() => {\n    !isValid() ? setValidName(\"Mandatory\") : setValidName('');\n  }, [isValid]);\n  useEffect(() => {\n    if (!props.newVar) validate();\n  }, [props.variable.variableName, props.newVar, validate]);\n\n  const updateField = field => event => {\n    setValidName('');\n    props.setVariable({ ...props.variable,\n      [field]: event.target.value\n    }, props.index);\n  };\n\n  return /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    container: true,\n    direction: \"row\",\n    justify: \"space-between\",\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 5\n    }\n  }, props.order ? /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }\n  }, props.order) : null, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    value: props.variable.variableName,\n    onChange: updateField('variableName'),\n    helperText: validName,\n    fullWidth: true,\n    required: true,\n    error: validName !== '',\n    label: \"Name\",\n    type: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    value: props.variable.variableOpcua || '',\n    onChange: updateField('variableOpcua'),\n    helperText: \"\",\n    fullWidth: true,\n    label: \"OPCUA\",\n    type: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FormControl, {\n    fullWidth: true,\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    id: `data-type-label-${props.variable.variableName}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 11\n    }\n  }, \"Data Type\"), /*#__PURE__*/React.createElement(Select, {\n    labelId: `data-type-label-${props.variable.variableName}`,\n    value: props.variable.variableDataType,\n    onChange: updateField('variableDataType'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 11\n    }\n  }, Object.values(DataType).map((dt, index) => /*#__PURE__*/React.createElement(MenuItem, {\n    key: index,\n    value: dt,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 68\n    }\n  }, dt))))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    className: classes.varEvButton,\n    size: \"small\",\n    variant: \"contained\",\n    onClick: action,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 9\n    }\n  }, props.newVar ? '+' : 'x')));\n}, (prevProps, nextProps) => prevProps.variable === nextProps.variable);","map":{"version":3,"sources":["/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/FunctionBlocks/FunctionBlock/Variable.tsx"],"names":["React","useEffect","useState","useCallback","useFunctionBlockStyles","DataType","Grid","TextField","FormControl","InputLabel","Select","Button","MenuItem","VariableList","memo","props","variables","setVariables","onVariableRemoval","onVariableEdition","classes","newVar","variableId","variableDataType","dtString","variableOpcua","variableInoutType","inOutType","variableName","newVariable","setNewVariable","setVariable","variable","index","prevVars","oldVariable","newVariables","addVariable","varToAdd","prevVariables","removeVariable","variableToRemove","filter","title","box","map","VariableRow","validName","setValidName","action","isValid","addRemoveVariable","validate","updateField","field","event","target","value","order","Object","values","dt","varEvButton","prevProps","nextProps"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useCallback } from 'react'\nimport { useFunctionBlockStyles } from \"./style\"\nimport { Variable, DataType, InOutType } from \"../../../model/index\"\nimport { Grid, TextField, FormControl, InputLabel, Select, Button, MenuItem } from \"@material-ui/core\"\n\ninterface VariableProps {\n  setVariables: Function\n  variables: Variable[]\n  title: string\n  inOutType: InOutType\n  onVariableRemoval: (variable: Variable) => void\n  onVariableEdition: (oldVariable: Variable, newVariable: Variable) => void\n}\n\nexport const VariableList = React.memo((props: VariableProps) => {\n  \n  const {variables,setVariables,onVariableRemoval,onVariableEdition} = props\n\n  const classes = useFunctionBlockStyles()\n\n  const newVar : Variable = {\n    variableId: -1,\n    variableDataType: DataType.dtString,\n    variableOpcua: \"\",\n    variableInoutType: props.inOutType,\n    variableName: \"\",\n  }\n\n  const [newVariable,setNewVariable] : [Variable,Function] = useState(newVar)\n\n  const setVariable = useCallback((variable:Variable,index:number) => {\n\n    setVariables((prevVars: Variable[]) => {\n\n      const oldVariable : Variable = prevVars[index]\n      const newVariables : Variable[] = [...prevVars]\n      newVariables[index] = variable\n      onVariableEdition(oldVariable,variable)\n      return newVariables\n\n    }) \n\n  },[onVariableEdition, setVariables])\n\n  const addVariable = useCallback((varToAdd: Variable) => {\n    \n    setVariables((prevVariables: Variable[]) =>[...prevVariables, varToAdd])\n    setNewVariable(newVar)\n\n  }, [setVariables,newVar]) \n\n  const removeVariable = useCallback((variableToRemove:Variable) => {\n    setVariables((prevVars: Variable[]) => prevVars.filter((variable:Variable,index:number) => variable !== variableToRemove))\n    onVariableRemoval(variableToRemove)\n  },[onVariableRemoval,setVariables]) \n\n  return (\n    <Grid container direction=\"column\">\n      <Grid item>{props.title}</Grid>\n      <Grid item className={classes.box}>\n        {variables.map((variable:Variable, index:number) => <VariableRow key={index} index={index} addRemoveVariable={removeVariable} setVariable={setVariable} variable={variable} newVar={false} />)}\n        <VariableRow index={-1} addRemoveVariable={addVariable} setVariable={setNewVariable} variable={newVariable} newVar={true}  />\n      </Grid> \n    </Grid>\n  )\n})\n\ninterface VariableRowProps {\n  index: number \n  addRemoveVariable: (variable: Variable) => void\n  setVariable:Function\n  variable: Variable\n  newVar: boolean\n  order?: number\n}\n  \nconst VariableRow = React.memo((props: VariableRowProps) => {\n\n  const classes = useFunctionBlockStyles()\n\n  const [validName,setValidName] = useState(\"\")\n\n  const action = () => {\n\n    if(!isValid() && props.newVar) \n      setValidName(\"Mandatory\")\n    \n    else\n      props.addRemoveVariable(props.variable)\n    \n  }\n\n  const isValid = useCallback(() => props.variable.variableName !== '', [props.variable])\n\n  const validate = useCallback(() => {\n    \n    !isValid() ? setValidName(\"Mandatory\") : setValidName('')\n\n  },[isValid]) \n\n  useEffect(() => {if(!props.newVar) validate()}, [props.variable.variableName, props.newVar, validate])\n\n  const updateField = (field:string) => (event:any) => {\n\n    setValidName('')\n    props.setVariable({...props.variable, [field]: event.target.value},props.index)\n  \n  }\n\n  return (\n    <Grid item container direction=\"row\" justify=\"space-between\" alignItems=\"center\">\n      { props.order ?\n      <Grid item xs={1}>\n          {props.order}\n      </Grid>\n      : null\n      }\n      <Grid item xs={4}>\n        <TextField \n          value={props.variable.variableName} \n          onChange={updateField('variableName')}\n          helperText={validName} fullWidth \n          required\n          error={validName !== ''} \n          label=\"Name\" \n          type=\"text\" />\n      </Grid>\n      <Grid item xs={2}>\n        <TextField \n          value={props.variable.variableOpcua || ''}\n          onChange={updateField('variableOpcua')} \n          helperText=\"\" \n          fullWidth \n          label=\"OPCUA\" \n          type=\"text\" />\n      </Grid>\n      <Grid item xs={3}>\n        <FormControl fullWidth required>\n          <InputLabel id={`data-type-label-${props.variable.variableName}`}>Data Type</InputLabel>\n          <Select\n            labelId={`data-type-label-${props.variable.variableName}`}\n            value={props.variable.variableDataType}\n            onChange={updateField('variableDataType')}\n          >\n            {Object.values(DataType).map((dt:any, index:number) => <MenuItem key={index} value={dt}>{dt}</MenuItem>)}\n\n          </Select>\n        </FormControl>\n      </Grid>\n      <Grid item xs={1}>\n        <Button \n          className={classes.varEvButton} \n          size=\"small\" \n          variant=\"contained\"\n          onClick={action}\n        >\n        {props.newVar ? '+' : 'x' }</Button>\n      </Grid>\n    </Grid>\n  )\n}\n ,(prevProps:VariableRowProps, nextProps: VariableRowProps) => prevProps.variable === nextProps.variable\n)"]},"metadata":{},"sourceType":"module"}