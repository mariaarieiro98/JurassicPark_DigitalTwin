{"ast":null,"code":"var _jsxFileName = \"/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/DigitalTwin/FunctionalityDetails.tsx\",\n    _s = $RefreshSig$();\n\nimport { Box, Grid } from '@material-ui/core';\nimport React, { useState } from 'react';\nimport { Redirect, useRouteMatch } from 'react-router-dom';\nimport { routes } from '../../App';\nimport { FunctionalityActions, MonitoredVariableActions } from '../../redux/actions';\nimport { getOrDownloadFunctionalities } from '../../utils/digitalTwins';\nimport { useMountEffect } from '../../utils/main';\nimport { Navigator } from '../templates/Navigator/Navigator';\nimport { useStore } from '../templates/Store/Store';\nimport { JPTable } from '../templates/Table/JPTable';\nimport { FunctionalityForm } from './FunctionalityForm'; //Esta página pretende dispor informação mais detalhada da funcionalidade correspondente disponível na página \"DigitalTwinMonitoring\"\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const FunctionalityDetails = () => {\n  _s();\n\n  //Cabeçalhos da tabela + Funções Necessárias\n  const indexes = [{\n    label: 'Variable',\n    key: 'monitoredVariableName'\n  }, {\n    label: 'Function Block',\n    key: 'fbAssociated'\n  } //{label: 'Smart Component', key: 'dtDescription'},\n  //{label: 'Current Value', key: 'dtMonitoredVariableEvent'},\n  //{label: 'Graph', key: 'dtName'},\n  //{label: 'Remove', key: 'dtName'},\n  ];\n\n  const getDataMonitoredVariable = () => functionalities.map(functionality => {\n    return { ...functionality\n    };\n  });\n\n  const {\n    data: monitoredVariables,\n    dispatchAction: dispatchMonitoredVariableActions\n  } = useStore('monitoredVariables');\n\n  const updateMonitoredVariables = monVar => dispatchMonitoredVariableActions(MonitoredVariableActions.updateMonitoredVariable(monVar)); //Recupera o id da funcionalidade seleccionada anteriormente na página Digital Twin Monitoring\n\n\n  const matchParams = useRouteMatch();\n  const id = matchParams.params.id; //Variáveis e funções que permitem o redireccionamento para a página DigitalTwinMonitoring\n\n  const [redirectTo, setRedirectTo] = useState(\"\");\n\n  const redirectToList = () => setRedirectTo(routes.digitalTwinMonitoring); // Recuperar da base de dados as funcionalidades (Functionality)\n\n\n  const [fetching, setFetching] = useState(true);\n  const [error, setError] = useState('');\n  const {\n    data: functionalities,\n    dispatchAction: dispatchFunctionalityActions\n  } = useStore('functionalities');\n\n  const updateFunctionalities = funcs => dispatchFunctionalityActions(FunctionalityActions.updateFunctionalities(funcs));\n\n  useMountEffect(() => {\n    setTimeout(() => {\n      setFetching(true);\n      getOrDownloadFunctionalities(functionalities).then(result => updateFunctionalities(result)).catch(e => setError(e.msg)).finally(() => setFetching(false));\n    }, 0);\n  }); //Recuperar dados da funcionalidade\n\n  let [functionalityName, setFunctionalityName] = useState([]);\n  let i = 0;\n\n  while (i < functionalities.length) {\n    if (functionalities[i].funcId == id) {\n      functionalityName = functionalities[i].funcName;\n    }\n\n    i++;\n  }\n\n  if (redirectTo !== \"\") return /*#__PURE__*/_jsxDEV(Redirect, {\n    to: redirectTo,\n    push: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 12\n  }, this);\n  return /*#__PURE__*/_jsxDEV(Navigator, {\n    title: \"Digital Twin monitoring\",\n    children: /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: true,\n        container: true,\n        direction: \"row\",\n        justify: \"space-between\",\n        alignItems: \"center\",\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          children: functionalityName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(FunctionalityForm, {\n        cancel: {\n          action: redirectToList,\n          label: 'Cancel'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        children: /*#__PURE__*/_jsxDEV(JPTable, {\n          sortedkey: \"idMonitoredVariable\",\n          data: getDataFunctionality(),\n          updateData: updateMonitoredVariables,\n          indexes: indexes,\n          tName: \"Functionality\",\n          extra: {\n            delete: {\n              action: deleteFunctionalityAction,\n              labelKey: 'funcName',\n              onSuccessDelete: () => {}\n            },\n            edit: {\n              action: showEditing\n            },\n            details: {\n              action: redirectToList\n            },\n            add: {\n              action: showAddDetails\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n\n_s(FunctionalityDetails, \"C/sJjQgZO8adcwamTdtewh+Y+4c=\", false, function () {\n  return [useStore, useRouteMatch, useStore, useMountEffect];\n});\n\n_c = FunctionalityDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"FunctionalityDetails\");","map":{"version":3,"sources":["/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/DigitalTwin/FunctionalityDetails.tsx"],"names":["Box","Grid","React","useState","Redirect","useRouteMatch","routes","FunctionalityActions","MonitoredVariableActions","getOrDownloadFunctionalities","useMountEffect","Navigator","useStore","JPTable","FunctionalityForm","FunctionalityDetails","indexes","label","key","getDataMonitoredVariable","functionalities","map","functionality","data","monitoredVariables","dispatchAction","dispatchMonitoredVariableActions","updateMonitoredVariables","monVar","updateMonitoredVariable","matchParams","id","params","redirectTo","setRedirectTo","redirectToList","digitalTwinMonitoring","fetching","setFetching","error","setError","dispatchFunctionalityActions","updateFunctionalities","funcs","setTimeout","then","result","catch","e","msg","finally","functionalityName","setFunctionalityName","i","length","funcId","funcName","action","getDataFunctionality","delete","deleteFunctionalityAction","labelKey","onSuccessDelete","edit","showEditing","details","add","showAddDetails"],"mappings":"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","sourcesContent":["import { Box, Button, Grid, TextField } from '@material-ui/core'\r\nimport { Clear } from '@material-ui/icons'\r\nimport React, { useState } from 'react'\r\nimport { match, Redirect, useRouteMatch } from 'react-router-dom'\r\nimport { routes } from '../../App'\r\nimport { Functionality, MonitoredVariable } from '../../model'\r\nimport { FunctionalityActions, MonitoredVariableActions } from '../../redux/actions'\r\nimport { RequestResponseState } from '../../services/api/api'\r\nimport { getOrDownloadFunctionalities } from '../../utils/digitalTwins'\r\nimport { useMountEffect } from '../../utils/main'\r\nimport { Navigator } from '../templates/Navigator/Navigator'\r\nimport { useStore } from '../templates/Store/Store'\r\nimport { JPTable } from '../templates/Table/JPTable'\r\nimport { FunctionalityForm } from './FunctionalityForm'\r\n\r\n//Esta página pretende dispor informação mais detalhada da funcionalidade correspondente disponível na página \"DigitalTwinMonitoring\"\r\n\r\nexport const FunctionalityDetails = () => {\r\n\r\n    //Cabeçalhos da tabela + Funções Necessárias\r\n    const indexes = [\r\n        {label: 'Variable', key: 'monitoredVariableName'},\r\n        {label: 'Function Block', key: 'fbAssociated'},\r\n        //{label: 'Smart Component', key: 'dtDescription'},\r\n        //{label: 'Current Value', key: 'dtMonitoredVariableEvent'},\r\n        //{label: 'Graph', key: 'dtName'},\r\n        //{label: 'Remove', key: 'dtName'},\r\n    ]\r\n    \r\n    const getDataMonitoredVariable = () => functionalities.map((functionality: Functionality) => {\r\n\r\n        return {\r\n              ...functionality,\r\n        }\r\n    })\r\n\r\n    const {data: monitoredVariables, dispatchAction: dispatchMonitoredVariableActions} = useStore('monitoredVariables')\r\n    \r\n    const updateMonitoredVariables = (monVar: MonitoredVariable[]) => dispatchMonitoredVariableActions(MonitoredVariableActions.updateMonitoredVariable(monVar))\r\n    \r\n    //Recupera o id da funcionalidade seleccionada anteriormente na página Digital Twin Monitoring\r\n    const matchParams : match = useRouteMatch()\r\n    const id = (matchParams.params as any).id\r\n\r\n    //Variáveis e funções que permitem o redireccionamento para a página DigitalTwinMonitoring\r\n    const [redirectTo, setRedirectTo] : [string, Function] = useState(\"\")\r\n\r\n    const redirectToList = () => setRedirectTo(routes.digitalTwinMonitoring)\r\n\r\n    // Recuperar da base de dados as funcionalidades (Functionality)\r\n    const [fetching,setFetching] = useState(true)\r\n    const [error,setError] = useState('')\r\n    const {data:functionalities, dispatchAction:dispatchFunctionalityActions} = useStore('functionalities')\r\n    const updateFunctionalities = (funcs: Functionality[]) => dispatchFunctionalityActions(FunctionalityActions.updateFunctionalities(funcs))\r\n\r\n    useMountEffect(() => {\r\n\r\n    setTimeout(() => {\r\n\r\n    setFetching(true)\r\n    getOrDownloadFunctionalities(functionalities)\r\n        .then((result: Functionality[]) => updateFunctionalities(result))\r\n        .catch((e:RequestResponseState) => setError(e.msg))\r\n        .finally(() => setFetching(false))\r\n    }, 0)\r\n    })\r\n\r\n    //Recuperar dados da funcionalidade\r\n    let [functionalityName, setFunctionalityName] : [Functionality[], Function] = useState([])\r\n\r\n    let i = 0;\r\n    while(i < functionalities.length){\r\n\r\n        if(functionalities[i].funcId == id) {\r\n          functionalityName = functionalities[i].funcName\r\n        }\r\n        i++\r\n    }\r\n\r\n    if(redirectTo !== \"\") \r\n    return <Redirect to={redirectTo} push={true} />\r\n\r\n    return(\r\n    <Navigator title=\"Digital Twin monitoring\">\r\n    <>\r\n       <Grid item xs container direction=\"row\" justify=\"space-between\" alignItems=\"center\"> \r\n            <Box>{functionalityName}</Box>\r\n       </Grid>      \r\n        <FunctionalityForm\r\n            cancel={{action: redirectToList, label: 'Cancel'}}\r\n        />\r\n        <Grid item>\r\n            <JPTable\r\n                sortedkey=\"idMonitoredVariable\"\r\n                data={getDataFunctionality()} \r\n                updateData={updateMonitoredVariables} \r\n                indexes={indexes} \r\n                tName='Functionality'\r\n                extra={{\r\n                delete: {\r\n                    action: deleteFunctionalityAction,\r\n                    labelKey: 'funcName',\r\n                    onSuccessDelete: () => {}\r\n                },\r\n                edit: {\r\n                    action: showEditing\r\n                },\r\n                details: {\r\n                    action: redirectToList,\r\n                },\r\n                add: {\r\n                    action: showAddDetails\r\n                }\r\n                }} \r\n            />\r\n        </Grid>\r\n    </>\r\n    </Navigator>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}