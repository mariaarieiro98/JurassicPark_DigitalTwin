{"ast":null,"code":"var _jsxFileName = \"/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/DigitalTwin/FunctionalityDetails.tsx\",\n    _s = $RefreshSig$();\n\nimport { Box, Button, Card, CardContent, CardHeader, Divider, Grid } from '@material-ui/core';\nimport React, { useState } from 'react';\nimport { Redirect, useRouteMatch } from 'react-router-dom';\nimport { routes } from '../../App';\nimport { FunctionalityActions, MonitoredEventActions, MonitoredVariableActions } from '../../redux/actions';\nimport { getOrDownloadFunctionalities, getOrDownloadMonitoredEvents, getOrDownloadMonitoredVariables } from '../../utils/digitalTwins';\nimport { useMountEffect } from '../../utils/main';\nimport { Navigator } from '../templates/Navigator/Navigator';\nimport { useStore } from '../templates/Store/Store';\nimport { JPTable } from '../templates/Table/JPTable';\nimport { FunctionalityForm } from './FunctionalityForm';\nimport { SocketConnection, SOCKET_EVENT } from '../../services/socket/socket';\nimport { Visibility } from '@material-ui/icons';\nimport { useSmartComponentStyles } from '../SmartComponents/style'; //Esta página pretende dispor informação mais detalhada da funcionalidade correspondente disponível na página \"DigitalTwinMonitoring\"\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const FunctionalityDetails = () => {\n  _s();\n\n  //Recupera o id da funcionalidade seleccionada anteriormente na página Digital Twin Monitoring\n  const matchParams = useRouteMatch();\n  const id = matchParams.params.id; // Recuperar da base de dados as variáveis que estão a ser monitorizadas (MonitoredVariable)\n\n  const [fetching, setFetching] = useState(true);\n  const [error, setError] = useState('');\n  const {\n    data: monitoredVariables,\n    dispatchAction: dispatchMonitoredVariableActions\n  } = useStore('monitoredVariables');\n\n  const updateMonitoredVariables = monVar => dispatchMonitoredVariableActions(MonitoredVariableActions.updateMonitoredVariable(monVar));\n\n  const [selectedMonitoredVariable, setSelectedMonitoredVariable] = useState([]);\n\n  const initializeMonitoredVariable = monVars => {\n    let monitoredVariable = monVars.filter(monVar => monVar.funcIdAssociated === parseInt(id));\n    setSelectedMonitoredVariable(monitoredVariable);\n  };\n\n  useMountEffect(() => {\n    setFetching(true);\n    getOrDownloadMonitoredVariables(monitoredVariables).then(result => {\n      updateMonitoredVariables(result);\n      initializeMonitoredVariable(result);\n    }).catch(e => {\n      setError(e.msg);\n    }).finally(() => setFetching(false));\n  }); // Recuperar da base de dados os eventos que estão a ser monitorizados (MonitoredEvent)\n\n  const {\n    data: monitoredEvents,\n    dispatchAction: dispatchMonitoredEventActions\n  } = useStore('monitoredEvents');\n\n  const updateMonitoredEvents = monEv => dispatchMonitoredEventActions(MonitoredEventActions.updateMonitoredEvent(monEv));\n\n  const [selectedMonitoredEvent, setSelectedMonitoredEvent] = useState([]);\n\n  const initializeMonitoredEvent = monEvs => {\n    let monitoredEvent = monEvs.filter(monEv => monEv.funcIdAssociated === parseInt(id));\n    setSelectedMonitoredEvent(monitoredEvent);\n  };\n\n  useMountEffect(() => {\n    setFetching(true);\n    getOrDownloadMonitoredEvents(monitoredEvents).then(result => {\n      updateMonitoredEvents(result);\n      initializeMonitoredEvent(result);\n    }).catch(e => {\n      setError(e.msg);\n    }).finally(() => setFetching(false));\n  }); //Cabeçalhos da tabela Variable + Funções Necessárias\n\n  const indexes_variable = [{\n    label: 'Variable',\n    key: 'monitoredVariableName'\n  }, {\n    label: 'Function Block',\n    key: 'fbAssociated'\n  }, {\n    label: 'Smart Component',\n    key: 'scAssociated'\n  }, {\n    label: 'Current Value',\n    key: 'state'\n  }, //{label: 'Graph', key: 'dtName'},\n  {\n    label: 'Remove',\n    key: 'dtName'\n  }];\n\n  const getDataMonitoredVariable = () => selectedMonitoredVariable.map(monitoredVariable => {\n    return { ...monitoredVariable\n    };\n  }); //Cabeçalhos da tabela Event + Funções Necessárias\n\n\n  const indexes_event = [{\n    label: 'Event',\n    key: 'monitoredEventName'\n  }, {\n    label: 'Function Block',\n    key: 'fbAssociated'\n  }, {\n    label: 'Smart Component',\n    key: 'scAssociated'\n  }, {\n    label: 'Trigger',\n    key: 'dtName'\n  }, {\n    label: 'Current Value',\n    key: 'sc.scState'\n  }, //{label: 'Graph', key: 'dtName'},\n  {\n    label: 'Remove',\n    key: 'dtName'\n  }];\n\n  const getDataMonitoredEvent = () => selectedMonitoredEvent.map(monitoredEvent => {\n    return { ...monitoredEvent\n    };\n  }); //Variáveis e funções que permitem o redireccionamento para a página DigitalTwinMonitoring\n\n\n  const [redirectTo, setRedirectTo] = useState(\"\");\n\n  const redirectToList = () => setRedirectTo(routes.digitalTwinMonitoring); // Recuperar da base de dados as funcionalidades (Functionality)\n\n\n  const {\n    data: functionalities,\n    dispatchAction: dispatchFunctionalityActions\n  } = useStore('functionalities');\n\n  const updateFunctionalities = funcs => dispatchFunctionalityActions(FunctionalityActions.updateFunctionalities(funcs));\n\n  useMountEffect(() => {\n    setTimeout(() => {\n      setFetching(true);\n      getOrDownloadFunctionalities(functionalities).then(result => updateFunctionalities(result)).catch(e => setError(e.msg)).finally(() => setFetching(false));\n    }, 0);\n  }); //Recuperar dados da funcionalidade\n\n  let [functionalityName, setFunctionalityName] = useState([]);\n  let i = 0;\n\n  while (i < functionalities.length) {\n    if (functionalities[i].funcId == id) {\n      functionalityName = functionalities[i].funcName;\n    }\n\n    i++;\n  } //Recuperar dos sockets a info da MonitoredVariableInstance \n  // let id_sc = 2\n  // const socket : SocketConnection = new SocketConnection(SocketConnection.getSmartComponentNamespace(id_sc))\n  // const [smartComponentMonVarInstances,setSmartComponentMonVarInstances] : [MonitoredVariableInstance[],Function] = useState([])\n  // const [initialData,setInititalData] = useState(false)\n  // const onInitialData = (data:SmartComponent) => {\n  //     updateSmartComponent({sc: data})\n  //     updateSmartComponentMonitoredVariableInstances(data.monitoredVariableInstances ?? [])\n  //     setInititalData(true)\n  // } \n  // const [smartComponentName,setSmartComponentName] : [string,Function] = useState('')\n  // const [smartComponentState,setSmartComponentState] : [string,Function] = useState('')\n  // const [smartComponentType,setSmartComponentType] : [string,Function] = useState('')\n  // const updateSmartComponentMonitoredVariableInstances = (instances: MonitoredVariableInstance[]) => {\n  //     setSmartComponentMonVarInstances(instances)\n  // }\n  // const updateSmartComponent = (data: any) => {\n  //     const sc : SmartComponent = data.sc\n  //     if(smartComponentName !== sc.scName)\n  //         setSmartComponentName(sc.scName)\n  //     if(smartComponentState !== sc.scState)\n  //         setSmartComponentState(sc.scState)\n  //     if(smartComponentType !== sc.scType)\n  //         setSmartComponentType(sc.scType)\n  // }\n  // useMountEffect(() => {\n  //     setTimeout(() => {\n  //         socket.connect(()=>{}, () => {},onInitialData)\n  //         socket.addListener(SOCKET_EVENT.UPDATED_SC_EVENT,updateSmartComponent)\n  //         socket.addListener(SOCKET_EVENT.EDITED_MVI_EVENT,updateSmartComponentMonitoredVariableInstances)\n  //     }\n  //     ,0)\n  // }, () => socket?.disconnect())\n\n\n  const socket = new SocketConnection(SocketConnection.getSmartComponentsNamespace());\n  const [smartComponents, setSmartComponents] = useState([]);\n  const classes = useSmartComponentStyles();\n\n  const updateSmartObjects = scs => setSmartComponents(getComponentsWithStateData(scs));\n\n  const updateSmartComponent = sc => {\n    setSmartComponents(prevComponents => {\n      let newSc = true;\n      const newComponents = getComponentsWithStateData(prevComponents.map(oSc => {\n        if (oSc.scId === sc.scId) {\n          newSc = false;\n          return sc;\n        }\n\n        return oSc;\n      }));\n      if (newSc) return [...prevComponents, addStateAndDetialData(sc)];\n      return newComponents;\n    });\n  };\n\n  const getComponentsWithStateData = scs => {\n    return scs.map(sc => addStateAndDetialData(sc));\n  };\n\n  const addStateAndDetialData = sc => {\n    return { ...sc,\n      state: {\n        key: sc.scState,\n        data: /*#__PURE__*/_jsxDEV(Box, {\n          className: `${classes.onLineState} ${sc.scState === 'connected' ? classes.onLineStateOn : classes.onLineStateOff}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 27\n        }, this)\n      },\n      detail: {\n        key: 'detail',\n        data: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"text\",\n          size: \"small\",\n          children: /*#__PURE__*/_jsxDEV(Visibility, {\n            fontSize: \"small\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 63\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 27\n        }, this)\n      }\n    };\n  };\n\n  const onInitialData = data => {\n    updateSmartObjects(data.result);\n    setFetching(false);\n  };\n\n  const onDisconnect = () => {\n    setError(\"Server error\");\n    setFetching(false);\n    setSmartComponents([]);\n  };\n\n  useMountEffect(() => {\n    setTimeout(() => {\n      socket.connect(() => {}, onDisconnect, onInitialData);\n      socket.addListener(SOCKET_EVENT.UPDATED_SC_EVENT, data => updateSmartComponent(data.sc));\n    }, 0);\n  }, () => socket === null || socket === void 0 ? void 0 : socket.disconnect());\n  if (redirectTo !== \"\") return /*#__PURE__*/_jsxDEV(Redirect, {\n    to: redirectTo,\n    push: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 298,\n    columnNumber: 12\n  }, this);\n  return /*#__PURE__*/_jsxDEV(Navigator, {\n    title: \"Digital Twin monitoring\",\n    children: /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n            title: functionalityName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 305,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 306,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              children: /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                children: /*#__PURE__*/_jsxDEV(JPTable, {\n                  sortedkey: \"idMonitoredVariable\",\n                  data: getDataMonitoredVariable(),\n                  updateData: updateMonitoredVariables,\n                  indexes: indexes_variable,\n                  tName: \"MonitoredVariable\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 310,\n                  columnNumber: 33\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 309,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 308,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 307,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              children: /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                children: /*#__PURE__*/_jsxDEV(JPTable, {\n                  sortedkey: \"idMonitoredEvent\",\n                  data: getDataMonitoredEvent(),\n                  updateData: updateMonitoredEvents,\n                  indexes: indexes_event,\n                  tName: \"MonitoredEvent\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 323,\n                  columnNumber: 33\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 322,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 321,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 320,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FunctionalityForm, {\n        cancel: {\n          action: redirectToList,\n          label: 'Cancel'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 301,\n    columnNumber: 5\n  }, this);\n};\n\n_s(FunctionalityDetails, \"CksS9/xcBFzXS3jjy78G+35XPDw=\", false, function () {\n  return [useRouteMatch, useStore, useMountEffect, useStore, useMountEffect, useStore, useMountEffect, useSmartComponentStyles, useMountEffect];\n});\n\n_c = FunctionalityDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"FunctionalityDetails\");","map":{"version":3,"sources":["/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/DigitalTwin/FunctionalityDetails.tsx"],"names":["Box","Button","Card","CardContent","CardHeader","Divider","Grid","React","useState","Redirect","useRouteMatch","routes","FunctionalityActions","MonitoredEventActions","MonitoredVariableActions","getOrDownloadFunctionalities","getOrDownloadMonitoredEvents","getOrDownloadMonitoredVariables","useMountEffect","Navigator","useStore","JPTable","FunctionalityForm","SocketConnection","SOCKET_EVENT","Visibility","useSmartComponentStyles","FunctionalityDetails","matchParams","id","params","fetching","setFetching","error","setError","data","monitoredVariables","dispatchAction","dispatchMonitoredVariableActions","updateMonitoredVariables","monVar","updateMonitoredVariable","selectedMonitoredVariable","setSelectedMonitoredVariable","initializeMonitoredVariable","monVars","monitoredVariable","filter","funcIdAssociated","parseInt","then","result","catch","e","msg","finally","monitoredEvents","dispatchMonitoredEventActions","updateMonitoredEvents","monEv","updateMonitoredEvent","selectedMonitoredEvent","setSelectedMonitoredEvent","initializeMonitoredEvent","monEvs","monitoredEvent","indexes_variable","label","key","getDataMonitoredVariable","map","indexes_event","getDataMonitoredEvent","redirectTo","setRedirectTo","redirectToList","digitalTwinMonitoring","functionalities","dispatchFunctionalityActions","updateFunctionalities","funcs","setTimeout","functionalityName","setFunctionalityName","i","length","funcId","funcName","socket","getSmartComponentsNamespace","smartComponents","setSmartComponents","classes","updateSmartObjects","scs","getComponentsWithStateData","updateSmartComponent","sc","prevComponents","newSc","newComponents","oSc","scId","addStateAndDetialData","state","scState","onLineState","onLineStateOn","onLineStateOff","detail","onInitialData","onDisconnect","connect","addListener","UPDATED_SC_EVENT","disconnect","action"],"mappings":"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","sourcesContent":["import { Box, Button, Card, CardContent, CardHeader, Divider, Grid } from '@material-ui/core'\r\nimport React, { useState } from 'react'\r\nimport { match, Redirect, useRouteMatch } from 'react-router-dom'\r\nimport { routes } from '../../App'\r\nimport { FbInstance, Functionality, MonitoredEvent, MonitoredVariable, MonitoredVariableInstance, SmartComponent } from '../../model'\r\nimport { FunctionalityActions, MonitoredEventActions, MonitoredVariableActions, SmartComponentActions } from '../../redux/actions'\r\nimport { RequestResponseState } from '../../services/api/api'\r\nimport { getOrDownloadFunctionalities, getOrDownloadMonitoredEvents, getOrDownloadMonitoredVariables } from '../../utils/digitalTwins'\r\nimport { useMountEffect } from '../../utils/main'\r\nimport { Navigator } from '../templates/Navigator/Navigator'\r\nimport { useStore } from '../templates/Store/Store'\r\nimport { JPTable } from '../templates/Table/JPTable'\r\nimport { FunctionalityForm } from './FunctionalityForm'\r\nimport { SocketConnection, SOCKET_EVENT } from '../../services/socket/socket'\r\nimport { Visibility } from '@material-ui/icons'\r\nimport { useSmartComponentStyles } from '../SmartComponents/style'\r\n\r\n//Esta página pretende dispor informação mais detalhada da funcionalidade correspondente disponível na página \"DigitalTwinMonitoring\"\r\n\r\ninterface SmartComponentWithDataState extends SmartComponent {\r\n    state: {\r\n        key:string | undefined\r\n        data: React.ReactElement\r\n    },\r\n    detail: {\r\n        key: 'detail'\r\n        data: React.ReactElement\r\n    }\r\n}\r\n\r\n\r\nexport const FunctionalityDetails = () => {\r\n\r\n    //Recupera o id da funcionalidade seleccionada anteriormente na página Digital Twin Monitoring\r\n    const matchParams : match = useRouteMatch()\r\n    const id = (matchParams.params as any).id\r\n\r\n    // Recuperar da base de dados as variáveis que estão a ser monitorizadas (MonitoredVariable)\r\n    const [fetching,setFetching] = useState(true)\r\n    const [error,setError] = useState('')\r\n    const {data: monitoredVariables, dispatchAction: dispatchMonitoredVariableActions} = useStore('monitoredVariables')\r\n    const updateMonitoredVariables = (monVar: MonitoredVariable[]) => dispatchMonitoredVariableActions(MonitoredVariableActions.updateMonitoredVariable(monVar))\r\n\r\n    const [selectedMonitoredVariable, setSelectedMonitoredVariable] : [MonitoredVariable[], Function] = useState([])\r\n\r\n    const initializeMonitoredVariable = (monVars: MonitoredVariable[]) => {\r\n        \r\n        let monitoredVariable : MonitoredVariable[] = monVars.filter((monVar) => monVar.funcIdAssociated === parseInt(id))\r\n        \r\n        setSelectedMonitoredVariable(monitoredVariable)\r\n\r\n    }\r\n\r\n    useMountEffect(() => {\r\n\r\n        setFetching(true)\r\n        getOrDownloadMonitoredVariables(monitoredVariables)\r\n            .then((result: MonitoredVariable[]) => {\r\n                updateMonitoredVariables(result)\r\n                initializeMonitoredVariable(result)\r\n            })\r\n            .catch((e:RequestResponseState) => {\r\n                setError(e.msg)\r\n            })\r\n            .finally(() => setFetching(false))\r\n\r\n    })\r\n\r\n    // Recuperar da base de dados os eventos que estão a ser monitorizados (MonitoredEvent)\r\n    const {data: monitoredEvents, dispatchAction: dispatchMonitoredEventActions} = useStore('monitoredEvents')\r\n    const updateMonitoredEvents = (monEv: MonitoredEvent[]) => dispatchMonitoredEventActions(MonitoredEventActions.updateMonitoredEvent(monEv))\r\n\r\n    const [selectedMonitoredEvent, setSelectedMonitoredEvent] : [MonitoredEvent[], Function] = useState([])\r\n    \r\n    const initializeMonitoredEvent = (monEvs: MonitoredEvent[]) => {\r\n            \r\n        let monitoredEvent : MonitoredEvent[] = monEvs.filter((monEv) => monEv.funcIdAssociated === parseInt(id))\r\n            \r\n        setSelectedMonitoredEvent(monitoredEvent)\r\n    \r\n    }\r\n    \r\n    useMountEffect(() => {\r\n    \r\n        setFetching(true)\r\n        getOrDownloadMonitoredEvents(monitoredEvents)\r\n            .then((result: MonitoredEvent[]) => {\r\n                updateMonitoredEvents(result)\r\n                initializeMonitoredEvent(result)\r\n            })\r\n            .catch((e:RequestResponseState) => {\r\n                setError(e.msg)\r\n            })\r\n            .finally(() => setFetching(false))\r\n    \r\n    })\r\n    \r\n    //Cabeçalhos da tabela Variable + Funções Necessárias\r\n    const indexes_variable = [\r\n        {label: 'Variable', key: 'monitoredVariableName'},\r\n        {label: 'Function Block', key: 'fbAssociated'},\r\n        {label: 'Smart Component', key: 'scAssociated'},\r\n        {label: 'Current Value', key: 'state'},\r\n        //{label: 'Graph', key: 'dtName'},\r\n        {label: 'Remove', key: 'dtName'},\r\n    ]\r\n\r\n    const getDataMonitoredVariable = () =>  selectedMonitoredVariable.map((monitoredVariable: MonitoredVariable) => {    \r\n        \r\n        return {\r\n            ...monitoredVariable\r\n        }\r\n\r\n    })\r\n\r\n    //Cabeçalhos da tabela Event + Funções Necessárias\r\n    const indexes_event = [\r\n        {label: 'Event', key: 'monitoredEventName'},\r\n        {label: 'Function Block', key: 'fbAssociated'},\r\n        {label: 'Smart Component', key: 'scAssociated'},\r\n        {label: 'Trigger', key: 'dtName'},\r\n        {label: 'Current Value', key: 'sc.scState'},\r\n        //{label: 'Graph', key: 'dtName'},\r\n        {label: 'Remove', key: 'dtName'},\r\n    ]\r\n\r\n    const getDataMonitoredEvent = () =>  selectedMonitoredEvent.map((monitoredEvent: MonitoredEvent) => {    \r\n        \r\n        return {\r\n            ...monitoredEvent\r\n        }\r\n\r\n    })\r\n\r\n    //Variáveis e funções que permitem o redireccionamento para a página DigitalTwinMonitoring\r\n    const [redirectTo, setRedirectTo] : [string, Function] = useState(\"\")\r\n\r\n    const redirectToList = () => setRedirectTo(routes.digitalTwinMonitoring)\r\n\r\n    // Recuperar da base de dados as funcionalidades (Functionality)\r\n    const {data:functionalities, dispatchAction:dispatchFunctionalityActions} = useStore('functionalities')\r\n    const updateFunctionalities = (funcs: Functionality[]) => dispatchFunctionalityActions(FunctionalityActions.updateFunctionalities(funcs))\r\n\r\n    useMountEffect(() => {\r\n\r\n    setTimeout(() => {\r\n\r\n    setFetching(true)\r\n    getOrDownloadFunctionalities(functionalities)\r\n        .then((result: Functionality[]) => updateFunctionalities(result))\r\n        .catch((e:RequestResponseState) => setError(e.msg))\r\n        .finally(() => setFetching(false))\r\n    }, 0)\r\n    })\r\n\r\n    //Recuperar dados da funcionalidade\r\n    let [functionalityName, setFunctionalityName] : [Functionality[], Function] = useState([])\r\n\r\n    let i = 0;\r\n    while(i < functionalities.length){\r\n\r\n        if(functionalities[i].funcId == id) {\r\n          functionalityName = functionalities[i].funcName\r\n        }\r\n        i++\r\n    }\r\n\r\n    //Recuperar dos sockets a info da MonitoredVariableInstance \r\n\r\n    // let id_sc = 2\r\n    // const socket : SocketConnection = new SocketConnection(SocketConnection.getSmartComponentNamespace(id_sc))\r\n    // const [smartComponentMonVarInstances,setSmartComponentMonVarInstances] : [MonitoredVariableInstance[],Function] = useState([])\r\n\r\n    // const [initialData,setInititalData] = useState(false)\r\n\r\n    // const onInitialData = (data:SmartComponent) => {\r\n    \r\n    //     updateSmartComponent({sc: data})\r\n    //     updateSmartComponentMonitoredVariableInstances(data.monitoredVariableInstances ?? [])\r\n    //     setInititalData(true)\r\n    // } \r\n    \r\n    // const [smartComponentName,setSmartComponentName] : [string,Function] = useState('')\r\n    // const [smartComponentState,setSmartComponentState] : [string,Function] = useState('')\r\n    // const [smartComponentType,setSmartComponentType] : [string,Function] = useState('')\r\n\r\n\r\n    // const updateSmartComponentMonitoredVariableInstances = (instances: MonitoredVariableInstance[]) => {\r\n\r\n    //     setSmartComponentMonVarInstances(instances)\r\n\r\n    // }\r\n\r\n    // const updateSmartComponent = (data: any) => {\r\n    \r\n    //     const sc : SmartComponent = data.sc\r\n      \r\n    //     if(smartComponentName !== sc.scName)\r\n    //         setSmartComponentName(sc.scName)\r\n    //     if(smartComponentState !== sc.scState)\r\n    //         setSmartComponentState(sc.scState)\r\n    //     if(smartComponentType !== sc.scType)\r\n    //         setSmartComponentType(sc.scType)\r\n    // }\r\n    \r\n    // useMountEffect(() => {\r\n        \r\n    //     setTimeout(() => {\r\n            \r\n    //         socket.connect(()=>{}, () => {},onInitialData)\r\n    //         socket.addListener(SOCKET_EVENT.UPDATED_SC_EVENT,updateSmartComponent)\r\n    //         socket.addListener(SOCKET_EVENT.EDITED_MVI_EVENT,updateSmartComponentMonitoredVariableInstances)\r\n\r\n    //     }\r\n    //     ,0)\r\n\r\n    // }, () => socket?.disconnect())\r\n\r\n    const socket : SocketConnection = new SocketConnection(SocketConnection.getSmartComponentsNamespace())\r\n    \r\n    const [smartComponents,setSmartComponents] : [SmartComponentWithDataState[],Function] = useState([])\r\n\r\n    const classes = useSmartComponentStyles()\r\n\r\n    const updateSmartObjects = (scs:SmartComponent[]) => setSmartComponents(getComponentsWithStateData(scs))\r\n\r\n    const updateSmartComponent = (sc: SmartComponent) => {\r\n\r\n        setSmartComponents((prevComponents: SmartComponentWithDataState[]) => {\r\n\r\n            let newSc = true\r\n\r\n            const newComponents = getComponentsWithStateData(prevComponents.map((oSc:SmartComponentWithDataState) => {\r\n\r\n                if(oSc.scId === sc.scId) {\r\n                    newSc = false\r\n                    return sc\r\n                }\r\n                return oSc\r\n\r\n            }))\r\n\r\n            if(newSc)\r\n                return [...prevComponents, addStateAndDetialData(sc)]\r\n            return newComponents\r\n\r\n        })\r\n    }\r\n\r\n    const getComponentsWithStateData = (scs: SmartComponent[]) : SmartComponentWithDataState[] => {\r\n\r\n        return scs.map((sc:SmartComponent) => addStateAndDetialData(sc))\r\n\r\n    }\r\n\r\n    const addStateAndDetialData = (sc: SmartComponent) : SmartComponentWithDataState => {\r\n\r\n        return (\r\n            {\r\n                ...sc, \r\n                state:  {\r\n                    key: sc.scState,\r\n                    data: <Box className= {`${classes.onLineState} ${sc.scState === 'connected' ? classes.onLineStateOn : classes.onLineStateOff}`}/>\r\n                },\r\n                detail: {\r\n                    key: 'detail',\r\n                    data: <Button variant=\"text\" size=\"small\"><Visibility fontSize=\"small\"/></Button> \r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    const onInitialData = (data:any) => {\r\n        updateSmartObjects(data.result)\r\n        setFetching(false)\r\n    } \r\n\r\n\r\n    const onDisconnect = () => {\r\n        setError(\"Server error\")\r\n        setFetching(false)\r\n        setSmartComponents([])\r\n    }\r\n\r\n\r\n    useMountEffect(() => {\r\n\r\n        setTimeout(() => {\r\n\r\n            socket.connect(() => {}, onDisconnect, onInitialData)\r\n            socket.addListener(SOCKET_EVENT.UPDATED_SC_EVENT, (data) => updateSmartComponent(data.sc))\r\n\r\n        }, 0)\r\n\r\n    }, () => socket?.disconnect())\r\n\r\n    if(redirectTo !== \"\") \r\n    return <Redirect to={redirectTo} push={true} />\r\n\r\n    return(\r\n    <Navigator title=\"Digital Twin monitoring\">\r\n    <>\r\n        <Grid item>\r\n            <Card>\r\n                <CardHeader title={functionalityName} />\r\n                <Divider />\r\n                    <CardContent>\r\n                        <Grid item xs={12}>        \r\n                            <Grid item>\r\n                                <JPTable\r\n                                    sortedkey=\"idMonitoredVariable\"\r\n                                    data={getDataMonitoredVariable()} \r\n                                    updateData={updateMonitoredVariables} \r\n                                    indexes={indexes_variable} \r\n                                    tName='MonitoredVariable'\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                    </CardContent>\r\n                    <CardContent>\r\n                        <Grid item xs={12}>        \r\n                            <Grid item>\r\n                                <JPTable\r\n                                    sortedkey=\"idMonitoredEvent\"\r\n                                    data={getDataMonitoredEvent()} \r\n                                    updateData={updateMonitoredEvents} \r\n                                    indexes={indexes_event} \r\n                                    tName='MonitoredEvent'\r\n                                />\r\n                            </Grid>\r\n                            \r\n                        </Grid>\r\n                    </CardContent>\r\n            </Card>\r\n        </Grid>\r\n        <FunctionalityForm\r\n            cancel={{action: redirectToList, label: 'Cancel'}}\r\n        />\r\n    </>\r\n    </Navigator>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}