{"ast":null,"code":"var _jsxFileName = \"/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/components/templates/ConfirmAction/ConfirmAction.tsx\";\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { Dialog, Button, Grid, DialogTitle, CircularProgress, Typography } from '@material-ui/core';\nimport { useDialogStyles } from './style';\nimport { Error, CheckCircle } from '@material-ui/icons';\nexport let ConfirmActionStateLabel;\n\n(function (ConfirmActionStateLabel) {\n  ConfirmActionStateLabel[ConfirmActionStateLabel[\"start\"] = 0] = \"start\";\n  ConfirmActionStateLabel[ConfirmActionStateLabel[\"executing\"] = 1] = \"executing\";\n  ConfirmActionStateLabel[ConfirmActionStateLabel[\"success\"] = 2] = \"success\";\n  ConfirmActionStateLabel[ConfirmActionStateLabel[\"error\"] = 3] = \"error\";\n})(ConfirmActionStateLabel || (ConfirmActionStateLabel = {}));\n\nexport const ConfirmAction = React.memo(props => {\n  const [state, setState] = useState({ ...props.currentState\n  });\n  const stateCode = state.state;\n  const classes = useDialogStyles();\n  const {\n    action,\n    onCancel,\n    onSuccess,\n    onError,\n    states\n  } = props;\n  const updateState = useCallback((success = true, msg) => {\n    switch (stateCode) {\n      case ConfirmActionStateLabel.start:\n        setState({ ...states.executing\n        });\n        break;\n\n      case ConfirmActionStateLabel.executing:\n        if (!success) {\n          if (!!states.error) {\n            setState({ ...states.error,\n              label: msg\n            });\n          } else onCancel();\n        } else {\n          if (!!states.success) {\n            setState({ ...states.success,\n              label: msg\n            });\n          } else onCancel();\n        }\n\n        break;\n\n      case ConfirmActionStateLabel.success:\n        if (onSuccess) {\n          onSuccess();\n        }\n\n        onCancel();\n        break;\n\n      case ConfirmActionStateLabel.error:\n        if (onError) onError();\n        onCancel();\n        break;\n    }\n  }, [stateCode, onCancel, onSuccess, onError, states]);\n  const execute = useCallback(() => {\n    if (!action) return;\n    action().then(result => updateState(true, result)).catch(error => updateState(false, error));\n  }, [action, updateState]);\n  useEffect(() => {\n    if (stateCode === ConfirmActionStateLabel.executing) {\n      execute();\n    }\n  });\n  const updateStateButtonAction = useCallback(() => updateState(), [updateState]);\n  return /*#__PURE__*/React.createElement(Dialog, {\n    open: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(DialogTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }\n  }, props.title), /*#__PURE__*/React.createElement(Grid, {\n    className: classes.box,\n    container: true,\n    direction: \"column\",\n    justify: \"center\",\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }\n  }, state.state === ConfirmActionStateLabel.executing ? /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(CircularProgress, {\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 29\n    }\n  })) : null, state.state !== ConfirmActionStateLabel.executing ? /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    container: true,\n    direction: \"row\",\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 25\n    }\n  }, state.state === ConfirmActionStateLabel.error ? /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(Error, {\n    color: \"error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 41\n    }\n  })) : state.state === ConfirmActionStateLabel.success ? /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(CheckCircle, {\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 45\n    }\n  })) : null, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 37\n    }\n  }, state.label))) : null), /*#__PURE__*/React.createElement(Grid, {\n    className: classes.buttons,\n    container: true,\n    direction: \"row\",\n    justify: \"space-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 13\n    }\n  }, state.positiveLabel ? /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: updateStateButtonAction,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 25\n    }\n  }, state.positiveLabel)) : null, state.negativeLabel ? /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: props.onCancel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 25\n    }\n  }, state.negativeLabel)) : null));\n});","map":{"version":3,"sources":["/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/components/templates/ConfirmAction/ConfirmAction.tsx"],"names":["React","useState","useEffect","useCallback","Dialog","Button","Grid","DialogTitle","CircularProgress","Typography","useDialogStyles","Error","CheckCircle","ConfirmActionStateLabel","ConfirmAction","memo","props","state","setState","currentState","stateCode","classes","action","onCancel","onSuccess","onError","states","updateState","success","msg","start","executing","error","label","execute","then","result","catch","updateStateButtonAction","title","box","buttons","positiveLabel","negativeLabel"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,WAArC,QAAwD,OAAxD;AACA,SAASC,MAAT,EAAiBC,MAAjB,EAAyBC,IAAzB,EAA+BC,WAA/B,EAA4CC,gBAA5C,EAA8DC,UAA9D,QAAgF,mBAAhF;AACA,SAASC,eAAT,QAAgC,SAAhC;AACA,SAASC,KAAT,EAAgBC,WAAhB,QAAmC,oBAAnC;AAEA,WAAYC,uBAAZ;;WAAYA,uB;AAAAA,EAAAA,uB,CAAAA,uB;AAAAA,EAAAA,uB,CAAAA,uB;AAAAA,EAAAA,uB,CAAAA,uB;AAAAA,EAAAA,uB,CAAAA,uB;GAAAA,uB,KAAAA,uB;;AA8BZ,OAAO,MAAMC,aAAa,GAAGd,KAAK,CAACe,IAAN,CAAYC,KAAD,IAA+B;AAEnE,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAqDjB,QAAQ,CAAC,EAAC,GAAGe,KAAK,CAACG;AAAV,GAAD,CAAnE;AAEA,QAAMC,SAAS,GAAGH,KAAK,CAACA,KAAxB;AAEA,QAAMI,OAAO,GAAGX,eAAe,EAA/B;AAEA,QAAM;AAACY,IAAAA,MAAD;AAAQC,IAAAA,QAAR;AAAiBC,IAAAA,SAAjB;AAA2BC,IAAAA,OAA3B;AAAmCC,IAAAA;AAAnC,MAA6CV,KAAnD;AAEA,QAAMW,WAAW,GAAGxB,WAAW,CAAC,CAACyB,OAAgB,GAAG,IAApB,EAA0BC,GAA1B,KAA2C;AAEvE,YAAOT,SAAP;AAEI,WAAKP,uBAAuB,CAACiB,KAA7B;AACIZ,QAAAA,QAAQ,CAAC,EAAC,GAAGQ,MAAM,CAACK;AAAX,SAAD,CAAR;AACA;;AACJ,WAAKlB,uBAAuB,CAACkB,SAA7B;AAEI,YAAG,CAACH,OAAJ,EAAa;AACT,cAAG,CAAC,CAACF,MAAM,CAACM,KAAZ,EAAmB;AACfd,YAAAA,QAAQ,CAAC,EAAC,GAAGQ,MAAM,CAACM,KAAX;AAAkBC,cAAAA,KAAK,EAAEJ;AAAzB,aAAD,CAAR;AACH,WAFD,MAIIN,QAAQ;AACf,SAND,MAQK;AAED,cAAG,CAAC,CAACG,MAAM,CAACE,OAAZ,EAAqB;AACjBV,YAAAA,QAAQ,CAAC,EAAC,GAAGQ,MAAM,CAACE,OAAX;AAAoBK,cAAAA,KAAK,EAAEJ;AAA3B,aAAD,CAAR;AACH,WAFD,MAIIN,QAAQ;AAEf;;AAED;;AACJ,WAAKV,uBAAuB,CAACe,OAA7B;AACI,YAAGJ,SAAH,EAAc;AACVA,UAAAA,SAAS;AACZ;;AACDD,QAAAA,QAAQ;AACR;;AACJ,WAAKV,uBAAuB,CAACmB,KAA7B;AACI,YAAGP,OAAH,EAAYA,OAAO;AACnBF,QAAAA,QAAQ;AACR;AAnCR;AAuCH,GAzC8B,EAyC5B,CAACH,SAAD,EAAWG,QAAX,EAAoBC,SAApB,EAA8BC,OAA9B,EAAsCC,MAAtC,CAzC4B,CAA/B;AA2CA,QAAMQ,OAAO,GAAG/B,WAAW,CAAC,MAAM;AAE9B,QAAG,CAACmB,MAAJ,EACI;AAEJA,IAAAA,MAAM,GAEDa,IAFL,CAEUC,MAAM,IAAIT,WAAW,CAAC,IAAD,EAAMS,MAAN,CAF/B,EAIKC,KAJL,CAIWL,KAAK,IAAIL,WAAW,CAAC,KAAD,EAAOK,KAAP,CAJ/B;AAMH,GAX0B,EAWxB,CAACV,MAAD,EAASK,WAAT,CAXwB,CAA3B;AAaAzB,EAAAA,SAAS,CAAC,MAAM;AAEZ,QAAGkB,SAAS,KAAKP,uBAAuB,CAACkB,SAAzC,EAAoD;AAChDG,MAAAA,OAAO;AACV;AAEJ,GANQ,CAAT;AAQA,QAAMI,uBAAuB,GAAGnC,WAAW,CAAC,MAAMwB,WAAW,EAAlB,EAAqB,CAACA,WAAD,CAArB,CAA3C;AAEA,sBAEI,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAE,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAcX,KAAK,CAACuB,KAApB,CADJ,eAEI,oBAAC,IAAD;AAAM,IAAA,SAAS,EAAElB,OAAO,CAACmB,GAAzB;AAA8B,IAAA,SAAS,MAAvC;AAAwC,IAAA,SAAS,EAAC,QAAlD;AAA2D,IAAA,OAAO,EAAC,QAAnE;AAA4E,IAAA,UAAU,EAAC,QAAvF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKvB,KAAK,CAACA,KAAN,KAAgBJ,uBAAuB,CAACkB,SAAxC,gBAEO,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,gBAAD;AAAkB,IAAA,KAAK,EAAC,SAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAFP,GAKO,IANZ,EAQKd,KAAK,CAACA,KAAN,KAAgBJ,uBAAuB,CAACkB,SAAxC,gBAEO,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,SAAS,MAApB;AAAqB,IAAA,SAAS,EAAC,KAA/B;AAAqC,IAAA,OAAO,EAAC,QAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKd,KAAK,CAACA,KAAN,KAAgBJ,uBAAuB,CAACmB,KAAxC,gBAEO,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,KAAD;AAAO,IAAA,KAAK,EAAC,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAFP,GAMKf,KAAK,CAACA,KAAN,KAAgBJ,uBAAuB,CAACe,OAAxC,gBAEM,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,WAAD;AAAa,IAAA,KAAK,EAAC,SAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAFN,GAMM,IAbhB,eAeQ,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,UAAD;AAAY,IAAA,KAAK,EAAC,SAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKX,KAAK,CAACgB,KADX,CADJ,CAfR,CAFP,GAuBK,IA/BV,CAFJ,eAoCI,oBAAC,IAAD;AAAM,IAAA,SAAS,EAAEZ,OAAO,CAACoB,OAAzB;AAAkC,IAAA,SAAS,MAA3C;AAA4C,IAAA,SAAS,EAAC,KAAtD;AAA4D,IAAA,OAAO,EAAC,eAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKxB,KAAK,CAACyB,aAAN,gBAEG,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAEJ,uBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA2CrB,KAAK,CAACyB,aAAjD,CADJ,CAFH,GAKK,IANV,EAQKzB,KAAK,CAAC0B,aAAN,gBAEG,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAE3B,KAAK,CAACO,QAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAkCN,KAAK,CAAC0B,aAAxC,CADJ,CAFH,GAKK,IAbV,CApCJ,CAFJ;AA2DH,CAvI4B,CAAtB","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react'\nimport { Dialog, Button, Grid, DialogTitle, CircularProgress, Typography } from '@material-ui/core'\nimport { useDialogStyles } from './style'\nimport { Error, CheckCircle } from '@material-ui/icons'\n\nexport enum ConfirmActionStateLabel {start, executing,success, error}\n\nexport type ConfirmActionAction = () => Promise<string>\n\nexport interface ConfirmActionState {\n\n    label?: string\n    state: ConfirmActionStateLabel\n    positiveLabel?: string\n    negativeLabel?: string\n    \n}\n\nexport interface ConfirmActionProps {\n\n    title:string\n    states: {\n        start? : ConfirmActionState\n        executing?: ConfirmActionState\n        success?: ConfirmActionState\n        error?: ConfirmActionState\n    }\n    currentState: ConfirmActionState\n    onCancel: () => void\n    onError?: () => void\n    onSuccess?: () => void\n    action?: ConfirmActionAction\n\n}\n\nexport const ConfirmAction = React.memo((props: ConfirmActionProps) => {\n\n    const [state, setState] : [ConfirmActionState, Function] = useState({...props.currentState})\n\n    const stateCode = state.state\n\n    const classes = useDialogStyles()\n\n    const {action,onCancel,onSuccess,onError,states} = props\n\n    const updateState = useCallback((success: boolean = true, msg?: string) => {\n\n        switch(stateCode) {\n\n            case ConfirmActionStateLabel.start:\n                setState({...states.executing})\n                break\n            case ConfirmActionStateLabel.executing:\n\n                if(!success) {\n                    if(!!states.error) {                        \n                        setState({...states.error, label: msg})\n                    }\n                    else\n                        onCancel()\n                }\n\n                else {\n\n                    if(!!states.success) {                        \n                        setState({...states.success, label: msg})\n                    }\n                    else\n                        onCancel()\n\n                }\n\n                break\n            case ConfirmActionStateLabel.success:\n                if(onSuccess) {\n                    onSuccess()\n                } \n                onCancel()\n                break\n            case ConfirmActionStateLabel.error:\n                if(onError) onError()\n                onCancel()\n                break\n\n        }\n\n    }, [stateCode,onCancel,onSuccess,onError,states])\n\n    const execute = useCallback(() => {\n\n        if(!action)\n            return\n\n        action()\n\n            .then(result => updateState(true,result))\n\n            .catch(error => updateState(false,error))\n    \n    }, [action, updateState])\n\n    useEffect(() => {\n        \n        if(stateCode === ConfirmActionStateLabel.executing) {\n            execute()\n        }\n\n    })\n\n    const updateStateButtonAction = useCallback(() => updateState(),[updateState])\n\n    return (\n\n        <Dialog open={true}>\n            <DialogTitle>{props.title}</DialogTitle>\n            <Grid className={classes.box} container direction=\"column\" justify=\"center\" alignItems=\"center\">\n                {state.state === ConfirmActionStateLabel.executing \n                    ?\n                        <Grid item>\n                            <CircularProgress color=\"primary\" /> \n                        </Grid>\n                    :   null\n                }\n                {state.state !== ConfirmActionStateLabel.executing \n                    ? \n                        <Grid item container direction=\"row\" justify=\"center\">\n                            {state.state === ConfirmActionStateLabel.error \n                                ? \n                                    <Grid item> \n                                        <Error color=\"error\" />\n                                    </Grid>\n\n                                : state.state === ConfirmActionStateLabel.success \n                                    ? \n                                        <Grid item> \n                                            <CheckCircle color=\"primary\" />\n                                        </Grid> \n                                    :\n                                        null\n                                }\n                                <Grid item>\n                                    <Typography color=\"primary\">\n                                        {state.label}\n                                    </Typography>\n                                </Grid>\n                        </Grid>\n                    : null\n                }\n            </Grid>\n            <Grid className={classes.buttons} container direction=\"row\" justify=\"space-between\">\n                {state.positiveLabel\n                    ?\n                    <Grid item>\n                        <Button onClick={updateStateButtonAction}>{state.positiveLabel}</Button>\n                    </Grid>\n                    : null\n                }\n                {state.negativeLabel  \n                    ?\n                    <Grid item>\n                        <Button onClick={props.onCancel}>{state.negativeLabel}</Button>\n                    </Grid>\n                    : null\n                }\n                \n            </Grid>\n        </Dialog>\n\n    )\n\n})"]},"metadata":{},"sourceType":"module"}