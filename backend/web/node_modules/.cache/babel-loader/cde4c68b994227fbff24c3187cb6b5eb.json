{"ast":null,"code":"var _jsxFileName = \"/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/DigitalTwin/FunctionalityDetails.tsx\",\n    _s = $RefreshSig$();\n\nimport { Grid, Typography } from '@material-ui/core';\nimport React, { useState } from 'react';\nimport { Redirect, useRouteMatch } from 'react-router-dom';\nimport { routes } from '../../App';\nimport { FunctionalityActions, MonitoredVariableActions } from '../../redux/actions';\nimport { getOrDownloadFunctionalities, getOrDownloadMonitoredVariables } from '../../utils/digitalTwins';\nimport { useMountEffect } from '../../utils/main';\nimport { Navigator } from '../templates/Navigator/Navigator';\nimport { useStore } from '../templates/Store/Store';\nimport { FunctionalityForm } from './FunctionalityForm'; //Esta página pretende dispor informação mais detalhada da funcionalidade correspondente disponível na página \"DigitalTwinMonitoring\"\n// const MonitoredVariableInstanceList = (props: {fbInstances: any[], update: (instances: any[]) => void}) => {\n//     const classes = useSmartComponentStyles()\n//     return (\n//         <JPTable\n//             data={props.fbInstances.map((i:MonitoredVariable) => {\n//                 return {\n//                     ...i,\n//                     stateData: {\n//                         key: i.idMonitoredVariable,\n//                         data: i.idMonitoredVariable === 1 ? <Settings className={classes.functionBlockGood} /> : <Error className={classes.functionBlockError}/>\n//                     }\n//                 }\n//             })}\n//             indexes={[\n//                 {label: 'Variable', key: 'monitoredVariableName'},\n//                 {label: 'Function Block', key: 'fbAssociated'},\n//                 {label: 'Smart Component', key: 'dtDescription'},\n//                 {label: 'Current Value', key: 'dtMonitoredVariableEvent'},\n//                 {label: 'Graph', key: 'dtName'},\n//                 //{label: 'Remove', key: 'dtName'},\n//             ]}\n//             tName=''\n//             updateData={props.update}\n//             sortedkey='id'\n//         />\n//     )\n// }\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const FunctionalityDetails = () => {\n  _s();\n\n  //Recupera o id da funcionalidade seleccionada anteriormente na página Digital Twin Monitoring\n  const matchParams = useRouteMatch();\n  const id = matchParams.params.id; // Recuperar da base de dados as variáveis que estão a ser monitorizadas (MonitoredVariable)\n\n  const [fetching, setFetching] = useState(true);\n  const [error, setError] = useState('');\n  const {\n    data: monitoredVariables,\n    dispatchAction: dispatchMonitoredVariableActions\n  } = useStore('monitoredVariables');\n\n  const updateMonitoredVariables = monVar => dispatchMonitoredVariableActions(MonitoredVariableActions.updateMonitoredVariable(monVar));\n\n  const [selectedMonitoredVariables, setSelectedMonitoredVariables] = useState([]);\n  useMountEffect(() => {\n    setTimeout(() => {\n      setFetching(true);\n      getOrDownloadMonitoredVariables(monitoredVariables).then(result => updateMonitoredVariables(result)).catch(e => setError(e.msg)).finally(() => setFetching(false));\n    }, 0); // let k = 0\n    // while(k < monitoredVariables.length){\n    //     if(monitoredVariables[k].funcIdAssociated == id){\n    //         updateMonitoredVariablesInstances(monitoredVariables)\n    //         setInititalData(true)\n    //     }\n    //     k++\n    // }\n  }); //Cabeçalhos da tabela + Funções Necessárias\n\n  const indexes = [{\n    label: 'Variable',\n    key: 'monitoredVariableName'\n  }, {\n    label: 'Function Block',\n    key: 'fbAssociated'\n  }, {\n    label: 'Smart Component',\n    key: 'dtDescription'\n  }, {\n    label: 'Current Value',\n    key: 'dtMonitoredVariableEvent'\n  }, {\n    label: 'Graph',\n    key: 'dtName'\n  } //{label: 'Remove', key: 'dtName'},\n  ]; //Variáveis e funções que permitem o redireccionamento para a página DigitalTwinMonitoring\n\n  const [redirectTo, setRedirectTo] = useState(\"\");\n\n  const redirectToList = () => setRedirectTo(routes.digitalTwinMonitoring); // Recuperar da base de dados as funcionalidades (Functionality)\n\n\n  const {\n    data: functionalities,\n    dispatchAction: dispatchFunctionalityActions\n  } = useStore('functionalities');\n\n  const updateFunctionalities = funcs => dispatchFunctionalityActions(FunctionalityActions.updateFunctionalities(funcs));\n\n  useMountEffect(() => {\n    setTimeout(() => {\n      setFetching(true);\n      getOrDownloadFunctionalities(functionalities).then(result => updateFunctionalities(result)).catch(e => setError(e.msg)).finally(() => setFetching(false));\n    }, 0);\n  }); //Recuperar dados da funcionalidade\n\n  let [functionalityName, setFunctionalityName] = useState([]);\n  let i = 0;\n\n  while (i < functionalities.length) {\n    if (functionalities[i].funcId == id) {\n      functionalityName = functionalities[i].funcName;\n    }\n\n    i++;\n  }\n\n  const [initialData, setInititalData] = useState(false);\n  const [monitoredVariablesIntances, setMonitoredVariablesIntances] = useState([]);\n\n  const updateMonitoredVariablesInstances = instances => {\n    console.log(instances);\n    setMonitoredVariablesIntances(instances);\n    console.log(monitoredVariablesIntances);\n  };\n\n  if (redirectTo !== \"\") return /*#__PURE__*/_jsxDEV(Redirect, {\n    to: redirectTo,\n    push: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 12\n  }, this);\n  return /*#__PURE__*/_jsxDEV(Navigator, {\n    title: \"Digital Twin monitoring\",\n    children: /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h5\",\n            noWrap: true,\n            children: functionalityName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 8\n        }, this), /*#__PURE__*/_jsxDEV(FunctionalityForm, {\n          cancel: {\n            action: redirectToList,\n            label: 'Cancel'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 5\n      }, this)\n    }, void 0, false)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 5\n  }, this);\n};\n\n_s(FunctionalityDetails, \"NM4n3rvpTyUxJDh7Cju27oP6cDs=\", false, function () {\n  return [useRouteMatch, useStore, useMountEffect, useStore, useMountEffect];\n});\n\n_c = FunctionalityDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"FunctionalityDetails\");","map":{"version":3,"sources":["/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/DigitalTwin/FunctionalityDetails.tsx"],"names":["Grid","Typography","React","useState","Redirect","useRouteMatch","routes","FunctionalityActions","MonitoredVariableActions","getOrDownloadFunctionalities","getOrDownloadMonitoredVariables","useMountEffect","Navigator","useStore","FunctionalityForm","FunctionalityDetails","matchParams","id","params","fetching","setFetching","error","setError","data","monitoredVariables","dispatchAction","dispatchMonitoredVariableActions","updateMonitoredVariables","monVar","updateMonitoredVariable","selectedMonitoredVariables","setSelectedMonitoredVariables","setTimeout","then","result","catch","e","msg","finally","indexes","label","key","redirectTo","setRedirectTo","redirectToList","digitalTwinMonitoring","functionalities","dispatchFunctionalityActions","updateFunctionalities","funcs","functionalityName","setFunctionalityName","i","length","funcId","funcName","initialData","setInititalData","monitoredVariablesIntances","setMonitoredVariablesIntances","updateMonitoredVariablesInstances","instances","console","log","action"],"mappings":";;;AAAA,SAAiDA,IAAjD,EAAuDC,UAAvD,QAAyE,mBAAzE;AAEA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAAgBC,QAAhB,EAA0BC,aAA1B,QAA+C,kBAA/C;AACA,SAASC,MAAT,QAAuB,WAAvB;AAEA,SAASC,oBAAT,EAA+BC,wBAA/B,QAA+D,qBAA/D;AAEA,SAASC,4BAAT,EAAuCC,+BAAvC,QAA8E,0BAA9E;AACA,SAASC,cAAT,QAA+B,kBAA/B;AAGA,SAASC,SAAT,QAA0B,kCAA1B;AACA,SAASC,QAAT,QAAyB,0BAAzB;AAEA,SAASC,iBAAT,QAAkC,qBAAlC,C,CAEA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;AAEA,OAAO,MAAMC,oBAAoB,GAAG,MAAM;AAAA;;AAEtC;AACA,QAAMC,WAAmB,GAAGX,aAAa,EAAzC;AACA,QAAMY,EAAE,GAAID,WAAW,CAACE,MAAb,CAA4BD,EAAvC,CAJsC,CAMtC;;AACA,QAAM,CAACE,QAAD,EAAUC,WAAV,IAAyBjB,QAAQ,CAAC,IAAD,CAAvC;AACA,QAAM,CAACkB,KAAD,EAAOC,QAAP,IAAmBnB,QAAQ,CAAC,EAAD,CAAjC;AACA,QAAM;AAACoB,IAAAA,IAAI,EAAEC,kBAAP;AAA2BC,IAAAA,cAAc,EAAEC;AAA3C,MAA+Eb,QAAQ,CAAC,oBAAD,CAA7F;;AACA,QAAMc,wBAAwB,GAAIC,MAAD,IAAiCF,gCAAgC,CAAClB,wBAAwB,CAACqB,uBAAzB,CAAiDD,MAAjD,CAAD,CAAlG;;AACA,QAAM,CAACE,0BAAD,EAA6BC,6BAA7B,IAAgG5B,QAAQ,CAAC,EAAD,CAA9G;AAEAQ,EAAAA,cAAc,CAAC,MAAM;AAErBqB,IAAAA,UAAU,CAAC,MAAM;AAEjBZ,MAAAA,WAAW,CAAC,IAAD,CAAX;AACAV,MAAAA,+BAA+B,CAACc,kBAAD,CAA/B,CACKS,IADL,CACWC,MAAD,IAAiCP,wBAAwB,CAACO,MAAD,CADnE,EAEKC,KAFL,CAEYC,CAAD,IAA4Bd,QAAQ,CAACc,CAAC,CAACC,GAAH,CAF/C,EAGKC,OAHL,CAGa,MAAMlB,WAAW,CAAC,KAAD,CAH9B;AAIC,KAPS,EAOP,CAPO,CAAV,CAFqB,CAWrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEC,GApBa,CAAd,CAbsC,CAmCtC;;AACA,QAAMmB,OAAO,GAAG,CACZ;AAACC,IAAAA,KAAK,EAAE,UAAR;AAAoBC,IAAAA,GAAG,EAAE;AAAzB,GADY,EAEZ;AAACD,IAAAA,KAAK,EAAE,gBAAR;AAA0BC,IAAAA,GAAG,EAAE;AAA/B,GAFY,EAGZ;AAACD,IAAAA,KAAK,EAAE,iBAAR;AAA2BC,IAAAA,GAAG,EAAE;AAAhC,GAHY,EAIZ;AAACD,IAAAA,KAAK,EAAE,eAAR;AAAyBC,IAAAA,GAAG,EAAE;AAA9B,GAJY,EAKZ;AAACD,IAAAA,KAAK,EAAE,OAAR;AAAiBC,IAAAA,GAAG,EAAE;AAAtB,GALY,CAMZ;AANY,GAAhB,CApCsC,CA6CtC;;AACA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAAmDxC,QAAQ,CAAC,EAAD,CAAjE;;AAEA,QAAMyC,cAAc,GAAG,MAAMD,aAAa,CAACrC,MAAM,CAACuC,qBAAR,CAA1C,CAhDsC,CAkDtC;;;AACA,QAAM;AAACtB,IAAAA,IAAI,EAACuB,eAAN;AAAuBrB,IAAAA,cAAc,EAACsB;AAAtC,MAAsElC,QAAQ,CAAC,iBAAD,CAApF;;AACA,QAAMmC,qBAAqB,GAAIC,KAAD,IAA4BF,4BAA4B,CAACxC,oBAAoB,CAACyC,qBAArB,CAA2CC,KAA3C,CAAD,CAAtF;;AAEAtC,EAAAA,cAAc,CAAC,MAAM;AAErBqB,IAAAA,UAAU,CAAC,MAAM;AAEjBZ,MAAAA,WAAW,CAAC,IAAD,CAAX;AACAX,MAAAA,4BAA4B,CAACqC,eAAD,CAA5B,CACKb,IADL,CACWC,MAAD,IAA6Bc,qBAAqB,CAACd,MAAD,CAD5D,EAEKC,KAFL,CAEYC,CAAD,IAA4Bd,QAAQ,CAACc,CAAC,CAACC,GAAH,CAF/C,EAGKC,OAHL,CAGa,MAAMlB,WAAW,CAAC,KAAD,CAH9B;AAIC,KAPS,EAOP,CAPO,CAAV;AAQC,GAVa,CAAd,CAtDsC,CAkEtC;;AACA,MAAI,CAAC8B,iBAAD,EAAoBC,oBAApB,IAA0EhD,QAAQ,CAAC,EAAD,CAAtF;AAEA,MAAIiD,CAAC,GAAG,CAAR;;AACA,SAAMA,CAAC,GAAGN,eAAe,CAACO,MAA1B,EAAiC;AAE7B,QAAGP,eAAe,CAACM,CAAD,CAAf,CAAmBE,MAAnB,IAA6BrC,EAAhC,EAAoC;AAClCiC,MAAAA,iBAAiB,GAAGJ,eAAe,CAACM,CAAD,CAAf,CAAmBG,QAAvC;AACD;;AACDH,IAAAA,CAAC;AACJ;;AAED,QAAM,CAACI,WAAD,EAAaC,eAAb,IAAgCtD,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAM,CAACuD,0BAAD,EAA4BC,6BAA5B,IAA8FxD,QAAQ,CAAC,EAAD,CAA5G;;AACA,QAAMyD,iCAAiC,GAAIC,SAAD,IAAoC;AAE1EC,IAAAA,OAAO,CAACC,GAAR,CAAYF,SAAZ;AACAF,IAAAA,6BAA6B,CAACE,SAAD,CAA7B;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYL,0BAAZ;AACH,GALD;;AAOA,MAAGhB,UAAU,KAAK,EAAlB,EACA,oBAAO,QAAC,QAAD;AAAU,IAAA,EAAE,EAAEA,UAAd;AAA0B,IAAA,IAAI,EAAE;AAAhC;AAAA;AAAA;AAAA;AAAA,UAAP;AAEA,sBACA,QAAC,SAAD;AAAW,IAAA,KAAK,EAAC,yBAAjB;AAAA,2BACA;AAAA,6BACA,QAAC,IAAD;AAAM,QAAA,IAAI,MAAV;AAAW,QAAA,EAAE,EAAE,EAAf;AAAA,gCACG,QAAC,IAAD;AAAM,UAAA,IAAI,MAAV;AAAA,iCACK,QAAC,UAAD;AAAY,YAAA,OAAO,EAAC,IAApB;AAAyB,YAAA,MAAM,MAA/B;AAAA,sBACCQ;AADD;AAAA;AAAA;AAAA;AAAA;AADL;AAAA;AAAA;AAAA;AAAA,gBADH,eAoBI,QAAC,iBAAD;AACI,UAAA,MAAM,EAAE;AAACc,YAAAA,MAAM,EAAEpB,cAAT;AAAyBJ,YAAAA,KAAK,EAAE;AAAhC;AADZ;AAAA;AAAA;AAAA;AAAA,gBApBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AADA;AAAA;AAAA;AAAA;AAAA,UADA;AA8BH,CAxHM;;GAAMzB,oB;UAGmBV,a,EAMyDQ,Q,EAIrFF,c,EAsC4EE,Q,EAG5EF,c;;;KAtDSI,oB","sourcesContent":["import { Card, CardContent, CardHeader, Divider, Grid, Typography } from '@material-ui/core'\r\nimport { Clear, Settings , Error} from '@material-ui/icons'\r\nimport React, { useState } from 'react'\r\nimport { match, Redirect, useRouteMatch } from 'react-router-dom'\r\nimport { routes } from '../../App'\r\nimport { Functionality, MonitoredVariable } from '../../model'\r\nimport { FunctionalityActions, MonitoredVariableActions } from '../../redux/actions'\r\nimport { RequestResponseState } from '../../services/api/api'\r\nimport { getOrDownloadFunctionalities, getOrDownloadMonitoredVariables } from '../../utils/digitalTwins'\r\nimport { useMountEffect } from '../../utils/main'\r\nimport { useSmartComponentStyles } from '../SmartComponents/style'\r\nimport { LazyComponent } from '../templates/LazyComponent/LazyComponent'\r\nimport { Navigator } from '../templates/Navigator/Navigator'\r\nimport { useStore } from '../templates/Store/Store'\r\nimport { JPTable } from '../templates/Table/JPTable'\r\nimport { FunctionalityForm } from './FunctionalityForm'\r\n\r\n//Esta página pretende dispor informação mais detalhada da funcionalidade correspondente disponível na página \"DigitalTwinMonitoring\"\r\n\r\n// const MonitoredVariableInstanceList = (props: {fbInstances: any[], update: (instances: any[]) => void}) => {\r\n    \r\n//     const classes = useSmartComponentStyles()\r\n\r\n//     return (\r\n//         <JPTable\r\n//             data={props.fbInstances.map((i:MonitoredVariable) => {\r\n\r\n//                 return {\r\n//                     ...i,\r\n//                     stateData: {\r\n//                         key: i.idMonitoredVariable,\r\n//                         data: i.idMonitoredVariable === 1 ? <Settings className={classes.functionBlockGood} /> : <Error className={classes.functionBlockError}/>\r\n//                     }\r\n//                 }\r\n//             })}\r\n//             indexes={[\r\n//                 {label: 'Variable', key: 'monitoredVariableName'},\r\n//                 {label: 'Function Block', key: 'fbAssociated'},\r\n//                 {label: 'Smart Component', key: 'dtDescription'},\r\n//                 {label: 'Current Value', key: 'dtMonitoredVariableEvent'},\r\n//                 {label: 'Graph', key: 'dtName'},\r\n//                 //{label: 'Remove', key: 'dtName'},\r\n//             ]}\r\n//             tName=''\r\n//             updateData={props.update}\r\n//             sortedkey='id'\r\n\r\n//         />\r\n//     )\r\n// }\r\n\r\nexport const FunctionalityDetails = () => {\r\n\r\n    //Recupera o id da funcionalidade seleccionada anteriormente na página Digital Twin Monitoring\r\n    const matchParams : match = useRouteMatch()\r\n    const id = (matchParams.params as any).id\r\n\r\n    // Recuperar da base de dados as variáveis que estão a ser monitorizadas (MonitoredVariable)\r\n    const [fetching,setFetching] = useState(true)\r\n    const [error,setError] = useState('')\r\n    const {data: monitoredVariables, dispatchAction: dispatchMonitoredVariableActions} = useStore('monitoredVariables')\r\n    const updateMonitoredVariables = (monVar: MonitoredVariable[]) => dispatchMonitoredVariableActions(MonitoredVariableActions.updateMonitoredVariable(monVar))\r\n    const [selectedMonitoredVariables, setSelectedMonitoredVariables] : [MonitoredVariable[], Function] = useState([])\r\n    \r\n    useMountEffect(() => {\r\n  \r\n    setTimeout(() => {\r\n  \r\n    setFetching(true)\r\n    getOrDownloadMonitoredVariables(monitoredVariables)\r\n        .then((result: MonitoredVariable[]) => updateMonitoredVariables(result))\r\n        .catch((e:RequestResponseState) => setError(e.msg))\r\n        .finally(() => setFetching(false))\r\n    }, 0)\r\n\r\n    // let k = 0\r\n    // while(k < monitoredVariables.length){\r\n    //     if(monitoredVariables[k].funcIdAssociated == id){\r\n    //         updateMonitoredVariablesInstances(monitoredVariables)\r\n    //         setInititalData(true)\r\n    //     }\r\n    //     k++\r\n    // }\r\n\r\n    })\r\n\r\n    //Cabeçalhos da tabela + Funções Necessárias\r\n    const indexes = [\r\n        {label: 'Variable', key: 'monitoredVariableName'},\r\n        {label: 'Function Block', key: 'fbAssociated'},\r\n        {label: 'Smart Component', key: 'dtDescription'},\r\n        {label: 'Current Value', key: 'dtMonitoredVariableEvent'},\r\n        {label: 'Graph', key: 'dtName'},\r\n        //{label: 'Remove', key: 'dtName'},\r\n    ]\r\n\r\n    //Variáveis e funções que permitem o redireccionamento para a página DigitalTwinMonitoring\r\n    const [redirectTo, setRedirectTo] : [string, Function] = useState(\"\")\r\n\r\n    const redirectToList = () => setRedirectTo(routes.digitalTwinMonitoring)\r\n\r\n    // Recuperar da base de dados as funcionalidades (Functionality)\r\n    const {data:functionalities, dispatchAction:dispatchFunctionalityActions} = useStore('functionalities')\r\n    const updateFunctionalities = (funcs: Functionality[]) => dispatchFunctionalityActions(FunctionalityActions.updateFunctionalities(funcs))\r\n\r\n    useMountEffect(() => {\r\n\r\n    setTimeout(() => {\r\n\r\n    setFetching(true)\r\n    getOrDownloadFunctionalities(functionalities)\r\n        .then((result: Functionality[]) => updateFunctionalities(result))\r\n        .catch((e:RequestResponseState) => setError(e.msg))\r\n        .finally(() => setFetching(false))\r\n    }, 0)\r\n    })\r\n\r\n    //Recuperar dados da funcionalidade\r\n    let [functionalityName, setFunctionalityName] : [Functionality[], Function] = useState([])\r\n\r\n    let i = 0;\r\n    while(i < functionalities.length){\r\n\r\n        if(functionalities[i].funcId == id) {\r\n          functionalityName = functionalities[i].funcName\r\n        }\r\n        i++\r\n    }\r\n\r\n    const [initialData,setInititalData] = useState(false)\r\n    const [monitoredVariablesIntances,setMonitoredVariablesIntances] : [MonitoredVariable[],Function] = useState([])\r\n    const updateMonitoredVariablesInstances = (instances: MonitoredVariable[]) => {\r\n        \r\n        console.log(instances)\r\n        setMonitoredVariablesIntances(instances)\r\n        console.log(monitoredVariablesIntances)\r\n    }\r\n\r\n    if(redirectTo !== \"\") \r\n    return <Redirect to={redirectTo} push={true} />\r\n\r\n    return(\r\n    <Navigator title=\"Digital Twin monitoring\">\r\n    <>\r\n    <Grid item xs={12}> \r\n       <Grid item> \r\n            <Typography variant=\"h5\" noWrap>\r\n            {functionalityName}\r\n            </Typography>\r\n       </Grid>        \r\n        {/* <Grid item>\r\n            <Card>\r\n                <CardHeader title={functionalityName} />\r\n                    <Divider />\r\n                    <CardContent>\r\n                        <LazyComponent loaded={initialData}>\r\n                            <MonitoredVariableInstanceList \r\n                                fbInstances={monitoredVariablesIntances}\r\n                                update={updateMonitoredVariablesInstances}\r\n                            />\r\n                        </LazyComponent>\r\n                </CardContent>\r\n            </Card>\r\n        </Grid> */}\r\n        <FunctionalityForm\r\n            cancel={{action: redirectToList, label: 'Cancel'}}\r\n        />\r\n    </Grid>\r\n    </>\r\n    </Navigator>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}