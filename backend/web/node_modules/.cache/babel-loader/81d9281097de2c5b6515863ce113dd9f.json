{"ast":null,"code":"var _jsxFileName = \"/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/components/FunctionBlockCategories/List/List.tsx\";\nimport React, { useState } from 'react';\nimport { Navigator } from '../../templates/Navigator/Navigator';\nimport { ConfirmAction, ConfirmActionStateLabel } from '../../templates/ConfirmAction/ConfirmAction';\nimport { LazyComponent } from '../../templates/LazyComponent/LazyComponent';\nimport { JPTable } from '../../templates/Table/JPTable';\nimport { useMountEffect } from '../../../utils/main';\nimport { getOrDownloadFunctionBlockCategories } from '../../../utils/functionBlock';\nimport { useStore } from '../../templates/Store/Store';\nimport { FunctionBlockCategoriesActions } from '../../../redux/actions';\nimport { TextField, Grid, Button, Box, Dialog, DialogTitle, CircularProgress } from '@material-ui/core';\nimport { createFunctionBlockCategory, updateFunctionBlockCategory } from '../../../services/api/function-block';\nimport { deleteFunctionBlockCategory } from '../../../services/api/function-block';\nimport { useDialogStyles } from './style';\nimport { CheckCircle, Error } from '@material-ui/icons';\nconst NEW_CATEGORY_RE = /[a-zA-Z0-9]{3,}/;\nlet categoryId = -1;\n\nconst EditFBCategoryDialog = props => {\n  const [newCategoryName, setNewCategoryName] = useState(props.category.fbcName);\n  const classes = useDialogStyles();\n  const [sending, setSending] = useState(false);\n  const [result, setResult] = useState({\n    done: false\n  });\n\n  const action = () => {\n    if (props.category.fbcId) {\n      if (!result.done) {\n        setSending(true);\n        updateFunctionBlockCategory(props.category.fbcId, newCategoryName).then(response => {\n          setResult({\n            done: true,\n            good: true,\n            message: response.msg\n          });\n        }).catch(error => {\n          setResult({\n            done: true,\n            good: false,\n            message: error.msg\n          });\n        }).finally(() => setSending(false));\n      } else {\n        if (result.good) props.onGood({ ...props.category,\n          fbcName: newCategoryName\n        });else props.onError();\n      }\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Dialog, {\n    open: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(DialogTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }\n  }, \"Edit Category\"), /*#__PURE__*/React.createElement(Box, {\n    className: classes.box,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }\n  }, !result.done ? /*#__PURE__*/React.createElement(TextField, {\n    disabled: sending,\n    value: newCategoryName,\n    onChange: event => setNewCategoryName(event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 29\n    }\n  }) : /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 30\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 33\n    }\n  }, result.good ? /*#__PURE__*/React.createElement(CheckCircle, {\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 49\n    }\n  }) : /*#__PURE__*/React.createElement(Error, {\n    color: \"error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 49\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    className: result.good ? classes.good : classes.error,\n    textAlign: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 37\n    }\n  }, result.message)))), /*#__PURE__*/React.createElement(Grid, {\n    className: classes.buttons,\n    container: true,\n    direction: \"row\",\n    justify: \"space-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 17\n    }\n  }, sending ? /*#__PURE__*/React.createElement(CircularProgress, {\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 27\n    }\n  }) : /*#__PURE__*/React.createElement(Button, {\n    onClick: action,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 27\n    }\n  }, \"Ok\")), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    disabled: sending,\n    onClick: props.onCancel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 21\n    }\n  }, \"Cancel\"))));\n};\n\nexport const FunctionBlockCategoryList = () => {\n  const [fetching, setFetching] = useState(true);\n  const [error, setError] = useState('');\n  const [newCategory, setNewCategory] = useState('');\n  const [confirmAddCategory, setConfirmAddCategory] = useState(false);\n  const [validNewCategory, setValidNewCategory] = useState(true);\n  const errorFetchngCategoriesState = {\n    label: error,\n    state: ConfirmActionStateLabel.error,\n    positiveLabel: 'Ok'\n  };\n\n  const onCancel = () => setError('');\n\n  const {\n    data: functionBlockCategories,\n    dispatchAction: dispatchFunctionBlockCategoriesActions\n  } = useStore('functionBlockCategories');\n\n  const updateFunctionBlockCategories = categories => dispatchFunctionBlockCategoriesActions(FunctionBlockCategoriesActions.updateFunctionBlockCategories(categories));\n\n  const addFunctionBlockCategory = () => dispatchFunctionBlockCategoriesActions(FunctionBlockCategoriesActions.addFunctionBlockCategory({\n    fbcId: categoryId,\n    fbcUserId: 1,\n    fbcName: newCategory\n  }));\n\n  const [editingCategory, setEditingCategory] = useState(null);\n  const indexes = [{\n    label: 'Name',\n    key: 'fbcName'\n  }, {\n    label: 'Function Block List',\n    key: 'fbList'\n  }];\n  useMountEffect(() => {\n    setTimeout(() => {\n      setFetching(true);\n      getOrDownloadFunctionBlockCategories(functionBlockCategories).then(result => updateFunctionBlockCategories(result)).catch(e => setError(e.msg)).finally(() => setFetching(false));\n    }, 0);\n  });\n\n  const isCategoryValid = category => NEW_CATEGORY_RE.test(category);\n\n  const validateAndCreate = () => {\n    const validCategory = isCategoryValid(newCategory);\n    if (!validCategory) setValidNewCategory(false);else setConfirmAddCategory(true);\n  };\n\n  const addNewCategoryAction = () => {\n    return new Promise((res, rej) => {\n      createFunctionBlockCategory(newCategory.trim()).then(result => {\n        categoryId = result.extra.lastInsertedId;\n        res('Category created');\n      }).catch(e => rej(e.msg));\n    });\n  };\n\n  const confirmCategoryCreationActionStates = {\n    start: {\n      label: `Confirm creation of new category: ${newCategory} ?`,\n      positiveLabel: 'Ok',\n      negativeLabel: 'Cancel',\n      state: ConfirmActionStateLabel.start\n    },\n    executing: {\n      label: '',\n      state: ConfirmActionStateLabel.executing\n    },\n    success: {\n      label: 'Category Created',\n      state: ConfirmActionStateLabel.success,\n      positiveLabel: 'Ok'\n    },\n    error: {\n      label: 'Error Creating Category',\n      state: ConfirmActionStateLabel.error,\n      positiveLabel: 'Ok'\n    }\n  };\n  const confirmActionProps = {\n    title: 'Add Category',\n    states: confirmCategoryCreationActionStates,\n    currentState: confirmCategoryCreationActionStates.start,\n    onCancel: () => setConfirmAddCategory(false),\n    onError: () => setConfirmAddCategory(false),\n    onSuccess: () => {\n      addFunctionBlockCategory();\n      setNewCategory('');\n    },\n    action: addNewCategoryAction\n  };\n\n  const getData = () => functionBlockCategories.map(category => {\n    var _category$functionBlo, _category$functionBlo2, _category$functionBlo3, _category$functionBlo4, _category$functionBlo5;\n\n    return { ...category,\n      fbList: {\n        key: (_category$functionBlo = (_category$functionBlo2 = category.functionBlocks) === null || _category$functionBlo2 === void 0 ? void 0 : _category$functionBlo2.length) !== null && _category$functionBlo !== void 0 ? _category$functionBlo : 0,\n        data: /*#__PURE__*/React.createElement(Grid, {\n          container: true,\n          direction: \"row\",\n          spacing: 2,\n          wrap: \"wrap\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 24\n          }\n        }, \" \", (_category$functionBlo3 = category.functionBlocks) === null || _category$functionBlo3 === void 0 ? void 0 : _category$functionBlo3.map((fb, index) => /*#__PURE__*/React.createElement(Grid, {\n          key: index,\n          item: true,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(Box, {\n          fontStyle: \"italic\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 44\n          }\n        }, \" \", fb, \" ; \"))), \" \")\n      },\n      deleteDisabled: (_category$functionBlo4 = !!((_category$functionBlo5 = category.functionBlocks) === null || _category$functionBlo5 === void 0 ? void 0 : _category$functionBlo5.length)) !== null && _category$functionBlo4 !== void 0 ? _category$functionBlo4 : false\n    };\n  });\n\n  const deleteFunctionBlockCategoryAction = category => {\n    return new Promise(async (res, rej) => {\n      if (!category.fbcId) {\n        rej('Error');\n        return;\n      }\n\n      try {\n        const response = await deleteFunctionBlockCategory(category.fbcId);\n        res(response);\n      } catch (err) {\n        rej(err);\n      }\n    });\n  };\n\n  const cancelEditing = () => setEditingCategory(null);\n\n  const showEditing = cat => setEditingCategory(cat);\n\n  const onGoodEditing = editingCat => {\n    const newCats = functionBlockCategories.map(cat => {\n      if (cat.fbcId === editingCat.fbcId) return { ...cat,\n        fbcName: editingCat.fbcName\n      };\n      return cat;\n    });\n    cancelEditing();\n    dispatchFunctionBlockCategoriesActions(FunctionBlockCategoriesActions.updateFunctionBlockCategories(newCats));\n  };\n\n  return /*#__PURE__*/React.createElement(Navigator, {\n    title: \"Function Block Categories\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(React.Fragment, null, error !== '' ? /*#__PURE__*/React.createElement(ConfirmAction, {\n    title: \"Fetching Function Blocks\",\n    currentState: errorFetchngCategoriesState,\n    states: {\n      error: errorFetchngCategoriesState\n    },\n    onCancel: onCancel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 19\n    }\n  }) : null, /*#__PURE__*/React.createElement(LazyComponent, {\n    loaded: !fetching,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(React.Fragment, null, confirmAddCategory ? /*#__PURE__*/React.createElement(ConfirmAction, Object.assign({}, confirmActionProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 27\n    }\n  })) : editingCategory ? /*#__PURE__*/React.createElement(EditFBCategoryDialog, {\n    onGood: onGoodEditing,\n    category: editingCategory,\n    onError: cancelEditing,\n    onCancel: cancelEditing,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 32\n    }\n  }) : null, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    direction: \"column\",\n    spacing: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(JPTable, {\n    sortedkey: \"fbcName\",\n    data: getData(),\n    updateData: updateFunctionBlockCategories,\n    indexes: indexes,\n    tName: \"Function Block Category\",\n    extra: {\n      delete: {\n        action: deleteFunctionBlockCategoryAction,\n        labelKey: 'fbcName',\n        onSuccessDelete: () => {}\n      },\n      edit: {\n        action: showEditing\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    justify: \"flex-end\",\n    spacing: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    helperText: !validNewCategory ? NEW_CATEGORY_RE.toString() : '',\n    error: !validNewCategory,\n    required: true,\n    onChange: event => {\n      setNewCategory(event.target.value);\n      if (!validNewCategory) setValidNewCategory(isCategoryValid(event.target.value.trim()));\n    },\n    fullWidth: true,\n    value: newCategory,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 37\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    color: \"primary\",\n    variant: \"contained\",\n    onClick: validateAndCreate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 37\n    }\n  }, \"Add Category\")))))))));\n};","map":{"version":3,"sources":["/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/components/FunctionBlockCategories/List/List.tsx"],"names":["React","useState","Navigator","ConfirmAction","ConfirmActionStateLabel","LazyComponent","JPTable","useMountEffect","getOrDownloadFunctionBlockCategories","useStore","FunctionBlockCategoriesActions","TextField","Grid","Button","Box","Dialog","DialogTitle","CircularProgress","createFunctionBlockCategory","updateFunctionBlockCategory","deleteFunctionBlockCategory","useDialogStyles","CheckCircle","Error","NEW_CATEGORY_RE","categoryId","EditFBCategoryDialog","props","newCategoryName","setNewCategoryName","category","fbcName","classes","sending","setSending","result","setResult","done","action","fbcId","then","response","good","message","msg","catch","error","finally","onGood","onError","box","event","target","value","buttons","onCancel","FunctionBlockCategoryList","fetching","setFetching","setError","newCategory","setNewCategory","confirmAddCategory","setConfirmAddCategory","validNewCategory","setValidNewCategory","errorFetchngCategoriesState","label","state","positiveLabel","data","functionBlockCategories","dispatchAction","dispatchFunctionBlockCategoriesActions","updateFunctionBlockCategories","categories","addFunctionBlockCategory","fbcUserId","editingCategory","setEditingCategory","indexes","key","setTimeout","e","isCategoryValid","test","validateAndCreate","validCategory","addNewCategoryAction","Promise","res","rej","trim","extra","lastInsertedId","confirmCategoryCreationActionStates","start","negativeLabel","executing","success","confirmActionProps","title","states","currentState","onSuccess","getData","map","fbList","functionBlocks","length","fb","index","deleteDisabled","deleteFunctionBlockCategoryAction","err","cancelEditing","showEditing","cat","onGoodEditing","editingCat","newCats","delete","labelKey","onSuccessDelete","edit","toString"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { Navigator } from '../../templates/Navigator/Navigator'\nimport { ConfirmAction, ConfirmActionState, ConfirmActionStateLabel, ConfirmActionProps } from '../../templates/ConfirmAction/ConfirmAction'\nimport { LazyComponent } from '../../templates/LazyComponent/LazyComponent'\nimport { JPTable } from '../../templates/Table/JPTable'\nimport { FBCategory, FunctionBlock } from '../../../model'\nimport { useMountEffect } from '../../../utils/main'\nimport { getOrDownloadFunctionBlockCategories } from '../../../utils/functionBlock'\nimport { useStore } from '../../templates/Store/Store'\nimport { FunctionBlockCategoriesActions } from '../../../redux/actions'\nimport { RequestResponseState } from '../../../services/api/api'\nimport { TextField, Grid, Button, Box, Dialog, DialogTitle, CircularProgress } from '@material-ui/core'\nimport { createFunctionBlockCategory, updateFunctionBlockCategory } from '../../../services/api/function-block'\nimport { deleteFunctionBlockCategory} from '../../../services/api/function-block'\nimport { useDialogStyles } from './style'\nimport { CheckCircle, Error } from '@material-ui/icons'\nimport { functionBlockCategoryReducer } from '../../../redux/reducers'\n\nconst NEW_CATEGORY_RE = /[a-zA-Z0-9]{3,}/\n\nlet categoryId = -1\n\nconst EditFBCategoryDialog = (props: {category: FBCategory, onGood: (newCategory: FBCategory) => void, onError: () => void, onCancel: () => void}) => {\n\n    const [newCategoryName, setNewCategoryName] : [string,Function] = useState(props.category.fbcName)\n\n    const classes = useDialogStyles()\n\n    const [sending, setSending] : [boolean, Function] = useState(false)\n\n    const [result, setResult] : [{done: boolean, good?: boolean, message?: string},Function] = useState({done:false})\n\n    const action = () => {\n\n        if(props.category.fbcId) {\n\n            if(!result.done) {\n\n                setSending(true)\n    \n                updateFunctionBlockCategory(props.category.fbcId, newCategoryName)\n\n                    .then((response: RequestResponseState) => {\n                        setResult({done:true, good: true, message: response.msg})\n                    })\n\n                    .catch((error: RequestResponseState) => {\n                        setResult({done: true, good: false, message: error.msg})\n                    })\n\n                    .finally(() => setSending(false))\n\n            }\n\n            else {\n\n                if(result.good)\n                    props.onGood({...props.category, fbcName: newCategoryName})\n                \n                else\n                    props.onError()\n\n            }\n\n        }\n\n    }\n\n    return (\n        <Dialog open={true}>\n            <DialogTitle>Edit Category</DialogTitle>\n            <Box className={classes.box}>\n                {\n                    !result.done \n                        ?\n                            <TextField \n                                disabled={sending}\n                                value={newCategoryName}\n                                onChange={(event) => setNewCategoryName(event.target.value)}\n                            />\n                        :    <Grid container justify=\"center\">\n                                <Grid item>\n                                    {\n                                        result.good \n                                            ?   <CheckCircle color=\"primary\" />\n                                            :   <Error color=\"error\" />\n                                    }\n                                </Grid>\n                                <Grid item>\n                                    <Box className={result.good ? classes.good : classes.error} textAlign=\"center\">{result.message}</Box>\n                                </Grid>\n                            </Grid> \n                }\n            </Box>\n            <Grid className={classes.buttons} container direction=\"row\" justify=\"space-between\">\n                <Grid item>\n                    {sending \n                        ? <CircularProgress color=\"primary\" />\n                        : <Button onClick={action}>Ok</Button>\n                    }\n                </Grid>\n                <Grid item>\n                    <Button disabled={sending} onClick={props.onCancel}>Cancel</Button>\n                </Grid>\n            </Grid>\n        </Dialog>\n    )\n\n}\n\nexport const FunctionBlockCategoryList = () => {\n\n    const [fetching,setFetching] = useState(true)\n    const [error,setError] = useState('')\n    const [newCategory,setNewCategory] = useState('')\n\n    const [confirmAddCategory,setConfirmAddCategory] : [boolean, Function] = useState(false)\n\n    const [validNewCategory, setValidNewCategory] : [boolean,Function] = useState(true)\n\n    const errorFetchngCategoriesState : ConfirmActionState = {\n        label: error,\n        state: ConfirmActionStateLabel.error,\n        positiveLabel: 'Ok'\n    }\n\n    const onCancel = () => setError('')\n\n    const {data: functionBlockCategories, dispatchAction:dispatchFunctionBlockCategoriesActions} = useStore('functionBlockCategories')\n\n    const updateFunctionBlockCategories = (categories: FBCategory[]) => dispatchFunctionBlockCategoriesActions(FunctionBlockCategoriesActions.updateFunctionBlockCategories(categories))\n    const addFunctionBlockCategory = () => dispatchFunctionBlockCategoriesActions(FunctionBlockCategoriesActions.addFunctionBlockCategory({fbcId: categoryId, fbcUserId:1, fbcName: newCategory}))\n\n    const [editingCategory, setEditingCategory] : [FBCategory | null,Function] = useState(null)\n\n\n    const indexes = [\n        {label: 'Name', key: 'fbcName'},\n        {label: 'Function Block List', key: 'fbList'}\n    ]\n\n    useMountEffect(() => {\n\n        setTimeout(() => {\n    \n          setFetching(true)\n          getOrDownloadFunctionBlockCategories(functionBlockCategories)\n              .then((result: FBCategory[]) => updateFunctionBlockCategories(result))\n              .catch((e:RequestResponseState) => setError(e.msg))\n              .finally(() => setFetching(false))\n    \n            \n        }, 0)\n    \n    })\n\n    const isCategoryValid = (category:string) => NEW_CATEGORY_RE.test(category)\n\n    const validateAndCreate = () => {\n\n        const validCategory = isCategoryValid(newCategory)\n\n        if(!validCategory)\n            setValidNewCategory(false)\n        else\n            setConfirmAddCategory(true)\n    \n    }\n\n    const addNewCategoryAction = () : Promise<string> => {\n\n        return new Promise<string>((res:Function, rej:Function)  => { \n            \n            createFunctionBlockCategory(newCategory.trim())\n\n                .then((result: RequestResponseState) => {\n                    categoryId = result.extra.lastInsertedId\n                    res('Category created')\n                })\n\n                .catch((e:RequestResponseState) => rej(e.msg))\n\n        })\n\n    }\n\n    const confirmCategoryCreationActionStates = {\n        start: {\n            label: `Confirm creation of new category: ${newCategory} ?`,\n            positiveLabel: 'Ok',\n            negativeLabel: 'Cancel',\n            state: ConfirmActionStateLabel.start\n        },\n        executing: {\n          label: '',\n          state: ConfirmActionStateLabel.executing,\n        },\n        success: {\n          label: 'Category Created',\n          state: ConfirmActionStateLabel.success,\n          positiveLabel: 'Ok'\n        },\n        error: {\n          label: 'Error Creating Category',\n          state: ConfirmActionStateLabel.error,\n          positiveLabel: 'Ok'\n        },\n      }\n    \n    const confirmActionProps : ConfirmActionProps = {\n\n        title: 'Add Category',\n        states: confirmCategoryCreationActionStates,\n        currentState: confirmCategoryCreationActionStates.start,\n        onCancel: () => setConfirmAddCategory(false),\n        onError: () => setConfirmAddCategory(false),\n        onSuccess: () => {\n            addFunctionBlockCategory()\n            setNewCategory('')\n        },\n        action: addNewCategoryAction,\n    }\n\n    const getData = () => functionBlockCategories.map((category: FBCategory) => {\n\n        return {\n            ...category,\n            fbList: {\n                key: category.functionBlocks?.length ?? 0,\n                data:  <Grid container direction=\"row\" spacing={2} wrap=\"wrap\"> {category.functionBlocks?.map((fb: string, index:number) => (\n                    <Grid key={index} item><Box fontStyle=\"italic\"> {fb} ; </Box></Grid>\n                ))} </Grid>\n            },\n            deleteDisabled: !!category.functionBlocks?.length ?? false\n        }\n\n    })\n\n    const deleteFunctionBlockCategoryAction = (category: FBCategory) : Promise<any> => {\n\n        return new Promise(async(res:Function,rej:Function) => {\n\n            if(!category.fbcId) {\n                rej('Error')\n                return\n            }\n\n            try {\n                const response : RequestResponseState = await deleteFunctionBlockCategory(category.fbcId)\n                res(response)\n              }\n    \n            catch(err) {\n                rej(err)\n            }\n        })\n\n    }\n\n    const cancelEditing = () => setEditingCategory(null)\n    const showEditing = (cat: FBCategory) => setEditingCategory(cat)\n\n    const onGoodEditing = (editingCat: FBCategory) => {\n\n        const newCats = functionBlockCategories.map((cat: FBCategory) => {\n\n            if(cat.fbcId === editingCat.fbcId)\n                return {...cat, fbcName: editingCat.fbcName}\n            return cat\n\n        })\n        \n        cancelEditing()\n        dispatchFunctionBlockCategoriesActions(FunctionBlockCategoriesActions.updateFunctionBlockCategories(newCats))\n\n    }\n\n    return (\n        <Navigator title=\"Function Block Categories\">\n        <> \n            {error !== ''\n                ? <ConfirmAction title='Fetching Function Blocks' currentState={errorFetchngCategoriesState} states={{error: errorFetchngCategoriesState}} onCancel={onCancel}/>\n                : null \n            }\n            <LazyComponent loaded={!fetching}>\n                <>\n                    {confirmAddCategory \n                        ? <ConfirmAction {...confirmActionProps} /> \n                        : editingCategory \n                            ?  <EditFBCategoryDialog \n                                onGood={onGoodEditing}\n                                category={editingCategory}\n                                onError={cancelEditing}\n                                onCancel={cancelEditing} />\n                            : null\n                    }\n                    <Grid container direction=\"column\" spacing={2}>\n                        <Grid item>\n                            <JPTable\n                                sortedkey=\"fbcName\"\n                                data={getData()} \n                                updateData={updateFunctionBlockCategories} \n                                indexes={indexes}\n                                tName='Function Block Category'\n                                extra={{\n                                    delete: {\n                                        action: deleteFunctionBlockCategoryAction,\n                                        labelKey: 'fbcName',\n                                        onSuccessDelete: () => {}\n                                    },\n                                    edit: {\n                                        action: showEditing\n                                    }\n                                }} \n                            />\n                        </Grid>\n                        <Grid item>\n                            <Grid container justify=\"flex-end\" spacing={1}>\n                                <Grid item xs={4}>\n                                    <TextField\n                                        helperText={!validNewCategory ? NEW_CATEGORY_RE.toString() : ''}\n                                        error={!validNewCategory}\n                                        required\n                                        onChange={(event) => {\n                                            setNewCategory(event.target.value)\n                                            if(!validNewCategory)\n                                                setValidNewCategory(isCategoryValid(event.target.value.trim()))\n                                        }}\n                                        fullWidth\n                                        value={newCategory}\n                                    />\n                                </Grid>\n                                <Grid item>\n                                    <Button\n                                        color=\"primary\"\n                                        variant=\"contained\"\n                                        onClick={validateAndCreate}\n                                    >\n                                        Add Category\n                                    </Button>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                </>\n            </LazyComponent>\n        </>\n        </Navigator>\n    )\n\n}"]},"metadata":{},"sourceType":"module"}