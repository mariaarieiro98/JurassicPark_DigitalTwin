{"ast":null,"code":"var _jsxFileName = \"/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/DigitalTwin/FunctionalityDetails.tsx\",\n    _s = $RefreshSig$();\n\nimport { Grid, Typography } from '@material-ui/core';\nimport React, { useState } from 'react';\nimport { Redirect, useRouteMatch } from 'react-router-dom';\nimport { routes } from '../../App';\nimport { FunctionalityActions, MonitoredVariableActions } from '../../redux/actions';\nimport { getOrDownloadFunctionalities, getOrDownloadMonitoredVariables } from '../../utils/digitalTwins';\nimport { useMountEffect } from '../../utils/main';\nimport { Navigator } from '../templates/Navigator/Navigator';\nimport { useStore } from '../templates/Store/Store';\nimport { JPTable } from '../templates/Table/JPTable';\nimport { FunctionalityForm } from './FunctionalityForm'; //Esta página pretende dispor informação mais detalhada da funcionalidade correspondente disponível na página \"DigitalTwinMonitoring\"\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const FunctionalityDetails = () => {\n  _s();\n\n  //Recupera o id da funcionalidade seleccionada anteriormente na página Digital Twin Monitoring\n  const matchParams = useRouteMatch();\n  const id = matchParams.params.id; // Recuperar da base de dados as variáveis que estão a ser monitorizadas (MonitoredVariable)\n\n  const [fetching, setFetching] = useState(true);\n  const [error, setError] = useState('');\n  const {\n    data: monitoredVariables,\n    dispatchAction: dispatchMonitoredVariableActions\n  } = useStore('monitoredVariables');\n\n  const updateMonitoredVariables = monVar => dispatchMonitoredVariableActions(MonitoredVariableActions.updateMonitoredVariable(monVar)); // const [idMonitoredVariable,setIdMonitoredVariable] : [number,Function] = useState(-1)\n  // const [monitoredVariableName,setMonitoredVariableName] : [string,Function] = useState('')\n  // const [fbAssociated,setFbAssociated] : [string,Function] = useState('')\n  // const [funcIdAssociated,setFuncIdAssociated] : [number,Function] = useState(id)\n  // const initializeMonitoredVariable = (monVars: MonitoredVariable[]) => {\n  //     let monitoredVariable : MonitoredVariable = monVars.filter((monVar: MonitoredVariable) => monVar.idMonitoredVariable === parseInt(id))[0]\n  //     setIdMonitoredVariable(monitoredVariable.idMonitoredVariable)\n  //     setMonitoredVariableName(monitoredVariable.monitoredVariableName)\n  //     setFbAssociated(monitoredVariable.fbAssociated)\n  //     setFuncIdAssociated(monitoredVariable.funcIdAssociated)\n  //     console.log(monitoredVariable)\n  // }\n\n\n  useMountEffect(() => {\n    setFetching(true);\n    getOrDownloadMonitoredVariables(monitoredVariables).then(result => {\n      updateMonitoredVariables(result); //initializeMonitoredVariable(result)\n    }).catch(e => {\n      setError(e.msg);\n    }).finally(() => setFetching(false));\n  });\n\n  const buildMonitoredVariable = () => ({\n    idMonitoredVariable,\n    monitoredVariableName,\n    fbAssociated,\n    funcIdAssociated\n  }); //Cabeçalhos da tabela Variable + Funções Necessárias\n\n\n  const indexes_variable = [{\n    label: 'Variable',\n    key: 'monitoredVariableName'\n  }, {\n    label: 'Function Block',\n    key: 'fbAssociated'\n  }, {\n    label: 'Smart Component',\n    key: 'dtDescription'\n  }, {\n    label: 'Current Value',\n    key: 'dtMonitoredVariableEvent'\n  }, {\n    label: 'Graph',\n    key: 'dtName'\n  } //{label: 'Remove', key: 'dtName'},\n  ];\n\n  const getDataMonitoredVariable = () => monitoredVariables.map(monitoredVariable => {\n    return { ...monitoredVariable\n    };\n  }); //Variáveis e funções que permitem o redireccionamento para a página DigitalTwinMonitoring\n\n\n  const [redirectTo, setRedirectTo] = useState(\"\");\n\n  const redirectToList = () => setRedirectTo(routes.digitalTwinMonitoring); // Recuperar da base de dados as funcionalidades (Functionality)\n\n\n  const {\n    data: functionalities,\n    dispatchAction: dispatchFunctionalityActions\n  } = useStore('functionalities');\n\n  const updateFunctionalities = funcs => dispatchFunctionalityActions(FunctionalityActions.updateFunctionalities(funcs));\n\n  useMountEffect(() => {\n    setTimeout(() => {\n      setFetching(true);\n      getOrDownloadFunctionalities(functionalities).then(result => updateFunctionalities(result)).catch(e => setError(e.msg)).finally(() => setFetching(false));\n    }, 0);\n  }); //Recuperar dados da funcionalidade\n\n  let [functionalityName, setFunctionalityName] = useState([]);\n  let i = 0;\n\n  while (i < functionalities.length) {\n    if (functionalities[i].funcId == id) {\n      functionalityName = functionalities[i].funcName;\n    }\n\n    i++;\n  }\n\n  if (redirectTo !== \"\") return /*#__PURE__*/_jsxDEV(Redirect, {\n    to: redirectTo,\n    push: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 12\n  }, this);\n  return /*#__PURE__*/_jsxDEV(Navigator, {\n    title: \"Digital Twin monitoring\",\n    children: /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h5\",\n            noWrap: true,\n            children: functionalityName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: /*#__PURE__*/_jsxDEV(JPTable, {\n            sortedkey: \"idMonitoredVariable\",\n            data: getDataMonitoredVariable(),\n            updateData: updateMonitoredVariables,\n            indexes: indexes_variable,\n            tName: \"MonitoredVariable\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FunctionalityForm, {\n        cancel: {\n          action: redirectToList,\n          label: 'Cancel'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 5\n  }, this);\n};\n\n_s(FunctionalityDetails, \"0ERW8++HCA/6fenYd99nzLpVLvA=\", false, function () {\n  return [useRouteMatch, useStore, useMountEffect, useStore, useMountEffect];\n});\n\n_c = FunctionalityDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"FunctionalityDetails\");","map":{"version":3,"sources":["/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/DigitalTwin/FunctionalityDetails.tsx"],"names":["Grid","Typography","React","useState","Redirect","useRouteMatch","routes","FunctionalityActions","MonitoredVariableActions","getOrDownloadFunctionalities","getOrDownloadMonitoredVariables","useMountEffect","Navigator","useStore","JPTable","FunctionalityForm","FunctionalityDetails","matchParams","id","params","fetching","setFetching","error","setError","data","monitoredVariables","dispatchAction","dispatchMonitoredVariableActions","updateMonitoredVariables","monVar","updateMonitoredVariable","then","result","catch","e","msg","finally","buildMonitoredVariable","idMonitoredVariable","monitoredVariableName","fbAssociated","funcIdAssociated","indexes_variable","label","key","getDataMonitoredVariable","map","monitoredVariable","redirectTo","setRedirectTo","redirectToList","digitalTwinMonitoring","functionalities","dispatchFunctionalityActions","updateFunctionalities","funcs","setTimeout","functionalityName","setFunctionalityName","i","length","funcId","funcName","action"],"mappings":"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","sourcesContent":["import { Grid, Typography } from '@material-ui/core'\r\nimport { Clear } from '@material-ui/icons'\r\nimport { buildQueries } from '@testing-library/dom'\r\nimport React, { useState } from 'react'\r\nimport { match, Redirect, useRouteMatch } from 'react-router-dom'\r\nimport { routes } from '../../App'\r\nimport { Functionality, MonitoredVariable } from '../../model'\r\nimport { FunctionalityActions, MonitoredVariableActions } from '../../redux/actions'\r\nimport { associatedSmartComponentReducer } from '../../redux/reducers'\r\nimport { RequestResponseState } from '../../services/api/api'\r\nimport { updateMonitoredVariable } from '../../services/api/digital-twin'\r\nimport { getOrDownloadFunctionalities, getOrDownloadMonitoredVariables } from '../../utils/digitalTwins'\r\nimport { useMountEffect } from '../../utils/main'\r\nimport { Navigator } from '../templates/Navigator/Navigator'\r\nimport { useStore } from '../templates/Store/Store'\r\nimport { JPTable } from '../templates/Table/JPTable'\r\nimport { FunctionalityForm } from './FunctionalityForm'\r\n\r\n//Esta página pretende dispor informação mais detalhada da funcionalidade correspondente disponível na página \"DigitalTwinMonitoring\"\r\n\r\nexport const FunctionalityDetails = () => {\r\n\r\n    //Recupera o id da funcionalidade seleccionada anteriormente na página Digital Twin Monitoring\r\n    const matchParams : match = useRouteMatch()\r\n    const id = (matchParams.params as any).id\r\n\r\n    // Recuperar da base de dados as variáveis que estão a ser monitorizadas (MonitoredVariable)\r\n    const [fetching,setFetching] = useState(true)\r\n    const [error,setError] = useState('')\r\n    const {data: monitoredVariables, dispatchAction: dispatchMonitoredVariableActions} = useStore('monitoredVariables')\r\n    const updateMonitoredVariables = (monVar: MonitoredVariable[]) => dispatchMonitoredVariableActions(MonitoredVariableActions.updateMonitoredVariable(monVar))\r\n\r\n    // const [idMonitoredVariable,setIdMonitoredVariable] : [number,Function] = useState(-1)\r\n    // const [monitoredVariableName,setMonitoredVariableName] : [string,Function] = useState('')\r\n    // const [fbAssociated,setFbAssociated] : [string,Function] = useState('')\r\n    // const [funcIdAssociated,setFuncIdAssociated] : [number,Function] = useState(id)\r\n\r\n    // const initializeMonitoredVariable = (monVars: MonitoredVariable[]) => {\r\n\r\n    //     let monitoredVariable : MonitoredVariable = monVars.filter((monVar: MonitoredVariable) => monVar.idMonitoredVariable === parseInt(id))[0]\r\n        \r\n    //     setIdMonitoredVariable(monitoredVariable.idMonitoredVariable)\r\n    //     setMonitoredVariableName(monitoredVariable.monitoredVariableName)\r\n    //     setFbAssociated(monitoredVariable.fbAssociated)\r\n    //     setFuncIdAssociated(monitoredVariable.funcIdAssociated)\r\n\r\n    //     console.log(monitoredVariable)\r\n\r\n    // }\r\n\r\n    useMountEffect(() => {\r\n\r\n        setFetching(true)\r\n        getOrDownloadMonitoredVariables(monitoredVariables)\r\n            .then((result: MonitoredVariable[]) => {\r\n                updateMonitoredVariables(result)\r\n                //initializeMonitoredVariable(result)\r\n            })\r\n            .catch((e:RequestResponseState) => {\r\n                setError(e.msg)\r\n            })\r\n            .finally(() => setFetching(false))\r\n\r\n    })\r\n\r\n    const buildMonitoredVariable = () : MonitoredVariable => ({\r\n        idMonitoredVariable, monitoredVariableName, fbAssociated,\r\n        funcIdAssociated\r\n    })\r\n    \r\n    //Cabeçalhos da tabela Variable + Funções Necessárias\r\n    const indexes_variable = [\r\n        {label: 'Variable', key: 'monitoredVariableName'},\r\n        {label: 'Function Block', key: 'fbAssociated'},\r\n        {label: 'Smart Component', key: 'dtDescription'},\r\n        {label: 'Current Value', key: 'dtMonitoredVariableEvent'},\r\n        {label: 'Graph', key: 'dtName'},\r\n        //{label: 'Remove', key: 'dtName'},\r\n    ]\r\n\r\n    const getDataMonitoredVariable = () =>  monitoredVariables.map((monitoredVariable: MonitoredVariable) => {\r\n        return {\r\n            ...monitoredVariable\r\n        }\r\n\r\n    })\r\n\r\n    //Variáveis e funções que permitem o redireccionamento para a página DigitalTwinMonitoring\r\n    const [redirectTo, setRedirectTo] : [string, Function] = useState(\"\")\r\n\r\n    const redirectToList = () => setRedirectTo(routes.digitalTwinMonitoring)\r\n\r\n    // Recuperar da base de dados as funcionalidades (Functionality)\r\n    const {data:functionalities, dispatchAction:dispatchFunctionalityActions} = useStore('functionalities')\r\n    const updateFunctionalities = (funcs: Functionality[]) => dispatchFunctionalityActions(FunctionalityActions.updateFunctionalities(funcs))\r\n\r\n    useMountEffect(() => {\r\n\r\n    setTimeout(() => {\r\n\r\n    setFetching(true)\r\n    getOrDownloadFunctionalities(functionalities)\r\n        .then((result: Functionality[]) => updateFunctionalities(result))\r\n        .catch((e:RequestResponseState) => setError(e.msg))\r\n        .finally(() => setFetching(false))\r\n    }, 0)\r\n    })\r\n\r\n    //Recuperar dados da funcionalidade\r\n    let [functionalityName, setFunctionalityName] : [Functionality[], Function] = useState([])\r\n\r\n    let i = 0;\r\n    while(i < functionalities.length){\r\n\r\n        if(functionalities[i].funcId == id) {\r\n          functionalityName = functionalities[i].funcName\r\n        }\r\n        i++\r\n    }\r\n\r\n    if(redirectTo !== \"\") \r\n    return <Redirect to={redirectTo} push={true} />\r\n\r\n    return(\r\n    <Navigator title=\"Digital Twin monitoring\">\r\n    <>\r\n        <Grid item xs={12}> \r\n        <Grid item> \r\n                <Typography variant=\"h5\" noWrap>\r\n                {functionalityName}\r\n                </Typography>\r\n        </Grid>\r\n        </Grid> \r\n        <Grid item xs={12}>        \r\n            <Grid item>\r\n                <JPTable\r\n                    sortedkey=\"idMonitoredVariable\"\r\n                    data={getDataMonitoredVariable()} \r\n                    updateData={updateMonitoredVariables} \r\n                    indexes={indexes_variable} \r\n                    tName='MonitoredVariable'\r\n                />\r\n            </Grid>\r\n        </Grid>\r\n        {/* <Grid item xs={12}> \r\n            <Grid item>\r\n                <JPTable\r\n                    sortedkey=\"idMonitoredEvent\"\r\n                    data={getDataMonitoredVariable()} \r\n                    updateData={updateMonitoredVariables} \r\n                    indexes={indexes_event} \r\n                    tName='MonitoredVariable'\r\n                    extra={{\r\n                    // delete: {\r\n                    //     action: deleteFunctionalityAction,\r\n                    //     labelKey: 'funcName',\r\n                    //     onSuccessDelete: () => {}\r\n                    // },\r\n                    // edit: {\r\n                    //     action: showEditing\r\n                    // },\r\n                    // details: {\r\n                    //     action: redirectToList,\r\n                    // },\r\n                    // add: {\r\n                    //     action: showAddDetails\r\n                    // }\r\n                    }} \r\n                />\r\n            </Grid>\r\n        </Grid> */}\r\n        <FunctionalityForm\r\n            cancel={{action: redirectToList, label: 'Cancel'}}\r\n        />\r\n    </>\r\n    </Navigator>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}