{"ast":null,"code":"var _jsxFileName = \"/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/components/DigitalTwin/NewDigitalTwinFunctionality.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Navigator } from '../templates/Navigator/Navigator';\nimport { Redirect } from 'react-router-dom';\nimport { routes } from '../../App';\nimport { ConfirmActionStateLabel } from '../templates/ConfirmAction/ConfirmAction';\nimport { useMountEffect } from '../../utils/main';\nimport { useStore } from '../templates/Store/Store';\nimport { DigitalTwinActions } from '../../redux/actions';\nimport { getOrDownloadDigitalTwins } from '../../utils/digitalTwins';\nimport { createDigitalTwin } from '../../services/api/digital-twin';\n/**\r\n * for now\r\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst dtUserId = 1;\nexport const NewDigitalTwinFunctionality = () => {\n  _s();\n\n  useMountEffect(() => {\n    getOrDownloadDigitalTwins(digitalTwins).then(result => {\n      dispatchDigitalTwinsActions(DigitalTwinActions.updateDigitalTwins(result));\n    }).catch(e => {\n      console.error(e);\n    });\n  });\n  const {\n    data: digitalTwins,\n    dispatchAction: dispatchDigitalTwinsActions\n  } = useStore('digitalTwins'); //const {data: functionBlockCategories, dispatchAction:dispatchFunctionBlockCategoriesActions} = useStore('functionBlockCategories')\n\n  const [redirectTo, setRedirectTo] = useState(\"\");\n  const [dtName, setDtName] = useState('');\n  let dtId = 1;\n\n  const redirectToList = () => setRedirectTo(routes.digitalTwinMonitoring);\n\n  const buildDigitalTwin = () => ({\n    dtName,\n    dtId,\n    dtUserId\n  });\n\n  const redirectToListAndUpdateLocal = () => {\n    dispatchDigitalTwinsActions(DigitalTwinActions.addDigitalTwin(buildDigitalTwin()));\n    redirectToList();\n  };\n\n  const createDigitalTwinAction = () => {\n    return new Promise((res, rej) => {\n      createDigitalTwin(dtName.trim()).then(result => {\n        dtId = result.extra.lastInsertedId;\n        res('Functionality created');\n      }).catch(e => rej(e.msg));\n    });\n  };\n\n  if (redirectTo !== \"\") return /*#__PURE__*/_jsxDEV(Redirect, {\n    to: redirectTo,\n    push: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 12\n  }, this);\n  return /*#__PURE__*/_jsxDEV(Navigator, {\n    title: \"New Function Block\",\n    children: /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(DigitalTwinForm, {\n        cancel: {\n          action: redirectToList,\n          label: 'Cancel'\n        },\n        confirmDialog: {\n          buttonTitle: 'Confirm',\n          title: 'Creating Function Block',\n          initialState: ConfirmActionStateLabel.executing,\n          action: createDigitalTwinAction,\n          onSuccess: redirectToListAndUpdateLocal,\n          success: {\n            label: '',\n            positiveLabel: 'Ok'\n          },\n          error: {\n            label: '',\n            positiveLabel: 'Ok'\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 7\n      }, this)\n    }, void 0, false)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NewDigitalTwinFunctionality, \"72MaBWwZ1DVI538PWpAlhPRq+Gg=\", false, function () {\n  return [useMountEffect, useStore];\n});\n\n_c = NewDigitalTwinFunctionality;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewDigitalTwinFunctionality\");","map":{"version":3,"sources":["/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/components/DigitalTwin/NewDigitalTwinFunctionality.tsx"],"names":["React","useState","Navigator","Redirect","routes","ConfirmActionStateLabel","useMountEffect","useStore","DigitalTwinActions","getOrDownloadDigitalTwins","createDigitalTwin","dtUserId","NewDigitalTwinFunctionality","digitalTwins","then","result","dispatchDigitalTwinsActions","updateDigitalTwins","catch","e","console","error","data","dispatchAction","redirectTo","setRedirectTo","dtName","setDtName","dtId","redirectToList","digitalTwinMonitoring","buildDigitalTwin","redirectToListAndUpdateLocal","addDigitalTwin","createDigitalTwinAction","Promise","res","rej","trim","extra","lastInsertedId","msg","action","label","buttonTitle","title","initialState","executing","onSuccess","success","positiveLabel"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport { Navigator } from '../templates/Navigator/Navigator'\r\nimport { DigitalTwin } from '../../model/index'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { routes } from '../../App'\r\nimport { createFunctionBlock } from '../../services/api/function-block'\r\nimport { ConfirmActionStateLabel } from '../templates/ConfirmAction/ConfirmAction'\r\nimport { RequestResponseState } from '../../services/api/api'\r\nimport { setTimeout } from 'timers'\r\nimport { FunctionBlockForm } from './FunctionBlockForm'\r\nimport { toBase64, useMountEffect } from '../../utils/main'\r\nimport { useStore } from '../templates/Store/Store'\r\nimport { DigitalTwinActions } from '../../redux/actions'\r\nimport { getOrDownloadDigitalTwins } from '../../utils/digitalTwins'\r\nimport { createDigitalTwin } from '../../services/api/digital-twin'\r\n\r\n/**\r\n * for now\r\n */\r\n\r\nconst dtUserId = 1\r\n\r\nexport const NewDigitalTwinFunctionality = () => {\r\n\r\n  useMountEffect(() => {\r\n    \r\n    getOrDownloadDigitalTwins(digitalTwins)\r\n      .then((result: DigitalTwin[]) => {\r\n          dispatchDigitalTwinsActions(DigitalTwinActions.updateDigitalTwins(result))\r\n      })\r\n      .catch((e:RequestResponseState) => {\r\n          console.error(e)\r\n      })\r\n\r\n  })\r\n\r\n  const {data: digitalTwins, dispatchAction:dispatchDigitalTwinsActions} = useStore('digitalTwins')\r\n  //const {data: functionBlockCategories, dispatchAction:dispatchFunctionBlockCategoriesActions} = useStore('functionBlockCategories')\r\n\r\n  const [redirectTo, setRedirectTo] : [string, Function] = useState(\"\")\r\n\r\n  const [dtName,setDtName] : [string,Function] = useState('')\r\n\r\n  let dtId = 1\r\n\r\n  const redirectToList = () => setRedirectTo(routes.digitalTwinMonitoring)\r\n\r\n  const buildDigitalTwin = () : DigitalTwin => ({\r\n    dtName, dtId, dtUserId\r\n  })\r\n\r\n  const redirectToListAndUpdateLocal = () => {\r\n    dispatchDigitalTwinsActions(DigitalTwinActions.addDigitalTwin(buildDigitalTwin()))\r\n    redirectToList()\r\n  } \r\n\r\n  const createDigitalTwinAction = () : Promise<string> => {\r\n    \r\n    return new Promise<string>((res:Function, rej:Function)  => {\r\n\r\n        createDigitalTwin(dtName.trim())\r\n\r\n            .then((result: RequestResponseState) => {\r\n            dtId= result.extra.lastInsertedId\r\n                res('Functionality created')\r\n            })\r\n\r\n            .catch((e:RequestResponseState) => rej(e.msg))\r\n\r\n    })\r\n  }\r\n  \r\n  if(redirectTo !== \"\") \r\n    return <Redirect to={redirectTo} push={true} />\r\n  \r\n  return (\r\n    <Navigator title=\"New Function Block\">\r\n      <>\r\n      <DigitalTwinForm\r\n\r\n        cancel={{action: redirectToList, label: 'Cancel'}}\r\n        confirmDialog={{\r\n          buttonTitle: 'Confirm',\r\n          title: 'Creating Function Block',\r\n          initialState: ConfirmActionStateLabel.executing,\r\n          action: createDigitalTwinAction,\r\n          onSuccess: redirectToListAndUpdateLocal,\r\n          success: {\r\n            label: '',\r\n            positiveLabel: 'Ok'\r\n          },\r\n          error: {\r\n            label: '',\r\n            positiveLabel: 'Ok'\r\n          },\r\n        }}\r\n      />\r\n      </>\r\n    </Navigator>\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}