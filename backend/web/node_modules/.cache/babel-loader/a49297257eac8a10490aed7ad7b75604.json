{"ast":null,"code":"var _jsxFileName = \"/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/DigitalTwin/FunctionalityDetails.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { Card, CardContent, CardHeader, Divider, Grid, Typography } from '@material-ui/core';\nimport { Settings, Error } from '@material-ui/icons';\nimport React, { useState } from 'react';\nimport { Redirect, useRouteMatch } from 'react-router-dom';\nimport { routes } from '../../App';\nimport { FunctionalityActions, MonitoredVariableActions } from '../../redux/actions';\nimport { getOrDownloadFunctionalities, getOrDownloadMonitoredVariables } from '../../utils/digitalTwins';\nimport { useMountEffect } from '../../utils/main';\nimport { useSmartComponentStyles } from '../SmartComponents/style';\nimport { LazyComponent } from '../templates/LazyComponent/LazyComponent';\nimport { Navigator } from '../templates/Navigator/Navigator';\nimport { useStore } from '../templates/Store/Store';\nimport { JPTable } from '../templates/Table/JPTable';\nimport { FunctionalityForm } from './FunctionalityForm'; //Esta página pretende dispor informação mais detalhada da funcionalidade correspondente disponível na página \"DigitalTwinMonitoring\"\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst MonitoredVariableInstanceList = props => {\n  _s();\n\n  console.log(propsfbInstances);\n  const classes = useSmartComponentStyles();\n  return /*#__PURE__*/_jsxDEV(JPTable, {\n    data: props.fbInstances.map(i => {\n      return { ...i,\n        stateData: {\n          key: i.idMonitoredVariable,\n          data: i.idMonitoredVariable === 1 ? /*#__PURE__*/_jsxDEV(Settings, {\n            className: classes.functionBlockGood\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 61\n          }, this) : /*#__PURE__*/_jsxDEV(Error, {\n            className: classes.functionBlockError\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 114\n          }, this)\n        }\n      };\n    }),\n    indexes: [{\n      label: 'Variable',\n      key: 'monitoredVariableName'\n    }, {\n      label: 'Function Block',\n      key: 'fbAssociated'\n    }, {\n      label: 'Smart Component',\n      key: 'dtDescription'\n    }, {\n      label: 'Current Value',\n      key: 'dtMonitoredVariableEvent'\n    }, {\n      label: 'Graph',\n      key: 'dtName'\n    } //{label: 'Remove', key: 'dtName'},\n    ],\n    tName: \"\",\n    updateData: props.update,\n    sortedkey: \"id\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MonitoredVariableInstanceList, \"s6nXBa0WT17T8Dv0xiOGUVVHj/c=\", false, function () {\n  return [useSmartComponentStyles];\n});\n\n_c = MonitoredVariableInstanceList;\nexport const FunctionalityDetails = () => {\n  _s2();\n\n  //Recupera o id da funcionalidade seleccionada anteriormente na página Digital Twin Monitoring\n  const matchParams = useRouteMatch();\n  const id = matchParams.params.id; // Recuperar da base de dados as variáveis que estão a ser monitorizadas (MonitoredVariable)\n\n  const [fetching, setFetching] = useState(true);\n  const [error, setError] = useState('');\n  const {\n    data: monitoredVariables,\n    dispatchAction: dispatchMonitoredVariableActions\n  } = useStore('monitoredVariables');\n\n  const updateMonitoredVariables = monVar => dispatchMonitoredVariableActions(MonitoredVariableActions.updateMonitoredVariable(monVar));\n\n  const [selectedMonitoredVariables, setSelectedMonitoredVariables] = useState([]);\n  useMountEffect(() => {\n    setTimeout(() => {\n      setFetching(true);\n      getOrDownloadMonitoredVariables(monitoredVariables).then(result => updateMonitoredVariables(result)).catch(e => setError(e.msg)).finally(() => setFetching(false));\n    }, 0);\n  }); //Cabeçalhos da tabela + Funções Necessárias\n\n  const indexes = [{\n    label: 'Variable',\n    key: 'monitoredVariableName'\n  }, {\n    label: 'Function Block',\n    key: 'fbAssociated'\n  }, {\n    label: 'Smart Component',\n    key: 'dtDescription'\n  }, {\n    label: 'Current Value',\n    key: 'dtMonitoredVariableEvent'\n  }, {\n    label: 'Graph',\n    key: 'dtName'\n  } //{label: 'Remove', key: 'dtName'},\n  ];\n\n  const getDataMonitoredVariable = () => selectedMonitoredVariables.map(monitoredVariable => {\n    return { ...monitoredVariable\n    };\n  }); //Variáveis e funções que permitem o redireccionamento para a página DigitalTwinMonitoring\n\n\n  const [redirectTo, setRedirectTo] = useState(\"\");\n\n  const redirectToList = () => setRedirectTo(routes.digitalTwinMonitoring); // Recuperar da base de dados as funcionalidades (Functionality)\n\n\n  const {\n    data: functionalities,\n    dispatchAction: dispatchFunctionalityActions\n  } = useStore('functionalities');\n\n  const updateFunctionalities = funcs => dispatchFunctionalityActions(FunctionalityActions.updateFunctionalities(funcs));\n\n  useMountEffect(() => {\n    setTimeout(() => {\n      setFetching(true);\n      getOrDownloadFunctionalities(functionalities).then(result => updateFunctionalities(result)).catch(e => setError(e.msg)).finally(() => setFetching(false));\n    }, 0);\n  }); //Recuperar dados da funcionalidade\n\n  let [functionalityName, setFunctionalityName] = useState([]);\n  let i = 0;\n\n  while (i < functionalities.length) {\n    if (functionalities[i].funcId == id) {\n      functionalityName = functionalities[i].funcName;\n    }\n\n    i++;\n  }\n\n  const [initialData, setInititalData] = useState(false);\n  const [monitoredVariablesIntances, setMonitoredVariablesIntances] = useState([]);\n\n  const updateMonitoredVariablesInstances = instances => {\n    setMonitoredVariablesIntances(instances);\n    console.log(monitoredVariablesIntances);\n  };\n\n  if (redirectTo !== \"\") return /*#__PURE__*/_jsxDEV(Redirect, {\n    to: redirectTo,\n    push: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 12\n  }, this);\n  return /*#__PURE__*/_jsxDEV(Navigator, {\n    title: \"Digital Twin monitoring\",\n    children: /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h5\",\n            noWrap: true,\n            children: functionalityName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 8\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n              title: functionalityName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n              children: /*#__PURE__*/_jsxDEV(LazyComponent, {\n                loaded: initialData,\n                children: /*#__PURE__*/_jsxDEV(MonitoredVariableInstanceList, {\n                  fbInstances: monitoredVariablesIntances,\n                  update: updateMonitoredVariablesInstances\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 155,\n                  columnNumber: 29\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 154,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(FunctionalityForm, {\n          cancel: {\n            action: redirectToList,\n            label: 'Cancel'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 5\n      }, this)\n    }, void 0, false)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 141,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(FunctionalityDetails, \"NM4n3rvpTyUxJDh7Cju27oP6cDs=\", false, function () {\n  return [useRouteMatch, useStore, useMountEffect, useStore, useMountEffect];\n});\n\n_c2 = FunctionalityDetails;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MonitoredVariableInstanceList\");\n$RefreshReg$(_c2, \"FunctionalityDetails\");","map":{"version":3,"sources":["/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/DigitalTwin/FunctionalityDetails.tsx"],"names":["Card","CardContent","CardHeader","Divider","Grid","Typography","Settings","Error","React","useState","Redirect","useRouteMatch","routes","FunctionalityActions","MonitoredVariableActions","getOrDownloadFunctionalities","getOrDownloadMonitoredVariables","useMountEffect","useSmartComponentStyles","LazyComponent","Navigator","useStore","JPTable","FunctionalityForm","MonitoredVariableInstanceList","props","console","log","propsfbInstances","classes","fbInstances","map","i","stateData","key","idMonitoredVariable","data","functionBlockGood","functionBlockError","label","update","FunctionalityDetails","matchParams","id","params","fetching","setFetching","error","setError","monitoredVariables","dispatchAction","dispatchMonitoredVariableActions","updateMonitoredVariables","monVar","updateMonitoredVariable","selectedMonitoredVariables","setSelectedMonitoredVariables","setTimeout","then","result","catch","e","msg","finally","indexes","getDataMonitoredVariable","monitoredVariable","redirectTo","setRedirectTo","redirectToList","digitalTwinMonitoring","functionalities","dispatchFunctionalityActions","updateFunctionalities","funcs","functionalityName","setFunctionalityName","length","funcId","funcName","initialData","setInititalData","monitoredVariablesIntances","setMonitoredVariablesIntances","updateMonitoredVariablesInstances","instances","action"],"mappings":"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","sourcesContent":["import { Card, CardContent, CardHeader, Divider, Grid, Typography } from '@material-ui/core'\r\nimport { Clear, Settings , Error} from '@material-ui/icons'\r\nimport React, { useState } from 'react'\r\nimport { match, Redirect, useRouteMatch } from 'react-router-dom'\r\nimport { routes } from '../../App'\r\nimport { Functionality, MonitoredVariable } from '../../model'\r\nimport { FunctionalityActions, MonitoredVariableActions } from '../../redux/actions'\r\nimport { RequestResponseState } from '../../services/api/api'\r\nimport { getOrDownloadFunctionalities, getOrDownloadMonitoredVariables } from '../../utils/digitalTwins'\r\nimport { useMountEffect } from '../../utils/main'\r\nimport { useSmartComponentStyles } from '../SmartComponents/style'\r\nimport { LazyComponent } from '../templates/LazyComponent/LazyComponent'\r\nimport { Navigator } from '../templates/Navigator/Navigator'\r\nimport { useStore } from '../templates/Store/Store'\r\nimport { JPTable } from '../templates/Table/JPTable'\r\nimport { FunctionalityForm } from './FunctionalityForm'\r\n\r\n//Esta página pretende dispor informação mais detalhada da funcionalidade correspondente disponível na página \"DigitalTwinMonitoring\"\r\n\r\nconst MonitoredVariableInstanceList = (props: {fbInstances: any[], update: (instances: any[]) => void}) => {\r\n    console.log(propsfbInstances)\r\n    \r\n    const classes = useSmartComponentStyles()\r\n\r\n    return (\r\n        <JPTable\r\n            data={props.fbInstances.map((i:MonitoredVariable) => {\r\n\r\n                return {\r\n                    ...i,\r\n                    stateData: {\r\n                        key: i.idMonitoredVariable,\r\n                        data: i.idMonitoredVariable === 1 ? <Settings className={classes.functionBlockGood} /> : <Error className={classes.functionBlockError}/>\r\n                    }\r\n                }\r\n            })}\r\n            indexes={[\r\n                {label: 'Variable', key: 'monitoredVariableName'},\r\n                {label: 'Function Block', key: 'fbAssociated'},\r\n                {label: 'Smart Component', key: 'dtDescription'},\r\n                {label: 'Current Value', key: 'dtMonitoredVariableEvent'},\r\n                {label: 'Graph', key: 'dtName'},\r\n                //{label: 'Remove', key: 'dtName'},\r\n            ]}\r\n            tName=''\r\n            updateData={props.update}\r\n            sortedkey='id'\r\n\r\n        />\r\n    )\r\n}\r\n\r\nexport const FunctionalityDetails = () => {\r\n\r\n    //Recupera o id da funcionalidade seleccionada anteriormente na página Digital Twin Monitoring\r\n    const matchParams : match = useRouteMatch()\r\n    const id = (matchParams.params as any).id\r\n\r\n    // Recuperar da base de dados as variáveis que estão a ser monitorizadas (MonitoredVariable)\r\n    const [fetching,setFetching] = useState(true)\r\n    const [error,setError] = useState('')\r\n    const {data: monitoredVariables, dispatchAction: dispatchMonitoredVariableActions} = useStore('monitoredVariables')\r\n    const updateMonitoredVariables = (monVar: MonitoredVariable[]) => dispatchMonitoredVariableActions(MonitoredVariableActions.updateMonitoredVariable(monVar))\r\n    const [selectedMonitoredVariables, setSelectedMonitoredVariables] : [MonitoredVariable[], Function] = useState([])\r\n    \r\n    useMountEffect(() => {\r\n  \r\n    setTimeout(() => {\r\n  \r\n    setFetching(true)\r\n    getOrDownloadMonitoredVariables(monitoredVariables)\r\n        .then((result: MonitoredVariable[]) => updateMonitoredVariables(result))\r\n        .catch((e:RequestResponseState) => setError(e.msg))\r\n        .finally(() => setFetching(false))\r\n    }, 0)\r\n    })\r\n\r\n    //Cabeçalhos da tabela + Funções Necessárias\r\n    const indexes = [\r\n        {label: 'Variable', key: 'monitoredVariableName'},\r\n        {label: 'Function Block', key: 'fbAssociated'},\r\n        {label: 'Smart Component', key: 'dtDescription'},\r\n        {label: 'Current Value', key: 'dtMonitoredVariableEvent'},\r\n        {label: 'Graph', key: 'dtName'},\r\n        //{label: 'Remove', key: 'dtName'},\r\n    ]\r\n    \r\n    const getDataMonitoredVariable = () => selectedMonitoredVariables.map((monitoredVariable: MonitoredVariable) => {\r\n        return {\r\n            ...monitoredVariable\r\n        }\r\n\r\n    })\r\n    \r\n\r\n    //Variáveis e funções que permitem o redireccionamento para a página DigitalTwinMonitoring\r\n    const [redirectTo, setRedirectTo] : [string, Function] = useState(\"\")\r\n\r\n    const redirectToList = () => setRedirectTo(routes.digitalTwinMonitoring)\r\n\r\n    // Recuperar da base de dados as funcionalidades (Functionality)\r\n    const {data:functionalities, dispatchAction:dispatchFunctionalityActions} = useStore('functionalities')\r\n    const updateFunctionalities = (funcs: Functionality[]) => dispatchFunctionalityActions(FunctionalityActions.updateFunctionalities(funcs))\r\n\r\n    useMountEffect(() => {\r\n\r\n    setTimeout(() => {\r\n\r\n    setFetching(true)\r\n    getOrDownloadFunctionalities(functionalities)\r\n        .then((result: Functionality[]) => updateFunctionalities(result))\r\n        .catch((e:RequestResponseState) => setError(e.msg))\r\n        .finally(() => setFetching(false))\r\n    }, 0)\r\n    })\r\n\r\n    //Recuperar dados da funcionalidade\r\n    let [functionalityName, setFunctionalityName] : [Functionality[], Function] = useState([])\r\n\r\n    let i = 0;\r\n    while(i < functionalities.length){\r\n\r\n        if(functionalities[i].funcId == id) {\r\n          functionalityName = functionalities[i].funcName\r\n        }\r\n        i++\r\n    }\r\n\r\n    const [initialData,setInititalData] = useState(false)\r\n    const [monitoredVariablesIntances,setMonitoredVariablesIntances] : [MonitoredVariable[],Function] = useState([])\r\n    const updateMonitoredVariablesInstances = (instances: MonitoredVariable[]) => {\r\n\r\n        setMonitoredVariablesIntances(instances)\r\n        console.log(monitoredVariablesIntances)\r\n    }\r\n\r\n    if(redirectTo !== \"\") \r\n    return <Redirect to={redirectTo} push={true} />\r\n\r\n    return(\r\n    <Navigator title=\"Digital Twin monitoring\">\r\n    <>\r\n    <Grid item xs={12}> \r\n       <Grid item> \r\n            <Typography variant=\"h5\" noWrap>\r\n            {functionalityName}\r\n            </Typography>\r\n       </Grid>        \r\n        <Grid item>\r\n            <Card>\r\n                <CardHeader title={functionalityName} />\r\n                    <Divider />\r\n                    <CardContent>\r\n                        <LazyComponent loaded={initialData}>\r\n                            <MonitoredVariableInstanceList \r\n                                fbInstances={monitoredVariablesIntances}\r\n                                update={updateMonitoredVariablesInstances}\r\n                            />\r\n                        </LazyComponent>\r\n                </CardContent>\r\n            </Card>\r\n        </Grid>\r\n        <FunctionalityForm\r\n            cancel={{action: redirectToList, label: 'Cancel'}}\r\n        />\r\n    </Grid>\r\n    </>\r\n    </Navigator>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}