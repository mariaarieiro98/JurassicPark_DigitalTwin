{"ast":null,"code":"var _jsxFileName = \"/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/DigitalTwin/FunctionalityDetails.tsx\",\n    _s = $RefreshSig$();\n\nimport { Card, CardContent, CardHeader, Divider, Grid } from '@material-ui/core';\nimport React, { useState } from 'react';\nimport { Redirect, useRouteMatch } from 'react-router-dom';\nimport { routes } from '../../App';\nimport { FunctionalityActions, MonitoredEventActions, MonitoredVariableActions } from '../../redux/actions';\nimport { getOrDownloadFunctionalities, getOrDownloadMonitoredEvents, getOrDownloadMonitoredVariables } from '../../utils/digitalTwins';\nimport { useMountEffect } from '../../utils/main';\nimport { Navigator } from '../templates/Navigator/Navigator';\nimport { useStore } from '../templates/Store/Store';\nimport { JPTable } from '../templates/Table/JPTable';\nimport { FunctionalityForm } from './FunctionalityForm';\nimport { SocketConnection, SOCKET_EVENT } from '../../services/socket/socket';\nimport { useSmartComponentStyles } from '../SmartComponents/style';\nimport { deleteMonitoredVariable } from '../../services/api/digital-twin'; //Esta página pretende dispor informação mais detalhada da funcionalidade correspondente disponível na página \"DigitalTwinMonitoring\"\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nlet selectedMonitoredVariableGlobal = [];\nexport const FunctionalityDetails = () => {\n  _s();\n\n  //Recupera o id da funcionalidade seleccionada anteriormente na página Digital Twin Monitoring\n  const matchParams = useRouteMatch();\n  const id = matchParams.params.id; // Recuperar da base de dados as variáveis que estão a ser monitorizadas (MonitoredVariable)\n\n  const [fetching, setFetching] = useState(true);\n  const [error, setError] = useState('');\n  const {\n    data: monitoredVariables,\n    dispatchAction: dispatchMonitoredVariableActions\n  } = useStore('monitoredVariables');\n\n  const updateMonitoredVariables = monVar => dispatchMonitoredVariableActions(MonitoredVariableActions.updateMonitoredVariable(monVar));\n\n  const [selectedMonitoredVariable, setSelectedMonitoredVariable] = useState([]);\n\n  const initializeMonitoredVariable = monVars => {\n    let monitoredVariable = monVars.filter(monVar => monVar.funcIdAssociated === parseInt(id));\n    selectedMonitoredVariableGlobal = monitoredVariable;\n    setSelectedMonitoredVariable(monitoredVariable);\n  };\n\n  useMountEffect(() => {\n    setFetching(true);\n    getOrDownloadMonitoredVariables(monitoredVariables).then(result => {\n      updateMonitoredVariables(result);\n      initializeMonitoredVariable(result);\n    }).catch(e => {\n      setError(e.msg);\n    }).finally(() => setFetching(false));\n  }); // Recuperar da base de dados os eventos que estão a ser monitorizados (MonitoredEvent)\n\n  const {\n    data: monitoredEvents,\n    dispatchAction: dispatchMonitoredEventActions\n  } = useStore('monitoredEvents');\n\n  const updateMonitoredEvents = monEv => dispatchMonitoredEventActions(MonitoredEventActions.updateMonitoredEvent(monEv));\n\n  const [selectedMonitoredEvent, setSelectedMonitoredEvent] = useState([]);\n\n  const initializeMonitoredEvent = monEvs => {\n    let monitoredEvent = monEvs.filter(monEv => monEv.funcIdAssociated === parseInt(id));\n    setSelectedMonitoredEvent(monitoredEvent);\n  };\n\n  useMountEffect(() => {\n    setFetching(true);\n    getOrDownloadMonitoredEvents(monitoredEvents).then(result => {\n      updateMonitoredEvents(result);\n      initializeMonitoredEvent(result);\n    }).catch(e => {\n      setError(e.msg);\n    }).finally(() => setFetching(false));\n  }); // Cabeçalhos da tabela Variable + Funções Necessárias\n\n  const indexes_variable = [{\n    label: 'Variable',\n    key: 'monitoredVariableName'\n  }, {\n    label: 'Function Block',\n    key: 'id'\n  }, {\n    label: 'Smart Component',\n    key: 'sc'\n  }, {\n    label: 'Current Value',\n    key: 'currentValueData'\n  }]; // Cabeçalhos da tabela Event + Funções Necessárias\n\n  const indexes_event = [{\n    label: 'Event',\n    key: 'monitoredEventName'\n  }, {\n    label: 'Function Block',\n    key: 'fbAssociated'\n  }, {\n    label: 'Smart Component',\n    key: 'scAssociated'\n  }];\n\n  const getDataMonitoredEvent = () => selectedMonitoredEvent.map(monitoredEvent => {\n    return { ...monitoredEvent\n    };\n  });\n\n  const deleteMonitoredVariableAction = monVar => {\n    return new Promise(async (res, rej) => {\n      console.log(\"selected:\", selectedMonitoredVariableGlobal);\n      console.log(\"monVar:\", monVar);\n      console.log(\"monVar.fb\", monVar.id);\n      console.log(\"monVar.name\", monVar.monitoredVariableName);\n      console.log(\"monVar.sc\", monVar.sc);\n      let i = 0;\n      let idMonitoredVariable = 0;\n\n      while (i < selectedMonitoredVariableGlobal.length) {\n        if (selectedMonitoredVariableGlobal[i].monitoredVariableName === monVar.monitoredVariableName && selectedMonitoredVariableGlobal[i].scAssociated === monVar.sc && selectedMonitoredVariableGlobal[i].fbAssociated === monVar.id) {\n          idMonitoredVariable = selectedMonitoredVariableGlobal[i].idMonitoredVariable;\n        }\n\n        i++;\n      }\n\n      console.log(\"idMonitoredVariable:\", idMonitoredVariable);\n\n      if (!idMonitoredVariable) {\n        console.log(\"entrei aqui\");\n        rej('Error');\n        return;\n      }\n\n      try {\n        console.log(\"idMonitoredVariable:\", idMonitoredVariable);\n        const response = await deleteMonitoredVariable(idMonitoredVariable);\n        res(response);\n      } catch (err) {\n        rej(err);\n      }\n    });\n  }; // Variáveis e funções que permitem o redireccionamento para a página DigitalTwinMonitoring\n\n\n  const [redirectTo, setRedirectTo] = useState(\"\");\n\n  const redirectToList = () => setRedirectTo(routes.digitalTwinMonitoring); // Recuperar da base de dados as funcionalidades (Functionality)\n\n\n  const {\n    data: functionalities,\n    dispatchAction: dispatchFunctionalityActions\n  } = useStore('functionalities');\n\n  const updateFunctionalities = funcs => dispatchFunctionalityActions(FunctionalityActions.updateFunctionalities(funcs));\n\n  useMountEffect(() => {\n    setTimeout(() => {\n      setFetching(true);\n      getOrDownloadFunctionalities(functionalities).then(result => updateFunctionalities(result)).catch(e => setError(e.msg)).finally(() => setFetching(false));\n    }, 0);\n  }); // Recuperar dados da funcionalidade\n\n  let [functionalityName, setFunctionalityName] = useState([]);\n  let i = 0;\n\n  while (i < functionalities.length) {\n    if (functionalities[i].funcId == id) {\n      functionalityName = functionalities[i].funcName;\n    }\n\n    i++;\n  } // Estabelecer a ligação com os sockets\n\n\n  const socket = new SocketConnection(SocketConnection.getSmartComponentsNamespace());\n  const [monitoredVariableInstances, setMonitoredVariableInstances] = useState([]);\n  const classes = useSmartComponentStyles();\n\n  const updateMonitoredVariableInstances = monVars => setMonitoredVariableInstances(getMonitoredVariablesWithCurrentValue(monVars));\n\n  const updateMonitoredVariableInstance = monVars => {\n    for (const monVar of monVars) {\n      if (selectedMonitoredVariableGlobal.length === 0) {\n        return [];\n      } else {\n        for (const selectedMonVar of selectedMonitoredVariableGlobal) {\n          if (selectedMonVar.monitoredVariableName === monVar.monitoredVariableName && selectedMonVar.scAssociated === monVar.sc && selectedMonVar.fbAssociated === monVar.id) {\n            setMonitoredVariableInstances(prevMonitoredVariables => {\n              let newMonVar = true;\n              const newMonitoredVariables = getMonitoredVariablesWithCurrentValue(prevMonitoredVariables.map(oMonVar => {\n                if (oMonVar.monitoredVariableName === monVar.monitoredVariableName && oMonVar.sc === monVar.sc && oMonVar.id === monVar.id) {\n                  newMonVar = false;\n                  return monVar;\n                }\n\n                return oMonVar;\n              }));\n              if (newMonVar) return [...prevMonitoredVariables, addCurrentValueData(monVar)];\n              return newMonitoredVariables;\n            });\n          }\n        }\n      }\n    }\n  };\n\n  const getMonitoredVariablesWithCurrentValue = monVars => {\n    return monVars.map(monVar => addCurrentValueData(monVar));\n  };\n\n  const addCurrentValueData = monVar => {\n    return { ...monVar,\n      currentValueData: {\n        key: monVar.monitoredVariableName,\n        data: monVar.currentValue\n      }\n    };\n  };\n\n  const onDisconnect = () => {\n    setError(\"Server error\");\n    setFetching(false);\n  };\n\n  useMountEffect(() => {\n    setTimeout(() => {\n      socket.connect(() => {}, onDisconnect);\n      socket.emit(SOCKET_EVENT.UPDATE_BACKEND, \"UpdateMonitoredVariables\");\n      socket.addListener(SOCKET_EVENT.EDITED_MVI_EVENT, data => updateMonitoredVariableInstance(data));\n    }, 0);\n  }, () => socket === null || socket === void 0 ? void 0 : socket.disconnect());\n  if (redirectTo !== \"\") return /*#__PURE__*/_jsxDEV(Redirect, {\n    to: redirectTo,\n    push: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 275,\n    columnNumber: 12\n  }, this);\n  return /*#__PURE__*/_jsxDEV(Navigator, {\n    title: \"Digital Twin monitoring\",\n    children: /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n            title: functionalityName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 283,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              children: /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                children: /*#__PURE__*/_jsxDEV(JPTable, {\n                  sortedkey: \"idMonitoredVariable\",\n                  data: monitoredVariableInstances,\n                  updateData: updateMonitoredVariableInstances,\n                  indexes: indexes_variable,\n                  tName: \"MonitoredVariable\",\n                  extra: {// delete: {\n                    //     action: deleteMonitoredVariableAction,\n                    //     labelKey: 'monitoredVariableName',\n                    //     onSuccessDelete: () => {}\n                    // }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 287,\n                  columnNumber: 33\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 286,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 285,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              children: /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                children: /*#__PURE__*/_jsxDEV(JPTable, {\n                  sortedkey: \"idMonitoredEvent\",\n                  data: getDataMonitoredEvent(),\n                  updateData: updateMonitoredEvents,\n                  indexes: indexes_event,\n                  tName: \"MonitoredEvent\",\n                  extra: {\n                    // delete: {\n                    //     action: deleteMonitoredVariableAction,\n                    //     labelKey: 'monitoredVariableName',\n                    //     onSuccessDelete: () => {}\n                    // }\n                    trigger_button: {\n                      action: deleteMonitoredVariableAction,\n                      labelKey: 'monitoredVariableName',\n                      onSuccessDelete: () => {}\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 307,\n                  columnNumber: 33\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 306,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 305,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 304,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FunctionalityForm, {\n        cancel: {\n          action: redirectToList,\n          label: 'Cancel'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 278,\n    columnNumber: 5\n  }, this);\n};\n\n_s(FunctionalityDetails, \"injkQQL3hFNGM8l6d9KneDvrO6A=\", false, function () {\n  return [useRouteMatch, useStore, useMountEffect, useStore, useMountEffect, useStore, useMountEffect, useSmartComponentStyles, useMountEffect];\n});\n\n_c = FunctionalityDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"FunctionalityDetails\");","map":{"version":3,"sources":["/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/DigitalTwin/FunctionalityDetails.tsx"],"names":["Card","CardContent","CardHeader","Divider","Grid","React","useState","Redirect","useRouteMatch","routes","FunctionalityActions","MonitoredEventActions","MonitoredVariableActions","getOrDownloadFunctionalities","getOrDownloadMonitoredEvents","getOrDownloadMonitoredVariables","useMountEffect","Navigator","useStore","JPTable","FunctionalityForm","SocketConnection","SOCKET_EVENT","useSmartComponentStyles","deleteMonitoredVariable","selectedMonitoredVariableGlobal","FunctionalityDetails","matchParams","id","params","fetching","setFetching","error","setError","data","monitoredVariables","dispatchAction","dispatchMonitoredVariableActions","updateMonitoredVariables","monVar","updateMonitoredVariable","selectedMonitoredVariable","setSelectedMonitoredVariable","initializeMonitoredVariable","monVars","monitoredVariable","filter","funcIdAssociated","parseInt","then","result","catch","e","msg","finally","monitoredEvents","dispatchMonitoredEventActions","updateMonitoredEvents","monEv","updateMonitoredEvent","selectedMonitoredEvent","setSelectedMonitoredEvent","initializeMonitoredEvent","monEvs","monitoredEvent","indexes_variable","label","key","indexes_event","getDataMonitoredEvent","map","deleteMonitoredVariableAction","Promise","res","rej","console","log","monitoredVariableName","sc","i","idMonitoredVariable","length","scAssociated","fbAssociated","response","err","redirectTo","setRedirectTo","redirectToList","digitalTwinMonitoring","functionalities","dispatchFunctionalityActions","updateFunctionalities","funcs","setTimeout","functionalityName","setFunctionalityName","funcId","funcName","socket","getSmartComponentsNamespace","monitoredVariableInstances","setMonitoredVariableInstances","classes","updateMonitoredVariableInstances","getMonitoredVariablesWithCurrentValue","updateMonitoredVariableInstance","selectedMonVar","prevMonitoredVariables","newMonVar","newMonitoredVariables","oMonVar","addCurrentValueData","currentValueData","currentValue","onDisconnect","connect","emit","UPDATE_BACKEND","addListener","EDITED_MVI_EVENT","disconnect","trigger_button","action","labelKey","onSuccessDelete"],"mappings":"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","sourcesContent":["import { Button, Card, CardContent, CardHeader, Divider, Grid } from '@material-ui/core'\r\nimport React, { useState } from 'react'\r\nimport { match, Redirect, useRouteMatch } from 'react-router-dom'\r\nimport { routes } from '../../App'\r\nimport { Functionality, MonitoredEvent, MonitoredVariable, MonitoredVariableInstance } from '../../model'\r\nimport { FunctionalityActions, MonitoredEventActions, MonitoredVariableActions } from '../../redux/actions'\r\nimport { RequestResponseState } from '../../services/api/api'\r\nimport { getOrDownloadFunctionalities, getOrDownloadMonitoredEvents, getOrDownloadMonitoredVariables } from '../../utils/digitalTwins'\r\nimport { useMountEffect } from '../../utils/main'\r\nimport { Navigator } from '../templates/Navigator/Navigator'\r\nimport { useStore } from '../templates/Store/Store'\r\nimport { JPTable } from '../templates/Table/JPTable'\r\nimport { FunctionalityForm } from './FunctionalityForm'\r\nimport { SocketConnection, SOCKET_EVENT } from '../../services/socket/socket'\r\nimport { useSmartComponentStyles } from '../SmartComponents/style'\r\nimport { deleteMonitoredVariable } from '../../services/api/digital-twin'\r\n\r\n//Esta página pretende dispor informação mais detalhada da funcionalidade correspondente disponível na página \"DigitalTwinMonitoring\"\r\n\r\nlet selectedMonitoredVariableGlobal : MonitoredVariable[] = []\r\n\r\ninterface MonitoredVariableWithCurrentValue extends MonitoredVariableInstance {\r\n    currentValueData: {\r\n        key: string | undefined\r\n        data: number\r\n    }\r\n}\r\n\r\nexport const FunctionalityDetails = () => {\r\n\r\n    //Recupera o id da funcionalidade seleccionada anteriormente na página Digital Twin Monitoring\r\n    const matchParams : match = useRouteMatch()\r\n    const id = (matchParams.params as any).id\r\n\r\n    // Recuperar da base de dados as variáveis que estão a ser monitorizadas (MonitoredVariable)\r\n    const [fetching,setFetching] = useState(true)\r\n    const [error,setError] = useState('')\r\n    const {data: monitoredVariables, dispatchAction: dispatchMonitoredVariableActions} = useStore('monitoredVariables')\r\n    const updateMonitoredVariables = (monVar: MonitoredVariable[]) => dispatchMonitoredVariableActions(MonitoredVariableActions.updateMonitoredVariable(monVar))\r\n\r\n    const [selectedMonitoredVariable, setSelectedMonitoredVariable] : [MonitoredVariable[], Function] = useState([])\r\n\r\n    const initializeMonitoredVariable = (monVars: MonitoredVariable[]) => {\r\n        \r\n        let monitoredVariable : MonitoredVariable[] = monVars.filter((monVar) => monVar.funcIdAssociated === parseInt(id))\r\n        \r\n        selectedMonitoredVariableGlobal = monitoredVariable;\r\n\r\n        setSelectedMonitoredVariable(monitoredVariable)\r\n\r\n    }\r\n\r\n    useMountEffect(() => {\r\n        setFetching(true)\r\n        getOrDownloadMonitoredVariables(monitoredVariables)\r\n            .then((result: MonitoredVariable[]) => {\r\n                updateMonitoredVariables(result)\r\n                initializeMonitoredVariable(result)\r\n            })\r\n            .catch((e:RequestResponseState) => {\r\n                setError(e.msg)\r\n            })\r\n            .finally(() => setFetching(false))\r\n    })\r\n\r\n    // Recuperar da base de dados os eventos que estão a ser monitorizados (MonitoredEvent)\r\n    const {data: monitoredEvents, dispatchAction: dispatchMonitoredEventActions} = useStore('monitoredEvents')\r\n    const updateMonitoredEvents = (monEv: MonitoredEvent[]) => dispatchMonitoredEventActions(MonitoredEventActions.updateMonitoredEvent(monEv))\r\n\r\n    const [selectedMonitoredEvent, setSelectedMonitoredEvent] : [MonitoredEvent[], Function] = useState([])\r\n    \r\n    const initializeMonitoredEvent = (monEvs: MonitoredEvent[]) => {\r\n            \r\n        let monitoredEvent : MonitoredEvent[] = monEvs.filter((monEv) => monEv.funcIdAssociated === parseInt(id))\r\n            \r\n        setSelectedMonitoredEvent(monitoredEvent)\r\n    \r\n    }\r\n    \r\n    useMountEffect(() => {\r\n    \r\n        setFetching(true)\r\n        getOrDownloadMonitoredEvents(monitoredEvents)\r\n            .then((result: MonitoredEvent[]) => {\r\n                updateMonitoredEvents(result)\r\n                initializeMonitoredEvent(result)\r\n            })\r\n            .catch((e:RequestResponseState) => {\r\n                setError(e.msg)\r\n            })\r\n            .finally(() => setFetching(false))\r\n    \r\n    })\r\n    \r\n    // Cabeçalhos da tabela Variable + Funções Necessárias\r\n    const indexes_variable = [\r\n        {label: 'Variable', key: 'monitoredVariableName'},\r\n        {label: 'Function Block', key: 'id'},\r\n        {label: 'Smart Component', key: 'sc'},\r\n        {label: 'Current Value', key: 'currentValueData'},\r\n    ]\r\n\r\n    // Cabeçalhos da tabela Event + Funções Necessárias\r\n    const indexes_event = [\r\n        {label: 'Event', key: 'monitoredEventName'},\r\n        {label: 'Function Block', key: 'fbAssociated'},\r\n        {label: 'Smart Component', key: 'scAssociated'},\r\n    ]\r\n\r\n    const getDataMonitoredEvent = () =>  selectedMonitoredEvent.map((monitoredEvent: MonitoredEvent) => {    \r\n        \r\n        return {\r\n            ...monitoredEvent\r\n        }\r\n\r\n    })\r\n\r\n    const deleteMonitoredVariableAction = (monVar: MonitoredVariableInstance) : Promise<any> => {\r\n        \r\n        return new Promise(async(res:Function,rej:Function) => {\r\n            \r\n            console.log(\"selected:\", selectedMonitoredVariableGlobal)\r\n            console.log(\"monVar:\", monVar)\r\n            console.log(\"monVar.fb\",monVar.id)\r\n            console.log(\"monVar.name\",monVar.monitoredVariableName)\r\n            console.log(\"monVar.sc\",monVar.sc)\r\n\r\n            let i = 0\r\n            let idMonitoredVariable = 0\r\n\r\n            while(i < selectedMonitoredVariableGlobal.length) {\r\n                if((selectedMonitoredVariableGlobal[i].monitoredVariableName === monVar.monitoredVariableName) && (selectedMonitoredVariableGlobal[i].scAssociated === monVar.sc) && (selectedMonitoredVariableGlobal[i].fbAssociated === monVar.id)){\r\n                    idMonitoredVariable = selectedMonitoredVariableGlobal[i].idMonitoredVariable\r\n                }\r\n                i++\r\n            }\r\n    \r\n            console.log(\"idMonitoredVariable:\",idMonitoredVariable)\r\n            if(!idMonitoredVariable) {\r\n                console.log(\"entrei aqui\")\r\n                rej('Error')\r\n                return\r\n            }\r\n            \r\n            try {\r\n                console.log(\"idMonitoredVariable:\",idMonitoredVariable)\r\n                const response : RequestResponseState = await deleteMonitoredVariable(idMonitoredVariable)\r\n                res(response)\r\n              }\r\n    \r\n            catch(err) {\r\n                rej(err)\r\n            }\r\n        })\r\n    }\r\n\r\n    // Variáveis e funções que permitem o redireccionamento para a página DigitalTwinMonitoring\r\n    const [redirectTo, setRedirectTo] : [string, Function] = useState(\"\")\r\n\r\n    const redirectToList = () => setRedirectTo(routes.digitalTwinMonitoring)\r\n\r\n    // Recuperar da base de dados as funcionalidades (Functionality)\r\n    const {data:functionalities, dispatchAction:dispatchFunctionalityActions} = useStore('functionalities')\r\n    const updateFunctionalities = (funcs: Functionality[]) => dispatchFunctionalityActions(FunctionalityActions.updateFunctionalities(funcs))\r\n\r\n    useMountEffect(() => {\r\n    setTimeout(() => {\r\n\r\n    setFetching(true)\r\n    getOrDownloadFunctionalities(functionalities)\r\n        .then((result: Functionality[]) => updateFunctionalities(result))\r\n        .catch((e:RequestResponseState) => setError(e.msg))\r\n        .finally(() => setFetching(false))\r\n    }, 0)\r\n    })\r\n\r\n    // Recuperar dados da funcionalidade\r\n    let [functionalityName, setFunctionalityName] : [Functionality[], Function] = useState([])\r\n\r\n    let i = 0;\r\n    while(i < functionalities.length){\r\n\r\n        if(functionalities[i].funcId == id) {\r\n          functionalityName = functionalities[i].funcName\r\n        }\r\n        i++\r\n    }\r\n\r\n    // Estabelecer a ligação com os sockets\r\n    const socket : SocketConnection = new SocketConnection(SocketConnection.getSmartComponentsNamespace())\r\n    \r\n    const [monitoredVariableInstances,setMonitoredVariableInstances] : [MonitoredVariableWithCurrentValue[],Function] = useState([])\r\n\r\n    const classes = useSmartComponentStyles()\r\n\r\n    const updateMonitoredVariableInstances = (monVars:MonitoredVariableInstance[]) => setMonitoredVariableInstances(getMonitoredVariablesWithCurrentValue(monVars))\r\n\r\n    const updateMonitoredVariableInstance = (monVars: MonitoredVariableInstance[]) => {    \r\n     \r\n        for(const monVar of monVars) {\r\n            \r\n            if(selectedMonitoredVariableGlobal.length === 0){\r\n                return []\r\n            }\r\n            \r\n                 \r\n            else{\r\n\r\n               for(const selectedMonVar of selectedMonitoredVariableGlobal){\r\n\r\n                    if((selectedMonVar.monitoredVariableName === monVar.monitoredVariableName) && (selectedMonVar.scAssociated === monVar.sc) && (selectedMonVar.fbAssociated === monVar.id)){\r\n                        \r\n                        setMonitoredVariableInstances((prevMonitoredVariables: MonitoredVariableWithCurrentValue[]) => {\r\n\r\n                            let newMonVar = true\r\n                \r\n                            const newMonitoredVariables = getMonitoredVariablesWithCurrentValue(prevMonitoredVariables.map((oMonVar:MonitoredVariableWithCurrentValue) => {\r\n                \r\n                                if((oMonVar.monitoredVariableName === monVar.monitoredVariableName) && (oMonVar.sc === monVar.sc) &&  (oMonVar.id === monVar.id)) {\r\n                                    newMonVar = false\r\n                                    return monVar\r\n                                }\r\n                                return oMonVar\r\n                \r\n                            }))\r\n                        \r\n                            if(newMonVar)\r\n                                return [...prevMonitoredVariables, addCurrentValueData(monVar)]\r\n                            return newMonitoredVariables\r\n                \r\n                        })\r\n                    }\r\n                }\r\n            }\r\n            \r\n        }\r\n     \r\n    }\r\n\r\n    const getMonitoredVariablesWithCurrentValue = (monVars: MonitoredVariableInstance[]) : MonitoredVariableWithCurrentValue[] => {\r\n\r\n        return monVars.map((monVar:MonitoredVariableInstance) => addCurrentValueData(monVar))\r\n\r\n    }\r\n\r\n    const addCurrentValueData = (monVar: MonitoredVariableInstance) : MonitoredVariableWithCurrentValue => {\r\n\r\n        return (\r\n            {\r\n                ...monVar, \r\n                currentValueData:  {\r\n                    key: monVar.monitoredVariableName,\r\n                    data: monVar.currentValue\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    const onDisconnect = () => {\r\n        setError(\"Server error\")\r\n        setFetching(false)\r\n    }\r\n\r\n    useMountEffect(() => {\r\n        setTimeout(() => {\r\n\r\n            socket.connect(() => {}, onDisconnect)\r\n            socket.emit(SOCKET_EVENT.UPDATE_BACKEND,\"UpdateMonitoredVariables\")\r\n            socket.addListener(SOCKET_EVENT.EDITED_MVI_EVENT, (data) => updateMonitoredVariableInstance(data))\r\n        }, 0)\r\n\r\n    }, () => socket?.disconnect())\r\n   \r\n    if(redirectTo !== \"\") \r\n    return <Redirect to={redirectTo} push={true} />\r\n\r\n    return(\r\n    <Navigator title=\"Digital Twin monitoring\">\r\n    <>\r\n        <Grid item>\r\n            <Card>\r\n                <CardHeader title={functionalityName} />\r\n                <Divider />\r\n                    <CardContent>\r\n                        <Grid item xs={12}>        \r\n                            <Grid item>\r\n                                <JPTable\r\n                                    sortedkey=\"idMonitoredVariable\"\r\n                                    data={monitoredVariableInstances} \r\n                                    updateData={updateMonitoredVariableInstances} \r\n                                    indexes={indexes_variable} \r\n                                    tName='MonitoredVariable'\r\n                                    extra={{\r\n                                        // delete: {\r\n                                        //     action: deleteMonitoredVariableAction,\r\n                                        //     labelKey: 'monitoredVariableName',\r\n                                        //     onSuccessDelete: () => {}\r\n                                        // }\r\n                                    }} \r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                    </CardContent>\r\n                    <CardContent>\r\n                        <Grid item xs={12}>        \r\n                            <Grid item>\r\n                                <JPTable\r\n                                    sortedkey=\"idMonitoredEvent\"\r\n                                    data={getDataMonitoredEvent()} \r\n                                    updateData={updateMonitoredEvents} \r\n                                    indexes={indexes_event} \r\n                                    tName='MonitoredEvent'\r\n                                    extra={{\r\n                                        // delete: {\r\n                                        //     action: deleteMonitoredVariableAction,\r\n                                        //     labelKey: 'monitoredVariableName',\r\n                                        //     onSuccessDelete: () => {}\r\n                                        // }\r\n                                        trigger_button: {\r\n                                            action: deleteMonitoredVariableAction,\r\n                                            labelKey: 'monitoredVariableName',\r\n                                            onSuccessDelete: () => {}\r\n                                        }\r\n                                    }} \r\n                                />\r\n                                \r\n                            </Grid>\r\n                            \r\n                        </Grid>\r\n                    </CardContent>\r\n            </Card>\r\n        </Grid>\r\n        <FunctionalityForm\r\n            cancel={{action: redirectToList, label: 'Cancel'}}\r\n        />\r\n    </>\r\n    </Navigator>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}