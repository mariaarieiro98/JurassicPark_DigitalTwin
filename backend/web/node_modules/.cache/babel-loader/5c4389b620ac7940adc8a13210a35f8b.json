{"ast":null,"code":"var _jsxFileName = \"/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/DigitalTwin/NewDigitalTwin.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Navigator } from '../templates/Navigator/Navigator';\nimport { Redirect } from 'react-router-dom';\nimport { routes } from '../../App';\nimport { createFunctionBlock } from '../../services/api/function-block';\nimport { ConfirmActionStateLabel } from '../templates/ConfirmAction/ConfirmAction';\nimport { setTimeout } from 'timers';\nimport { DigitalTwinForm } from './DigitalTwinForm';\nimport { toBase64, useMountEffect } from '../../utils/main';\nimport { useStore } from '../templates/Store/Store';\nimport { DigitalTwinActions, FunctionBlockCategoriesActions } from '../../redux/actions';\nimport { getOrDownloadDigitalTwins } from '../../utils/digitalTwins';\n/**\r\n * for now\r\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst fbUserId = 1;\nexport const NewDigitalTwin = () => {\n  _s();\n\n  useMountEffect(() => {\n    getOrDownloadDigitalTwins(digitalTwins).then(result => {\n      dispatchDigitalTwinActions(DigitalTwinActions.updateDigitalTwins(result));\n    }).catch(e => {\n      console.error(e);\n    });\n  });\n  const {\n    data: digitalTwins,\n    dispatchAction: dispatchDigitalTwinActions\n  } = useStore('digitalTwins');\n  const [redirectTo, setRedirectTo] = useState(\"\");\n  const [dtName, SetDtName] = useState('');\n  const [fbInputVariables, setFbInputVariables] = useState([]);\n  const [fbOutputVariables, setFbOutputVariables] = useState([]);\n  const [fbInputEvents, setFbInputEvents] = useState([]);\n  const [fbOutputEvents, setFbOutputEvents] = useState([]);\n  let fbId = 1;\n\n  const redirectToList = () => setRedirectTo(routes.functionBlockList);\n\n  const buildDigitalTwin = () => ({\n    dtName,\n    dtId,\n    dtUserId,\n    fbInputEvents,\n    fbOutputEvents,\n    fbInputVariables,\n    fbOutputVariables\n  });\n\n  const redirectToListAndUpdateLocal = () => {\n    dispatchDigitalTwinActions(DigitalTwinActions.addFunctionBlock(buildFunctionBlock()));\n    const newCategories = functionBlockCategories.map(cat => {\n      var _cat$functionBlocks;\n\n      if (cat.fbcId !== fbCategory.fbcId) return cat;\n      const oldCatFbs = (_cat$functionBlocks = cat.functionBlocks) !== null && _cat$functionBlocks !== void 0 ? _cat$functionBlocks : [];\n      return { ...cat,\n        functionBlocks: [...oldCatFbs, fbType]\n      };\n    });\n    dispatchFunctionBlockCategoriesActions(FunctionBlockCategoriesActions.updateFunctionBlockCategories(newCategories));\n    redirectToList();\n  };\n\n  const createFunctionBlockAction = () => {\n    const functionBlock = buildFunctionBlock();\n    return new Promise((res, rej) => {\n      setTimeout(() => {\n        toBase64(fbImplFile).then(file => {\n          createFunctionBlock(functionBlock, file).then(r => {\n            fbId = r.extra.lastInsertedId;\n            res(r.msg);\n          }).catch(e => rej(e.msg));\n        }).catch(e => rej('Error sending implementation file'));\n      }, 0);\n    });\n  };\n\n  if (redirectTo !== \"\") return /*#__PURE__*/_jsxDEV(Redirect, {\n    to: redirectTo,\n    push: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 12\n  }, this);\n  return /*#__PURE__*/_jsxDEV(Navigator, {\n    title: \"New Function Block\",\n    children: /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(DigitalTwinForm, {\n        dtName: {\n          dtName,\n          setDtName\n        },\n        fbInputVariables: {\n          fbInputVariables,\n          setFbInputVariables\n        },\n        fbOutputVariables: {\n          fbOutputVariables,\n          setFbOutputVariables\n        },\n        cancel: {\n          action: redirectToList,\n          label: 'Cancel'\n        },\n        confirmDialog: {\n          buttonTitle: 'Confirm',\n          title: 'Creating Function Block',\n          initialState: ConfirmActionStateLabel.executing,\n          action: createFunctionBlockAction,\n          onSuccess: redirectToListAndUpdateLocal,\n          success: {\n            label: '',\n            positiveLabel: 'Ok'\n          },\n          error: {\n            label: '',\n            positiveLabel: 'Ok'\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 7\n      }, this)\n    }, void 0, false)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NewDigitalTwin, \"X7o58y174hTpxcUfSsxm+gbbHfM=\", false, function () {\n  return [useMountEffect, useStore];\n});\n\n_c = NewDigitalTwin;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewDigitalTwin\");","map":{"version":3,"sources":["/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/DigitalTwin/NewDigitalTwin.tsx"],"names":["React","useState","Navigator","Redirect","routes","createFunctionBlock","ConfirmActionStateLabel","setTimeout","DigitalTwinForm","toBase64","useMountEffect","useStore","DigitalTwinActions","FunctionBlockCategoriesActions","getOrDownloadDigitalTwins","fbUserId","NewDigitalTwin","digitalTwins","then","result","dispatchDigitalTwinActions","updateDigitalTwins","catch","e","console","error","data","dispatchAction","redirectTo","setRedirectTo","dtName","SetDtName","fbInputVariables","setFbInputVariables","fbOutputVariables","setFbOutputVariables","fbInputEvents","setFbInputEvents","fbOutputEvents","setFbOutputEvents","fbId","redirectToList","functionBlockList","buildDigitalTwin","dtId","dtUserId","redirectToListAndUpdateLocal","addFunctionBlock","buildFunctionBlock","newCategories","functionBlockCategories","map","cat","fbcId","fbCategory","oldCatFbs","functionBlocks","fbType","dispatchFunctionBlockCategoriesActions","updateFunctionBlockCategories","createFunctionBlockAction","functionBlock","Promise","res","rej","fbImplFile","file","r","extra","lastInsertedId","msg","setDtName","action","label","buttonTitle","title","initialState","executing","onSuccess","success","positiveLabel"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport { Navigator } from '../templates/Navigator/Navigator'\r\nimport { FBGeneralCategory, Variable, Event, FunctionBlock, ExternalDependency, FBCategory, DigitalTwin } from '../../model/index'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { routes } from '../../App'\r\nimport { createFunctionBlock } from '../../services/api/function-block'\r\nimport { ConfirmActionStateLabel } from '../templates/ConfirmAction/ConfirmAction'\r\nimport { RequestResponseState } from '../../services/api/api'\r\nimport { setTimeout } from 'timers'\r\nimport { DigitalTwinForm } from './DigitalTwinForm'\r\nimport { toBase64, useMountEffect } from '../../utils/main'\r\nimport { useStore } from '../templates/Store/Store'\r\nimport { DigitalTwinActions, FunctionBlockActions, FunctionBlockCategoriesActions } from '../../redux/actions'\r\nimport { getOrDownloadFunctionBlocks } from '../../utils/functionBlock'\r\nimport { getOrDownloadDigitalTwins } from '../../utils/digitalTwins'\r\n\r\n/**\r\n * for now\r\n */\r\n\r\nconst fbUserId = 1\r\n\r\nexport const NewDigitalTwin = () => {\r\n\r\n  useMountEffect(() => {\r\n    \r\n    getOrDownloadDigitalTwins(digitalTwins)\r\n      .then((result: DigitalTwin[]) => {\r\n          dispatchDigitalTwinActions(DigitalTwinActions.updateDigitalTwins(result))\r\n      })\r\n      .catch((e:RequestResponseState) => {\r\n          console.error(e)\r\n      })\r\n\r\n  })\r\n\r\n  const {data: digitalTwins, dispatchAction:dispatchDigitalTwinActions} = useStore('digitalTwins')\r\n  \r\n  const [redirectTo, setRedirectTo] : [string, Function] = useState(\"\")\r\n\r\n  const [dtName,SetDtName] : [string,Function] = useState('')\r\n  \r\n  const [fbInputVariables, setFbInputVariables] : [Variable[],Function] = useState([])\r\n  const [fbOutputVariables, setFbOutputVariables] : [Variable[],Function] = useState([])\r\n\r\n  const [fbInputEvents, setFbInputEvents] : [Event[], Function] = useState([])\r\n  const [fbOutputEvents, setFbOutputEvents] : [Event[], Function] = useState([])\r\n\r\n  let fbId = 1\r\n\r\n  const redirectToList = () => setRedirectTo(routes.functionBlockList)\r\n\r\n  const buildDigitalTwin = () : DigitalTwin => ({\r\n    dtName, dtId,\r\n    dtUserId, fbInputEvents, \r\n    fbOutputEvents, fbInputVariables, \r\n    fbOutputVariables,\r\n  })\r\n\r\n  const redirectToListAndUpdateLocal = () => {\r\n    dispatchDigitalTwinActions(DigitalTwinActions.addFunctionBlock(buildFunctionBlock()))\r\n\r\n    const newCategories = functionBlockCategories.map((cat: FBCategory) => {\r\n\r\n      if(cat.fbcId !== fbCategory.fbcId)\r\n        return cat\r\n\r\n      const oldCatFbs = cat.functionBlocks ?? []\r\n\r\n      return {...cat, functionBlocks: [...oldCatFbs, fbType]}\r\n\r\n    })\r\n\r\n    dispatchFunctionBlockCategoriesActions(FunctionBlockCategoriesActions.updateFunctionBlockCategories(newCategories))\r\n    redirectToList()\r\n  } \r\n\r\n  const createFunctionBlockAction = () : Promise<string> => {\r\n\r\n    const functionBlock : FunctionBlock = buildFunctionBlock()\r\n    \r\n    return new Promise<string>((res:Function, rej:Function)  => {\r\n\r\n      setTimeout(() => {\r\n\r\n        toBase64(fbImplFile)\r\n\r\n          .then((file:string) => {\r\n\r\n            createFunctionBlock(functionBlock,file)\r\n      \r\n              .then((r:RequestResponseState) => {\r\n                fbId = r.extra.lastInsertedId\r\n                res(r.msg)\r\n              }) \r\n              .catch((e:RequestResponseState) => rej(e.msg))\r\n\r\n\r\n          })\r\n\r\n          .catch(e => rej('Error sending implementation file'))\r\n\r\n      },0)\r\n\r\n    }) \r\n\r\n  }\r\n  \r\n  if(redirectTo !== \"\") \r\n    return <Redirect to={redirectTo} push={true} />\r\n  \r\n  return (\r\n    <Navigator title=\"New Function Block\">\r\n      <>\r\n      <DigitalTwinForm \r\n        dtName={{dtName, setDtName}}\r\n        fbInputVariables={{fbInputVariables,setFbInputVariables}}\r\n        fbOutputVariables={{fbOutputVariables,setFbOutputVariables}}\r\n        cancel={{action: redirectToList, label: 'Cancel'}}\r\n        confirmDialog={{\r\n          buttonTitle: 'Confirm',\r\n          title: 'Creating Function Block',\r\n          initialState: ConfirmActionStateLabel.executing,\r\n          action: createFunctionBlockAction,\r\n          onSuccess: redirectToListAndUpdateLocal,\r\n          success: {\r\n            label: '',\r\n            positiveLabel: 'Ok'\r\n          },\r\n          error: {\r\n            label: '',\r\n            positiveLabel: 'Ok'\r\n          },\r\n        }}\r\n      />\r\n      </>\r\n    </Navigator>\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}