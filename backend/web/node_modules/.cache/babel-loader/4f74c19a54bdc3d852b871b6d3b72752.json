{"ast":null,"code":"var _jsxFileName = \"/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/DigitalTwin/FunctionalityDetails.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { Card, CardContent, CardHeader, Divider, Grid, Typography } from '@material-ui/core';\nimport React, { useState } from 'react';\nimport { Redirect, useRouteMatch } from 'react-router-dom';\nimport { routes } from '../../App';\nimport { FunctionalityActions, MonitoredVariableActions } from '../../redux/actions';\nimport { getOrDownloadFunctionalities, getOrDownloadMonitoredVariables } from '../../utils/digitalTwins';\nimport { useMountEffect } from '../../utils/main';\nimport { LazyComponent } from '../templates/LazyComponent/LazyComponent';\nimport { Navigator } from '../templates/Navigator/Navigator';\nimport { useStore } from '../templates/Store/Store';\nimport { JPTable } from '../templates/Table/JPTable';\nimport { FunctionalityForm } from './FunctionalityForm'; //Esta página pretende dispor informação mais detalhada da funcionalidade correspondente disponível na página \"DigitalTwinMonitoring\"\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst FunctionBlockInstanceList = props => {\n  _s();\n\n  const classes = useSmartComponentStyles();\n  return /*#__PURE__*/_jsxDEV(JPTable, {\n    data: props.fbInstances.map(i => {\n      return { ...i,\n        stateData: {\n          key: i.state,\n          data: i.state === 1 ? /*#__PURE__*/_jsxDEV(Settings, {\n            className: classes.functionBlockGood\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 47\n          }, this) : /*#__PURE__*/_jsxDEV(Error, {\n            className: classes.functionBlockError\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 100\n          }, this)\n        }\n      };\n    }),\n    indexes: [{\n      label: 'Instance Name',\n      key: 'id'\n    }, {\n      label: 'Function Block Type',\n      key: 'fbType'\n    }, {\n      label: 'Function Block Category',\n      key: 'fbCategory'\n    }, {\n      label: 'Function Block Opcua Category',\n      key: 'fbGeneralCategory'\n    }, {\n      label: 'State',\n      key: 'stateData'\n    }],\n    tName: \"\",\n    updateData: props.update,\n    sortedkey: \"id\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 9\n  }, this);\n};\n\n_s(FunctionBlockInstanceList, \"s6nXBa0WT17T8Dv0xiOGUVVHj/c=\", true);\n\n_c = FunctionBlockInstanceList;\nexport const FunctionalityDetails = () => {\n  _s2();\n\n  //Recupera o id da funcionalidade seleccionada anteriormente na página Digital Twin Monitoring\n  const matchParams = useRouteMatch();\n  const id = matchParams.params.id; // Recuperar da base de dados as variáveis que estão a ser monitorizadas (MonitoredVariable)\n\n  const [fetching, setFetching] = useState(true);\n  const [error, setError] = useState('');\n  const {\n    data: monitoredVariables,\n    dispatchAction: dispatchMonitoredVariableActions\n  } = useStore('monitoredVariables');\n\n  const updateMonitoredVariables = monVar => dispatchMonitoredVariableActions(MonitoredVariableActions.updateMonitoredVariable(monVar));\n\n  const [selectedMonitoredVariables, setSelectedMonitoredVariables] = useState([]);\n  useMountEffect(() => {\n    setTimeout(() => {\n      setFetching(true);\n      getOrDownloadMonitoredVariables(monitoredVariables).then(result => updateMonitoredVariables(result)).catch(e => setError(e.msg)).finally(() => setFetching(false));\n    }, 0);\n  });\n  console.log(monitoredVariables); //Cabeçalhos da tabela + Funções Necessárias\n\n  const indexes = [{\n    label: 'Variable',\n    key: 'monitoredVariableName'\n  }, {\n    label: 'Function Block',\n    key: 'fbAssociated'\n  }, {\n    label: 'Smart Component',\n    key: 'dtDescription'\n  }, {\n    label: 'Current Value',\n    key: 'dtMonitoredVariableEvent'\n  }, {\n    label: 'Graph',\n    key: 'dtName'\n  } //{label: 'Remove', key: 'dtName'},\n  ];\n\n  const getDataMonitoredVariable = () => selectedMonitoredVariables.map(monitoredVariable => {\n    console.log(\"monitoredVariable:\");\n    console.log(monitoredVariable);\n    console.log(\"monitoredVariables:\");\n    console.log(monitoredVariables);\n    return { ...monitoredVariable\n    };\n  }); //Variáveis e funções que permitem o redireccionamento para a página DigitalTwinMonitoring\n\n\n  const [redirectTo, setRedirectTo] = useState(\"\");\n\n  const redirectToList = () => setRedirectTo(routes.digitalTwinMonitoring); // Recuperar da base de dados as funcionalidades (Functionality)\n\n\n  const {\n    data: functionalities,\n    dispatchAction: dispatchFunctionalityActions\n  } = useStore('functionalities');\n\n  const updateFunctionalities = funcs => dispatchFunctionalityActions(FunctionalityActions.updateFunctionalities(funcs));\n\n  useMountEffect(() => {\n    setTimeout(() => {\n      setFetching(true);\n      getOrDownloadFunctionalities(functionalities).then(result => updateFunctionalities(result)).catch(e => setError(e.msg)).finally(() => setFetching(false));\n    }, 0);\n  }); //Recuperar dados da funcionalidade\n\n  let [functionalityName, setFunctionalityName] = useState([]);\n  let i = 0;\n\n  while (i < functionalities.length) {\n    if (functionalities[i].funcId == id) {\n      functionalityName = functionalities[i].funcName;\n    }\n\n    i++;\n  }\n\n  const [initialData, setInititalData] = useState(false);\n  if (redirectTo !== \"\") return /*#__PURE__*/_jsxDEV(Redirect, {\n    to: redirectTo,\n    push: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 12\n  }, this);\n  return /*#__PURE__*/_jsxDEV(Navigator, {\n    title: \"Digital Twin monitoring\",\n    children: /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h5\",\n            noWrap: true,\n            children: functionalityName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 8\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: /*#__PURE__*/_jsxDEV(JPTable, {\n            sortedkey: \"idMonitoredVariable\",\n            data: getDataMonitoredVariable(),\n            updateData: updateMonitoredVariables,\n            indexes: indexes,\n            tName: \"MonitoredVariable\",\n            extra: {// delete: {\n              //     action: deleteFunctionalityAction,\n              //     labelKey: 'funcName',\n              //     onSuccessDelete: () => {}\n              // },\n              // edit: {\n              //     action: showEditing\n              // },\n              // details: {\n              //     action: redirectToList,\n              // },\n              // add: {\n              //     action: showAddDetails\n              // }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n              title: \"Function Block Instances\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n              children: /*#__PURE__*/_jsxDEV(LazyComponent, {\n                loaded: initialData,\n                children: /*#__PURE__*/_jsxDEV(FunctionBlockInstanceList, {\n                  fbInstances: smartComponentFbInstances,\n                  update: updateSmartComponentFunctionBlockInstances\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 176,\n                  columnNumber: 29\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 175,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(FunctionalityForm, {\n          cancel: {\n            action: redirectToList,\n            label: 'Cancel'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 5\n      }, this)\n    }, void 0, false)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(FunctionalityDetails, \"aXrj/RHKCSAE0/JYdUv3TGApcBo=\", false, function () {\n  return [useRouteMatch, useStore, useMountEffect, useStore, useMountEffect];\n});\n\n_c2 = FunctionalityDetails;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"FunctionBlockInstanceList\");\n$RefreshReg$(_c2, \"FunctionalityDetails\");","map":{"version":3,"sources":["/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/DigitalTwin/FunctionalityDetails.tsx"],"names":["Card","CardContent","CardHeader","Divider","Grid","Typography","React","useState","Redirect","useRouteMatch","routes","FunctionalityActions","MonitoredVariableActions","getOrDownloadFunctionalities","getOrDownloadMonitoredVariables","useMountEffect","LazyComponent","Navigator","useStore","JPTable","FunctionalityForm","FunctionBlockInstanceList","props","classes","useSmartComponentStyles","fbInstances","map","i","stateData","key","state","data","functionBlockGood","functionBlockError","label","update","FunctionalityDetails","matchParams","id","params","fetching","setFetching","error","setError","monitoredVariables","dispatchAction","dispatchMonitoredVariableActions","updateMonitoredVariables","monVar","updateMonitoredVariable","selectedMonitoredVariables","setSelectedMonitoredVariables","setTimeout","then","result","catch","e","msg","finally","console","log","indexes","getDataMonitoredVariable","monitoredVariable","redirectTo","setRedirectTo","redirectToList","digitalTwinMonitoring","functionalities","dispatchFunctionalityActions","updateFunctionalities","funcs","functionalityName","setFunctionalityName","length","funcId","funcName","initialData","setInititalData","smartComponentFbInstances","updateSmartComponentFunctionBlockInstances","action"],"mappings":"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","sourcesContent":["import { Card, CardContent, CardHeader, Divider, Grid, Typography } from '@material-ui/core'\r\nimport { Clear } from '@material-ui/icons'\r\nimport React, { useState } from 'react'\r\nimport { match, Redirect, useRouteMatch } from 'react-router-dom'\r\nimport { routes } from '../../App'\r\nimport { Functionality, MonitoredVariable } from '../../model'\r\nimport { FunctionalityActions, MonitoredVariableActions } from '../../redux/actions'\r\nimport { RequestResponseState } from '../../services/api/api'\r\nimport { getOrDownloadFunctionalities, getOrDownloadMonitoredVariables } from '../../utils/digitalTwins'\r\nimport { useMountEffect } from '../../utils/main'\r\nimport { LazyComponent } from '../templates/LazyComponent/LazyComponent'\r\nimport { Navigator } from '../templates/Navigator/Navigator'\r\nimport { useStore } from '../templates/Store/Store'\r\nimport { JPTable } from '../templates/Table/JPTable'\r\nimport { FunctionalityForm } from './FunctionalityForm'\r\n\r\n//Esta página pretende dispor informação mais detalhada da funcionalidade correspondente disponível na página \"DigitalTwinMonitoring\"\r\n\r\nconst FunctionBlockInstanceList = (props: {fbInstances: any[], update: (instances: any[]) => void}) => {\r\n    \r\n    const classes = useSmartComponentStyles()\r\n\r\n    return (\r\n        <JPTable\r\n            data={props.fbInstances.map((i:FbInstance) => {\r\n\r\n                return {\r\n                    ...i,\r\n                    stateData: {\r\n                        key: i.state,\r\n                        data: i.state === 1 ? <Settings className={classes.functionBlockGood} /> : <Error className={classes.functionBlockError}/>\r\n                    }\r\n                }\r\n            })}\r\n            indexes={[\r\n                {label: 'Instance Name', key: 'id'},\r\n                {label: 'Function Block Type', key: 'fbType'},\r\n                {label: 'Function Block Category', key: 'fbCategory'},\r\n                {label: 'Function Block Opcua Category', key: 'fbGeneralCategory'},\r\n                {label: 'State', key: 'stateData'},\r\n            ]}\r\n            tName=''\r\n            updateData={props.update}\r\n            sortedkey='id'\r\n\r\n        />\r\n    )\r\n}\r\n\r\nexport const FunctionalityDetails = () => {\r\n\r\n    //Recupera o id da funcionalidade seleccionada anteriormente na página Digital Twin Monitoring\r\n    const matchParams : match = useRouteMatch()\r\n    const id = (matchParams.params as any).id\r\n\r\n    // Recuperar da base de dados as variáveis que estão a ser monitorizadas (MonitoredVariable)\r\n    const [fetching,setFetching] = useState(true)\r\n    const [error,setError] = useState('')\r\n    const {data: monitoredVariables, dispatchAction: dispatchMonitoredVariableActions} = useStore('monitoredVariables')\r\n    const updateMonitoredVariables = (monVar: MonitoredVariable[]) => dispatchMonitoredVariableActions(MonitoredVariableActions.updateMonitoredVariable(monVar))\r\n    const [selectedMonitoredVariables, setSelectedMonitoredVariables] : [MonitoredVariable[], Function] = useState([])\r\n    \r\n    useMountEffect(() => {\r\n  \r\n    setTimeout(() => {\r\n  \r\n    setFetching(true)\r\n    getOrDownloadMonitoredVariables(monitoredVariables)\r\n        .then((result: MonitoredVariable[]) => updateMonitoredVariables(result))\r\n        .catch((e:RequestResponseState) => setError(e.msg))\r\n        .finally(() => setFetching(false))\r\n    }, 0)\r\n    })\r\n\r\n    console.log(monitoredVariables)\r\n    //Cabeçalhos da tabela + Funções Necessárias\r\n    const indexes = [\r\n        {label: 'Variable', key: 'monitoredVariableName'},\r\n        {label: 'Function Block', key: 'fbAssociated'},\r\n        {label: 'Smart Component', key: 'dtDescription'},\r\n        {label: 'Current Value', key: 'dtMonitoredVariableEvent'},\r\n        {label: 'Graph', key: 'dtName'},\r\n        //{label: 'Remove', key: 'dtName'},\r\n    ]\r\n    \r\n    const getDataMonitoredVariable = () => selectedMonitoredVariables.map((monitoredVariable: MonitoredVariable) => {\r\n        console.log(\"monitoredVariable:\")\r\n        console.log(monitoredVariable)\r\n        console.log(\"monitoredVariables:\")\r\n        console.log(monitoredVariables)\r\n        return {\r\n            ...monitoredVariable\r\n        }\r\n\r\n    })\r\n    \r\n\r\n    //Variáveis e funções que permitem o redireccionamento para a página DigitalTwinMonitoring\r\n    const [redirectTo, setRedirectTo] : [string, Function] = useState(\"\")\r\n\r\n    const redirectToList = () => setRedirectTo(routes.digitalTwinMonitoring)\r\n\r\n    // Recuperar da base de dados as funcionalidades (Functionality)\r\n    const {data:functionalities, dispatchAction:dispatchFunctionalityActions} = useStore('functionalities')\r\n    const updateFunctionalities = (funcs: Functionality[]) => dispatchFunctionalityActions(FunctionalityActions.updateFunctionalities(funcs))\r\n\r\n    useMountEffect(() => {\r\n\r\n    setTimeout(() => {\r\n\r\n    setFetching(true)\r\n    getOrDownloadFunctionalities(functionalities)\r\n        .then((result: Functionality[]) => updateFunctionalities(result))\r\n        .catch((e:RequestResponseState) => setError(e.msg))\r\n        .finally(() => setFetching(false))\r\n    }, 0)\r\n    })\r\n\r\n    //Recuperar dados da funcionalidade\r\n    let [functionalityName, setFunctionalityName] : [Functionality[], Function] = useState([])\r\n\r\n    let i = 0;\r\n    while(i < functionalities.length){\r\n\r\n        if(functionalities[i].funcId == id) {\r\n          functionalityName = functionalities[i].funcName\r\n        }\r\n        i++\r\n    }\r\n\r\n    const [initialData,setInititalData] = useState(false)\r\n\r\n    if(redirectTo !== \"\") \r\n    return <Redirect to={redirectTo} push={true} />\r\n\r\n    return(\r\n    <Navigator title=\"Digital Twin monitoring\">\r\n    <>\r\n    <Grid item xs={12}> \r\n       <Grid item> \r\n            <Typography variant=\"h5\" noWrap>\r\n            {functionalityName}\r\n            </Typography>\r\n       </Grid>        \r\n        <Grid item>\r\n            <JPTable\r\n                sortedkey=\"idMonitoredVariable\"\r\n                data={getDataMonitoredVariable()} \r\n                updateData={updateMonitoredVariables} \r\n                indexes={indexes} \r\n                tName='MonitoredVariable'\r\n                extra={{\r\n                // delete: {\r\n                //     action: deleteFunctionalityAction,\r\n                //     labelKey: 'funcName',\r\n                //     onSuccessDelete: () => {}\r\n                // },\r\n                // edit: {\r\n                //     action: showEditing\r\n                // },\r\n                // details: {\r\n                //     action: redirectToList,\r\n                // },\r\n                // add: {\r\n                //     action: showAddDetails\r\n                // }\r\n                }} \r\n            />\r\n        </Grid>\r\n        <Grid item>\r\n                <Card>\r\n                    <CardHeader title=\"Function Block Instances\" />\r\n                    <Divider />\r\n                    <CardContent>\r\n                        <LazyComponent loaded={initialData}>\r\n                            <FunctionBlockInstanceList \r\n                                fbInstances={smartComponentFbInstances}\r\n                                update={updateSmartComponentFunctionBlockInstances}\r\n                            />\r\n                        </LazyComponent>\r\n                    </CardContent>\r\n                </Card>\r\n            </Grid>\r\n        <FunctionalityForm\r\n            cancel={{action: redirectToList, label: 'Cancel'}}\r\n        />\r\n    </Grid>\r\n    </>\r\n    </Navigator>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}