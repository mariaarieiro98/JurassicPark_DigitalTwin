{"ast":null,"code":"var _jsxFileName = \"/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/DigitalTwin/FunctionalityForm.tsx\";\nimport React, { useState } from 'react';\nimport { Grid, Button } from '@material-ui/core';\nimport { useFunctionBlockStyles } from '../FunctionBlocks/FunctionBlock/style';\nimport { BackspaceOutlined } from '@material-ui/icons';\nimport { useStore } from '../templates/Store/Store';\nexport const FunctionalityForm = props => {\n  /**styles */\n  const classes = useFunctionBlockStyles();\n  /**list of digital-twins */\n\n  const {\n    data: digitalTwins,\n    dispatchAction: dispatchDigitalTwinsActions\n  } = useStore('digitalTwins');\n  const [validDt, setValidDt] = useState(true);\n  /**Functionality Name */\n  // const {funcName, setFuncName} = props.funcName\n  // const [validFuncName, setValidFuncName] = useState(true)\n  // const onChangeFuncName = useCallback((event:any) => {\n  //   setFuncName(event.target.value.trim())\n  //   setValidFuncName(true)\n  // },[setFuncName])\n\n  /*Digital Twin*/\n  // const {digitalTwin,setDigitalTwin} = props.digitalTwin\n\n  /* Buttons */\n\n  const onCancel = props.cancel.action;\n  const cancelLabel = props.cancel.label; // const confirmLabel = props.confirmDialog.buttonTitle\n\n  /* Confirmation */\n  // const [confirm, setConfirm] : [boolean, Function] = useState(false)\n  // const validateFields = () : boolean => {\n  //     const cValidFuncName = funcName.trim() !== ''\n  //     const cValidDigitalTwin = digitalTwin.dtId !== -1\n  //     if(!cValidFuncName) setValidFuncName(cValidFuncName)\n  //     if(!cValidDigitalTwin ) setValidDt(cValidDigitalTwin)\n  //     return cValidFuncName && cValidDigitalTwin\n  // }\n  // const confirmButtonAction = () => {\n  //     if(validateFields())\n  //       setConfirm(true)\n  // }\n  // const confirmActionStates = {\n  //     start: {\n  //         label: props.confirmDialog.start?.label,\n  //         positiveLabel: props.confirmDialog.start?.positiveLabel,\n  //         negativeLabel: props.confirmDialog.start?.negativeLabel,\n  //         state: ConfirmActionStateLabel.start\n  //     },\n  //     executing: {\n  //       label: '',\n  //       state: ConfirmActionStateLabel.executing,\n  //     },\n  //     success: {\n  //       label: props.confirmDialog.success.label,\n  //       state: ConfirmActionStateLabel.success,\n  //       positiveLabel: props.confirmDialog.success.positiveLabel\n  //     },\n  //     error: {\n  //       label: props.confirmDialog.error.label,\n  //       state: ConfirmActionStateLabel.error,\n  //       positiveLabel: props.confirmDialog.success.positiveLabel\n  //     },\n  //   }\n  // const confirmActionProps : ConfirmActionProps = {\n  //     title: props.confirmDialog.title,\n  //     states: confirmActionStates,\n  //     currentState: confirmActionStates.executing,\n  //     onCancel: () => setConfirm(false),\n  //     onError: () => setConfirm(false),\n  //     onSuccess: props.confirmDialog.onSuccess,\n  // }\n\n  return (\n    /*#__PURE__*/\n    //  <>  {confirm ? <ConfirmAction {...confirmActionProps} /> : null}\n    // <Grid spacing={1} justify=\"space-between\" item xs container direction=\"row\">\n    //   <Grid item xs={6}>\n    //     <TextField\n    //       onChange={onChangeFuncName} \n    //       value={funcName}\n    //       helperText=\"\"\n    //       error={!validFuncName} \n    //       fullWidth required \n    //       label=\"Type\" \n    //       id=\"fb-type\" \n    //       type=\"text\" />\n    //   </Grid>\n    // </Grid>\n    // <Grid item xs>\n    //     <FormControl fullWidth required>\n    //       <InputLabel error={!validDt} id=\"digital-twin-label\">DigitalTwin</InputLabel>\n    //       <>\n    //         <Select\n    //           error={!validDt}\n    //           labelId=\"digital-twin-label\"\n    //           value={digitalTwin.dtName}\n    //           onChange={(event) => {\n    //             setValidDt(true)\n    //             setDigitalTwin(digitalTwins.filter((dts:DigitalTwin) => event.target.value === dts.dtName)[0])\n    //           }} \n    //         >\n    //           {digitalTwins.map((dts:DigitalTwin, index:number) => <MenuItem key={index} value={dts.dtName}>{dts.dtName}</MenuItem>)}\n    //         </Select>\n    //       </>\n    //     </FormControl>\n    //   </Grid>\n    React.createElement(Grid, {\n      item: true,\n      xs: true,\n      container: true,\n      direction: \"row\",\n      justify: \"space-between\",\n      alignItems: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 6,\n      container: true,\n      direction: \"row\",\n      spacing: 2,\n      alignItems: \"center\",\n      justify: \"flex-end\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      onClick: onCancel,\n      style: {\n        minWidth: 0\n      },\n      variant: \"text\",\n      size: \"medium\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(BackspaceOutlined, {\n      fontSize: \"large\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 94\n      }\n    })))))\n  );\n};","map":{"version":3,"sources":["/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/DigitalTwin/FunctionalityForm.tsx"],"names":["React","useState","Grid","Button","useFunctionBlockStyles","BackspaceOutlined","useStore","FunctionalityForm","props","classes","data","digitalTwins","dispatchAction","dispatchDigitalTwinsActions","validDt","setValidDt","onCancel","cancel","action","cancelLabel","label","minWidth"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAwD,OAAxD;AACA,SAA6CC,IAA7C,EAA0EC,MAA1E,QAAyG,mBAAzG;AAEA,SAASC,sBAAT,QAAuC,uCAAvC;AAGA,SAAsBC,iBAAtB,QAA+C,oBAA/C;AAIA,SAASC,QAAT,QAAyB,0BAAzB;AAqCA,OAAO,MAAMC,iBAAiB,GAAIC,KAAD,IAAmC;AAEhE;AACA,QAAMC,OAAO,GAAGL,sBAAsB,EAAtC;AAEA;;AACA,QAAM;AAACM,IAAAA,IAAI,EAAEC,YAAP;AAAqBC,IAAAA,cAAc,EAACC;AAApC,MAAmEP,QAAQ,CAAC,cAAD,CAAjF;AACA,QAAM,CAACQ,OAAD,EAASC,UAAT,IAA6Cd,QAAQ,CAAC,IAAD,CAA3D;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;;AAEA;AACA;;AAGA;;AAEA,QAAMe,QAAQ,GAAGR,KAAK,CAACS,MAAN,CAAaC,MAA9B;AACA,QAAMC,WAAW,GAAGX,KAAK,CAACS,MAAN,CAAaG,KAAjC,CA1BgE,CA4BhE;;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA;AACI;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA,wBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,MAAb;AAAc,MAAA,SAAS,MAAvB;AAAwB,MAAA,SAAS,EAAC,KAAlC;AAAwC,MAAA,OAAO,EAAC,eAAhD;AAAgE,MAAA,UAAU,EAAC,QAA3E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,CAAf;AAAkB,MAAA,SAAS,MAA3B;AAA4B,MAAA,SAAS,EAAC,KAAtC;AAA4C,MAAA,OAAO,EAAE,CAArD;AAAwD,MAAA,UAAU,EAAC,QAAnE;AAA4E,MAAA,OAAO,EAAC,UAApF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAEJ,QAAjB;AAA2B,MAAA,KAAK,EAAE;AAACK,QAAAA,QAAQ,EAAC;AAAV,OAAlC;AAAgD,MAAA,OAAO,EAAC,MAAxD;AAA+D,MAAA,IAAI,EAAC,QAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAA6E,oBAAC,iBAAD;AAAmB,MAAA,QAAQ,EAAC,OAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA7E,CADA,CADF,CADF;AAlCR;AA8CH,CAlIM","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react'\r\nimport { FormControl, InputLabel, TextField, Grid, Select, MenuItem, Box, Button,Typography, Chip } from '@material-ui/core'\r\nimport { DigitalTwin , Functionality} from '../../model'\r\nimport { useFunctionBlockStyles } from '../FunctionBlocks/FunctionBlock/style'\r\nimport { VariableList } from '../FunctionBlocks/FunctionBlock/Variable'\r\nimport { setSimpleField, useMountEffect } from '../../utils/main'\r\nimport { Done, Clear, BackspaceOutlined } from '@material-ui/icons'\r\nimport { ReactComponent as UploadIcon } from '../../../icons/Upload.svg'\r\nimport { getFBfromFbtFile, getOrDownloadFunctionBlockCategories } from '../../utils/functionBlock'\r\nimport { ConfirmActionProps, ConfirmActionStateLabel, ConfirmActionAction, ConfirmAction } from '../templates/ConfirmAction/ConfirmAction'\r\nimport { useStore } from '../templates/Store/Store'\r\n\r\ninterface FunctionalityFormProps {\r\n\r\n    // funcName: {\r\n    //   funcName: string\r\n    //   setFuncName: Function\r\n    // },\r\n    // digitalTwin: {\r\n    //   digitalTwin: DigitalTwin\r\n    //   setDigitalTwin: Function\r\n    // }\r\n    cancel: {\r\n        label: string\r\n        action: () => void\r\n    },\r\n    // confirmDialog: {\r\n    //     buttonTitle: string\r\n    //     title: string\r\n    //     initialState: ConfirmActionStateLabel\r\n    //     onSuccess : () => void\r\n    //     start? : {\r\n    //         label: string\r\n    //         positiveLabel: string\r\n    //         negativeLabel: string\r\n    //     }\r\n    //     success: {\r\n    //         label:string\r\n    //         positiveLabel: string\r\n    //     }\r\n    //     error: {\r\n    //         label: string\r\n    //         positiveLabel: string\r\n    //     }\r\n    // },\r\n}\r\n\r\nexport const FunctionalityForm = (props: FunctionalityFormProps) => {\r\n\r\n    /**styles */\r\n    const classes = useFunctionBlockStyles()\r\n\r\n    /**list of digital-twins */\r\n    const {data: digitalTwins, dispatchAction:dispatchDigitalTwinsActions} = useStore('digitalTwins')\r\n    const [validDt,setValidDt] : [boolean, Function] = useState(true)\r\n\r\n    /**Functionality Name */\r\n    // const {funcName, setFuncName} = props.funcName\r\n    // const [validFuncName, setValidFuncName] = useState(true)\r\n    // const onChangeFuncName = useCallback((event:any) => {\r\n\r\n    //   setFuncName(event.target.value.trim())\r\n    //   setValidFuncName(true)\r\n    \r\n    // },[setFuncName])\r\n\r\n    /*Digital Twin*/\r\n    // const {digitalTwin,setDigitalTwin} = props.digitalTwin\r\n\r\n\r\n    /* Buttons */\r\n\r\n    const onCancel = props.cancel.action\r\n    const cancelLabel = props.cancel.label\r\n\r\n    // const confirmLabel = props.confirmDialog.buttonTitle\r\n\r\n    /* Confirmation */\r\n\r\n    // const [confirm, setConfirm] : [boolean, Function] = useState(false)\r\n\r\n    // const validateFields = () : boolean => {\r\n\r\n    //     const cValidFuncName = funcName.trim() !== ''\r\n    //     const cValidDigitalTwin = digitalTwin.dtId !== -1\r\n            \r\n    //     if(!cValidFuncName) setValidFuncName(cValidFuncName)\r\n    //     if(!cValidDigitalTwin ) setValidDt(cValidDigitalTwin)\r\n    \r\n    //     return cValidFuncName && cValidDigitalTwin\r\n    // }\r\n\r\n    // const confirmButtonAction = () => {\r\n\r\n    //     if(validateFields())\r\n    //       setConfirm(true)\r\n    // }\r\n\r\n    // const confirmActionStates = {\r\n    //     start: {\r\n    //         label: props.confirmDialog.start?.label,\r\n    //         positiveLabel: props.confirmDialog.start?.positiveLabel,\r\n    //         negativeLabel: props.confirmDialog.start?.negativeLabel,\r\n    //         state: ConfirmActionStateLabel.start\r\n    //     },\r\n    //     executing: {\r\n    //       label: '',\r\n    //       state: ConfirmActionStateLabel.executing,\r\n    //     },\r\n    //     success: {\r\n    //       label: props.confirmDialog.success.label,\r\n    //       state: ConfirmActionStateLabel.success,\r\n    //       positiveLabel: props.confirmDialog.success.positiveLabel\r\n    //     },\r\n    //     error: {\r\n    //       label: props.confirmDialog.error.label,\r\n    //       state: ConfirmActionStateLabel.error,\r\n    //       positiveLabel: props.confirmDialog.success.positiveLabel\r\n    //     },\r\n    //   }\r\n    \r\n    // const confirmActionProps : ConfirmActionProps = {\r\n\r\n    //     title: props.confirmDialog.title,\r\n    //     states: confirmActionStates,\r\n    //     currentState: confirmActionStates.executing,\r\n    //     onCancel: () => setConfirm(false),\r\n    //     onError: () => setConfirm(false),\r\n    //     onSuccess: props.confirmDialog.onSuccess,\r\n    // }\r\n\r\n    return (\r\n        //  <>  {confirm ? <ConfirmAction {...confirmActionProps} /> : null}\r\n            // <Grid spacing={1} justify=\"space-between\" item xs container direction=\"row\">\r\n            //   <Grid item xs={6}>\r\n            //     <TextField\r\n            //       onChange={onChangeFuncName} \r\n            //       value={funcName}\r\n            //       helperText=\"\"\r\n            //       error={!validFuncName} \r\n            //       fullWidth required \r\n            //       label=\"Type\" \r\n            //       id=\"fb-type\" \r\n            //       type=\"text\" />\r\n            //   </Grid>\r\n            // </Grid>\r\n            // <Grid item xs>\r\n            //     <FormControl fullWidth required>\r\n            //       <InputLabel error={!validDt} id=\"digital-twin-label\">DigitalTwin</InputLabel>\r\n            //       <>\r\n            //         <Select\r\n            //           error={!validDt}\r\n            //           labelId=\"digital-twin-label\"\r\n            //           value={digitalTwin.dtName}\r\n            //           onChange={(event) => {\r\n            //             setValidDt(true)\r\n            //             setDigitalTwin(digitalTwins.filter((dts:DigitalTwin) => event.target.value === dts.dtName)[0])\r\n            //           }} \r\n            //         >\r\n            //           {digitalTwins.map((dts:DigitalTwin, index:number) => <MenuItem key={index} value={dts.dtName}>{dts.dtName}</MenuItem>)}\r\n            //         </Select>\r\n                   \r\n            //       </>\r\n            //     </FormControl>\r\n            //   </Grid>\r\n            <Grid item xs container direction=\"row\" justify=\"space-between\" alignItems=\"center\"> \r\n              <Grid item xs={6} container direction=\"row\" spacing={2} alignItems=\"center\" justify=\"flex-end\">\r\n                <Grid item>\r\n                <Button onClick={onCancel} style={{minWidth:0}} variant=\"text\" size=\"medium\"><BackspaceOutlined fontSize=\"large\"/></Button>\r\n                    {/* <Button onClick={onCancel} color=\"secondary\" variant=\"contained\"><Clear/>{cancelLabel}</Button> */}\r\n                </Grid>\r\n                {/* <Grid>\r\n                  <Button onClick={confirmButtonAction} color=\"primary\" variant=\"contained\"><Done/>{confirmLabel}</Button>\r\n                </Grid> */}\r\n              </Grid>\r\n            </Grid>\r\n      )\r\n}"]},"metadata":{},"sourceType":"module"}