{"ast":null,"code":"","map":{"version":3,"sources":[],"names":[],"mappings":"","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react'\r\nimport { TextField, Grid, Button, InputLabel, Select, MenuItem, FormControl } from '@material-ui/core'\r\nimport { AssociatedSmartComponent, SmartComponent } from '../../model'\r\nimport { useFunctionBlockStyles } from '../FunctionBlocks/FunctionBlock/style'\r\nimport { Done, Clear } from '@material-ui/icons'\r\nimport { ConfirmActionProps, ConfirmActionStateLabel, ConfirmActionAction, ConfirmAction } from '../templates/ConfirmAction/ConfirmAction'\r\nimport { AssociatedSmartComponentActions, SmartComponentActions } from '../../redux/actions'\r\nimport { useStore } from '../templates/Store/Store'\r\nimport { getOrDownloadSmartComponents } from '../../utils/smartComponents'\r\nimport { useMountEffect } from '../../utils/main'\r\nimport { RequestResponseState } from '../../services/api/api'\r\nimport { SmartComponentList } from './SmartComponent'\r\n\r\n// const updateOnRemoveSmartComponent = (smartComponents: SmartComponent[], smartComponentToRemove: SmartComponent ) : SmartComponent[] => {\r\n\r\n//   const newSmartComponents : SmartComponent[] = [...smartComponents]\r\n//   newSmartComponents.forEach((sc: SmartComponent) => {\r\n\r\n//       //sc.scName = sc.scName.filter((smartComponent: SmartComponent) => smartComponent.scName !== smartComponentToRemove.scName)\r\n\r\n//   })\r\n\r\n//   return newSmartComponents\r\n\r\n// }\r\n\r\n\r\n// interface FunctionalityFormProps {\r\n\r\n//     associatedSc: {\r\n//         associatedSc: SmartComponent[]\r\n//         setAssociatedSc: Function\r\n//     }\r\n//     cancel: {\r\n//         label: string\r\n//         action: () => void\r\n//     },\r\n//     confirmDialog: {\r\n//         buttonTitle: string\r\n//         title: string\r\n//         initialState: ConfirmActionStateLabel\r\n//         action: ConfirmActionAction\r\n//         onSuccess : () => void\r\n//         start? : {\r\n//             label: string\r\n//             positiveLabel: string\r\n//             negativeLabel: string\r\n//         }\r\n//         success: {\r\n//             label:string\r\n//             positiveLabel: string\r\n//         }\r\n//         error: {\r\n//             label: string\r\n//             positiveLabel: string\r\n//         }\r\n//     },\r\n//     order?: number,\r\n//     newSc?: boolean,\r\n// }\r\n\r\n// export const FunctionalityForm = (props: FunctionalityFormProps) => {\r\n\r\n//     /**styles */\r\n//     const classes = useFunctionBlockStyles()\r\n\r\n//     /* Buttons */\r\n\r\n//     const onCancel = props.cancel.action\r\n//     const cancelLabel = props.cancel.label\r\n\r\n//     const confirmLabel = props.confirmDialog.buttonTitle\r\n\r\n//     /* Confirmation */\r\n\r\n//     const [confirm, setConfirm] : [boolean, Function] = useState(false)\r\n\r\n//     const validateFields = () : boolean => {\r\n\r\n//         const cValidDtName = dtName.trim() !== ''\r\n            \r\n//         if(!cValidDtName) setValidDtName(cValidDtName)\r\n    \r\n//         return cValidDtName \r\n    \r\n//     }\r\n\r\n//     const confirmButtonAction = () => {\r\n\r\n//         if(validateFields())\r\n//           setConfirm(true)\r\n//     }\r\n\r\n//     const confirmActionStates = {\r\n//         start: {\r\n//             label: props.confirmDialog.start?.label,\r\n//             positiveLabel: props.confirmDialog.start?.positiveLabel,\r\n//             negativeLabel: props.confirmDialog.start?.negativeLabel,\r\n//             state: ConfirmActionStateLabel.start\r\n//         },\r\n//         executing: {\r\n//           label: '',\r\n//           state: ConfirmActionStateLabel.executing,\r\n//         },\r\n//         success: {\r\n//           label: props.confirmDialog.success.label,\r\n//           state: ConfirmActionStateLabel.success,\r\n//           positiveLabel: props.confirmDialog.success.positiveLabel\r\n//         },\r\n//         error: {\r\n//           label: props.confirmDialog.error.label,\r\n//           state: ConfirmActionStateLabel.error,\r\n//           positiveLabel: props.confirmDialog.success.positiveLabel\r\n//         },\r\n//       }\r\n    \r\n//     const confirmActionProps : ConfirmActionProps = {\r\n\r\n//         title: props.confirmDialog.title,\r\n//         states: confirmActionStates,\r\n//         currentState: confirmActionStates.executing,\r\n//         onCancel: () => setConfirm(false),\r\n//         onError: () => setConfirm(false),\r\n//         onSuccess: props.confirmDialog.onSuccess,\r\n//         action:props.confirmDialog.action,\r\n      \r\n//     }\r\n  \r\n//     //Associar um SmartComponent pelo frontend\r\n    \r\n//     const {data:smartComponents, dispatchAction:dispatchSmartComponentActions} = useStore('smartComponents')\r\n//     const updateSmartComponents = (scs: SmartComponent[]) => dispatchSmartComponentActions(SmartComponentActions.updateSmartComponent(scs))\r\n\r\n//     const {associatedSc, setAssociatedSc} = props.associatedSc\r\n\r\n//     const onSmartComponentRemoval = useCallback((smartComponentToRemove: SmartComponent) => {\r\n\r\n//       setAssociatedSc((prevSmartComponents: SmartComponent[]) =>  updateOnRemoveSmartComponent(prevSmartComponents,smartComponentToRemove))\r\n\r\n//   }, [setAssociatedSc])\r\n\r\n//     return (\r\n//       <Grid className={classes.box} spacing={2} container direction=\"column\" component=\"form\">\r\n//         <> {confirm ? <ConfirmAction {...confirmActionProps} /> : null}\r\n//           <Grid item container direction=\"row\" justify=\"space-between\" alignItems=\"center\">\r\n//             {props.order ?\r\n//             <Grid item xs={1}>\r\n//                 {props.order}\r\n//             </Grid>\r\n//             : null\r\n//             }\r\n//             <Grid className={classes.box} spacing={1} item container direction=\"row\">\r\n//                 <Grid item xs={6}>\r\n//                   <SmartComponentList onSmartComponentRemoval={onSmartComponentRemoval} setSmartComponents={setAssociatedSc}  title=\"Smart Component\" smartComponents={associatedSc} />\r\n//                 </Grid>\r\n//             </Grid>\r\n//           </Grid>\r\n//           <Grid item xs container direction=\"row\" justify=\"space-between\" alignItems=\"center\"> \r\n//             <Grid item xs={6} container direction=\"row\" spacing={2} alignItems=\"center\" justify=\"flex-end\">\r\n//               <Grid item>\r\n//                   <Button onClick={onCancel} color=\"secondary\" variant=\"contained\"><Clear/>{cancelLabel}</Button>\r\n//               </Grid>\r\n//               <Grid>\r\n//                 <Button onClick={confirmButtonAction} color=\"primary\" variant=\"contained\"><Done/>{confirmLabel}</Button>\r\n//               </Grid>\r\n//             </Grid>\r\n//           </Grid>\r\n//         </>\r\n//     </Grid>\r\n//   ) \r\n// }"]},"metadata":{},"sourceType":"module"}