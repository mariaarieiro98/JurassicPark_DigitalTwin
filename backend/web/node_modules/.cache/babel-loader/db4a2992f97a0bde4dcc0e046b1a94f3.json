{"ast":null,"code":"var _jsxFileName = \"/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/DigitalTwin/FunctionalityDetails.tsx\",\n    _s = $RefreshSig$();\n\nimport { Card, CardContent, CardHeader, Divider, Grid } from '@material-ui/core';\nimport React, { useState } from 'react';\nimport { Redirect, useRouteMatch } from 'react-router-dom';\nimport { routes } from '../../App';\nimport { FunctionalityActions, MonitoredEventActions, MonitoredVariableActions } from '../../redux/actions';\nimport { getOrDownloadFunctionalities, getOrDownloadMonitoredEvents, getOrDownloadMonitoredVariables } from '../../utils/digitalTwins';\nimport { useMountEffect } from '../../utils/main';\nimport { Navigator } from '../templates/Navigator/Navigator';\nimport { useStore } from '../templates/Store/Store';\nimport { JPTable } from '../templates/Table/JPTable';\nimport { FunctionalityForm } from './FunctionalityForm';\nimport { SocketConnection, SOCKET_EVENT } from '../../services/socket/socket';\nimport { useSmartComponentStyles } from '../SmartComponents/style';\nimport { deleteMonitoredEvent, deleteMonitoredVariable } from '../../services/api/digital-twin';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nlet flagDezSegundos = true;\nlet flagFirstTime = true; //Esta página pretende dispor informação mais detalhada da funcionalidade correspondente disponível na página \"DigitalTwinMonitoring\"\n\nlet selectedMonitoredVariableGlobal = [];\nexport const FunctionalityDetails = () => {\n  _s();\n\n  //Recupera o id da funcionalidade seleccionada anteriormente na página Digital Twin Monitoring\n  const matchParams = useRouteMatch();\n  const id = matchParams.params.id; // Recuperar da base de dados as variáveis que estão a ser monitorizadas (MonitoredVariable)\n\n  const [fetching, setFetching] = useState(true);\n  const [error, setError] = useState('');\n  const {\n    data: monitoredVariables,\n    dispatchAction: dispatchMonitoredVariableActions\n  } = useStore('monitoredVariables');\n\n  const updateMonitoredVariables = monVar => dispatchMonitoredVariableActions(MonitoredVariableActions.updateMonitoredVariable(monVar));\n\n  const [selectedMonitoredVariable, setSelectedMonitoredVariable] = useState([]);\n\n  const initializeMonitoredVariable = monVars => {\n    let monitoredVariable = monVars.filter(monVar => monVar.funcIdAssociated === parseInt(id));\n    selectedMonitoredVariableGlobal = monitoredVariable;\n    setSelectedMonitoredVariable(monitoredVariable);\n  };\n\n  useMountEffect(() => {\n    setFetching(true);\n    getOrDownloadMonitoredVariables(monitoredVariables).then(result => {\n      updateMonitoredVariables(result);\n      initializeMonitoredVariable(result);\n    }).catch(e => {\n      setError(e.msg);\n    }).finally(() => setFetching(false));\n  }); // Recuperar da base de dados os eventos que estão a ser monitorizados (MonitoredEvent)\n\n  const {\n    data: monitoredEvents,\n    dispatchAction: dispatchMonitoredEventActions\n  } = useStore('monitoredEvents');\n\n  const updateMonitoredEvents = monEv => dispatchMonitoredEventActions(MonitoredEventActions.updateMonitoredEvent(monEv));\n\n  const [selectedMonitoredEvent, setSelectedMonitoredEvent] = useState([]);\n\n  const initializeMonitoredEvent = monEvs => {\n    let monitoredEvent = monEvs.filter(monEv => monEv.funcIdAssociated === parseInt(id));\n    setSelectedMonitoredEvent(monitoredEvent);\n  };\n\n  useMountEffect(() => {\n    setFetching(true);\n    getOrDownloadMonitoredEvents(monitoredEvents).then(result => {\n      updateMonitoredEvents(result);\n      initializeMonitoredEvent(result);\n    }).catch(e => {\n      setError(e.msg);\n    }).finally(() => setFetching(false));\n  }); // Cabeçalhos da tabela Variable + Funções Necessárias\n\n  const indexes_variable = [{\n    label: 'Variable',\n    key: 'monitoredVariableName'\n  }, {\n    label: 'Function Block',\n    key: 'id'\n  }, {\n    label: 'Smart Component',\n    key: 'sc'\n  }, {\n    label: 'Current Value',\n    key: 'currentValueData'\n  }]; // Cabeçalhos da tabela Event + Funções Necessárias\n\n  const indexes_event = [{\n    label: 'Event',\n    key: 'monitoredEventName'\n  }, {\n    label: 'Function Block',\n    key: 'fbAssociated'\n  }, {\n    label: 'Smart Component',\n    key: 'scAssociated'\n  }];\n\n  const getDataMonitoredEvent = () => selectedMonitoredEvent.map(monitoredEvent => {\n    return { ...monitoredEvent\n    };\n  });\n\n  const deleteMonitoredVariableAction = monVar => {\n    return new Promise(async (res, rej) => {\n      let i = 0;\n      let idMonitoredVariable = 0;\n\n      while (i < selectedMonitoredVariableGlobal.length) {\n        if (selectedMonitoredVariableGlobal[i].monitoredVariableName === monVar.monitoredVariableName && selectedMonitoredVariableGlobal[i].scAssociated === monVar.sc && selectedMonitoredVariableGlobal[i].fbAssociated === monVar.id) {\n          idMonitoredVariable = selectedMonitoredVariableGlobal[i].idMonitoredVariable;\n        }\n\n        i++;\n      }\n\n      console.log(\"idMonitoredVariable:\", idMonitoredVariable);\n\n      if (!idMonitoredVariable) {\n        console.log(\"entrei aqui\");\n        rej('Error');\n        return;\n      }\n\n      try {\n        console.log(\"idMonitoredVariable:\", idMonitoredVariable);\n        const response = await deleteMonitoredVariable(idMonitoredVariable);\n        res(response);\n      } catch (err) {\n        rej(err);\n      }\n    });\n  };\n\n  const deleteMonitoredEventAction = monEv => {\n    return new Promise(async (res, rej) => {\n      console.log(monEv.idMonitoredEvent);\n\n      if (!monEv.idMonitoredEvent) {\n        console.log(\"entrei aqui\");\n        rej('Error');\n        return;\n      }\n\n      try {\n        console.log(\"idMonitoredEvent:\", monEv.idMonitoredEvent);\n        const response = await deleteMonitoredEvent(monEv.idMonitoredEvent);\n        res(response);\n      } catch (err) {\n        rej(err);\n      }\n    });\n  }; // Variáveis e funções que permitem o redireccionamento para a página DigitalTwinMonitoring\n\n\n  const [redirectTo, setRedirectTo] = useState(\"\");\n\n  const redirectToList = () => {\n    socket.disconnect();\n    setRedirectTo(routes.digitalTwinMonitoring);\n  }; // Recuperar da base de dados as funcionalidades (Functionality)\n\n\n  const {\n    data: functionalities,\n    dispatchAction: dispatchFunctionalityActions\n  } = useStore('functionalities');\n\n  const updateFunctionalities = funcs => dispatchFunctionalityActions(FunctionalityActions.updateFunctionalities(funcs));\n\n  useMountEffect(() => {\n    setTimeout(() => {\n      setFetching(true);\n      getOrDownloadFunctionalities(functionalities).then(result => updateFunctionalities(result)).catch(e => setError(e.msg)).finally(() => setFetching(false));\n    }, 0);\n  }); // Recuperar dados da funcionalidade\n\n  let [functionalityName, setFunctionalityName] = useState([]);\n  let i = 0;\n\n  while (i < functionalities.length) {\n    if (functionalities[i].funcId == id) {\n      functionalityName = functionalities[i].funcName;\n    }\n\n    i++;\n  } // Estabelecer a ligação com os sockets\n\n\n  const socket = new SocketConnection(SocketConnection.getSmartComponentsNamespace());\n  const [monitoredVariableInstances, setMonitoredVariableInstances] = useState([]);\n  const classes = useSmartComponentStyles();\n\n  const updateMonitoredVariableInstances = monVars => setMonitoredVariableInstances(getMonitoredVariablesWithCurrentValue(monVars));\n\n  let lastMonVar;\n\n  const updateMonitoredVariableInstance = monVars => {\n    console.log(monVars);\n\n    if (flagFirstTime) {\n      flagFirstTime = false;\n      startCountdown(10);\n    }\n\n    if (flagDezSegundos) {\n      flagDezSegundos = false;\n      startCountdown(10);\n\n      for (const monVar of monVars) {\n        if (selectedMonitoredVariableGlobal.length === 0) {\n          return [];\n        } else {\n          for (const selectedMonVar of selectedMonitoredVariableGlobal) {\n            if (selectedMonVar.monitoredVariableName === monVar.monitoredVariableName && selectedMonVar.scAssociated === monVar.sc && selectedMonVar.fbAssociated === monVar.id) {\n              setMonitoredVariableInstances(prevMonitoredVariables => {\n                let newMonVar = true;\n                const newMonitoredVariables = getMonitoredVariablesWithCurrentValue(prevMonitoredVariables.map(oMonVar => {\n                  if (oMonVar.monitoredVariableName === monVar.monitoredVariableName && oMonVar.sc === monVar.sc && oMonVar.id === monVar.id) {\n                    newMonVar = false;\n                    return monVar;\n                  }\n\n                  return oMonVar;\n                }));\n\n                if (newMonVar) {\n                  return [...prevMonitoredVariables, addCurrentValueData(monVar)];\n                }\n\n                return newMonitoredVariables;\n              });\n            }\n          }\n        }\n      }\n    }\n  };\n\n  let pila;\n\n  function startCountdown(seconds) {\n    let counter = seconds;\n    const interval = setInterval(() => {\n      counter--;\n      console.log(counter);\n\n      if (counter < 0) {\n        clearInterval(interval);\n        updateMonitoredVariableInstance(pila);\n        flagDezSegundos = true;\n      }\n    }, 1000);\n  }\n\n  const getMonitoredVariablesWithCurrentValue = monVars => {\n    return monVars.map(monVar => addCurrentValueData(monVar));\n  };\n\n  const addCurrentValueData = monVar => {\n    return { ...monVar,\n      currentValueData: {\n        key: monVar.monitoredVariableName,\n        data: monVar.currentValue\n      }\n    };\n  };\n\n  const onDisconnect = () => {\n    setError(\"Server error\");\n    setFetching(false);\n  };\n\n  useMountEffect(() => {\n    setTimeout(() => {\n      socket.connect(() => {}, onDisconnect);\n      socket.emit(SOCKET_EVENT.UPDATE_BACKEND, \"UpdateMonitoredVariables\");\n      socket.addListener(SOCKET_EVENT.EDITED_MVI_EVENT, data => {\n        //updateMonitoredVariableInstance(data)\n        pila = data;\n      });\n    }, 0);\n  }, () => socket === null || socket === void 0 ? void 0 : socket.disconnect()); //Função de trigger --> manipulação de dados quando carrega no botão de trigger\n\n  const triggerEventAction = monEv => {\n    return new Promise(async (res, rej) => {\n      try {\n        socket.connect(() => {}, onDisconnect);\n        socket.emit(SOCKET_EVENT.TRIGGER_EVENT, monEv);\n      } catch (err) {\n        rej(err);\n      }\n    });\n  };\n\n  if (redirectTo !== \"\") return /*#__PURE__*/_jsxDEV(Redirect, {\n    to: redirectTo,\n    push: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 353,\n    columnNumber: 12\n  }, this);\n  return /*#__PURE__*/_jsxDEV(Navigator, {\n    title: \"Digital Twin Monitoring\",\n    children: /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n            title: functionalityName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 360,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 361,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              children: /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                children: /*#__PURE__*/_jsxDEV(JPTable, {\n                  sortedkey: \"idMonitoredVariable\",\n                  data: monitoredVariableInstances,\n                  updateData: updateMonitoredVariableInstances,\n                  indexes: indexes_variable,\n                  tName: \"MonitoredVariable\",\n                  extra: {\n                    delete: {\n                      action: deleteMonitoredVariableAction,\n                      labelKey: 'idMonitoredVariable',\n                      onSuccessDelete: () => {}\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 365,\n                  columnNumber: 33\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 364,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 363,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 362,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              children: /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                children: /*#__PURE__*/_jsxDEV(JPTable, {\n                  sortedkey: \"idMonitoredEvent\",\n                  data: getDataMonitoredEvent(),\n                  updateData: updateMonitoredEvents,\n                  indexes: indexes_event,\n                  tName: \"MonitoredEvent\",\n                  extra: {\n                    trigger_button: {\n                      action: triggerEventAction\n                    },\n                    delete: {\n                      action: deleteMonitoredEventAction,\n                      labelKey: 'idMonitoredEvent',\n                      onSuccessDelete: () => {}\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 385,\n                  columnNumber: 33\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 384,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 383,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 382,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 359,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FunctionalityForm, {\n        cancel: {\n          action: redirectToList,\n          label: 'Cancel'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 356,\n    columnNumber: 5\n  }, this);\n};\n\n_s(FunctionalityDetails, \"injkQQL3hFNGM8l6d9KneDvrO6A=\", false, function () {\n  return [useRouteMatch, useStore, useMountEffect, useStore, useMountEffect, useStore, useMountEffect, useSmartComponentStyles, useMountEffect];\n});\n\n_c = FunctionalityDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"FunctionalityDetails\");","map":{"version":3,"sources":["/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/DigitalTwin/FunctionalityDetails.tsx"],"names":["Card","CardContent","CardHeader","Divider","Grid","React","useState","Redirect","useRouteMatch","routes","FunctionalityActions","MonitoredEventActions","MonitoredVariableActions","getOrDownloadFunctionalities","getOrDownloadMonitoredEvents","getOrDownloadMonitoredVariables","useMountEffect","Navigator","useStore","JPTable","FunctionalityForm","SocketConnection","SOCKET_EVENT","useSmartComponentStyles","deleteMonitoredEvent","deleteMonitoredVariable","flagDezSegundos","flagFirstTime","selectedMonitoredVariableGlobal","FunctionalityDetails","matchParams","id","params","fetching","setFetching","error","setError","data","monitoredVariables","dispatchAction","dispatchMonitoredVariableActions","updateMonitoredVariables","monVar","updateMonitoredVariable","selectedMonitoredVariable","setSelectedMonitoredVariable","initializeMonitoredVariable","monVars","monitoredVariable","filter","funcIdAssociated","parseInt","then","result","catch","e","msg","finally","monitoredEvents","dispatchMonitoredEventActions","updateMonitoredEvents","monEv","updateMonitoredEvent","selectedMonitoredEvent","setSelectedMonitoredEvent","initializeMonitoredEvent","monEvs","monitoredEvent","indexes_variable","label","key","indexes_event","getDataMonitoredEvent","map","deleteMonitoredVariableAction","Promise","res","rej","i","idMonitoredVariable","length","monitoredVariableName","scAssociated","sc","fbAssociated","console","log","response","err","deleteMonitoredEventAction","idMonitoredEvent","redirectTo","setRedirectTo","redirectToList","socket","disconnect","digitalTwinMonitoring","functionalities","dispatchFunctionalityActions","updateFunctionalities","funcs","setTimeout","functionalityName","setFunctionalityName","funcId","funcName","getSmartComponentsNamespace","monitoredVariableInstances","setMonitoredVariableInstances","classes","updateMonitoredVariableInstances","getMonitoredVariablesWithCurrentValue","lastMonVar","updateMonitoredVariableInstance","startCountdown","selectedMonVar","prevMonitoredVariables","newMonVar","newMonitoredVariables","oMonVar","addCurrentValueData","pila","seconds","counter","interval","setInterval","clearInterval","currentValueData","currentValue","onDisconnect","connect","emit","UPDATE_BACKEND","addListener","EDITED_MVI_EVENT","triggerEventAction","TRIGGER_EVENT","delete","action","labelKey","onSuccessDelete","trigger_button"],"mappings":"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","sourcesContent":["import { Card, CardContent, CardHeader, Divider, Grid } from '@material-ui/core'\r\nimport React, { useState } from 'react'\r\nimport { match, Redirect, useRouteMatch } from 'react-router-dom'\r\nimport { routes } from '../../App'\r\nimport { Functionality, MonitoredEvent, MonitoredVariable, MonitoredVariableInstance } from '../../model'\r\nimport { FunctionalityActions, MonitoredEventActions, MonitoredVariableActions } from '../../redux/actions'\r\nimport { RequestResponseState } from '../../services/api/api'\r\nimport { getOrDownloadFunctionalities, getOrDownloadMonitoredEvents, getOrDownloadMonitoredVariables } from '../../utils/digitalTwins'\r\nimport { useMountEffect } from '../../utils/main'\r\nimport { Navigator } from '../templates/Navigator/Navigator'\r\nimport { useStore } from '../templates/Store/Store'\r\nimport { JPTable } from '../templates/Table/JPTable'\r\nimport { FunctionalityForm } from './FunctionalityForm'\r\nimport { SocketConnection, SOCKET_EVENT } from '../../services/socket/socket'\r\nimport { useSmartComponentStyles } from '../SmartComponents/style'\r\nimport { deleteMonitoredEvent, deleteMonitoredVariable, updateMonitoredVariable } from '../../services/api/digital-twin'\r\n\r\nlet flagDezSegundos = true\r\nlet flagFirstTime = true\r\n\r\n//Esta página pretende dispor informação mais detalhada da funcionalidade correspondente disponível na página \"DigitalTwinMonitoring\"\r\n\r\nlet selectedMonitoredVariableGlobal : MonitoredVariable[] = []\r\n\r\ninterface MonitoredVariableWithCurrentValue extends MonitoredVariableInstance {\r\n    currentValueData: {\r\n        key: string | undefined\r\n        data: number\r\n    }\r\n}\r\n\r\n\r\nexport const FunctionalityDetails = () => {\r\n    \r\n    //Recupera o id da funcionalidade seleccionada anteriormente na página Digital Twin Monitoring\r\n    const matchParams : match = useRouteMatch()\r\n    const id = (matchParams.params as any).id\r\n    \r\n    // Recuperar da base de dados as variáveis que estão a ser monitorizadas (MonitoredVariable)\r\n    const [fetching,setFetching] = useState(true)\r\n    const [error,setError] = useState('')\r\n    const {data: monitoredVariables, dispatchAction: dispatchMonitoredVariableActions} = useStore('monitoredVariables')\r\n    const updateMonitoredVariables = (monVar: MonitoredVariable[]) => dispatchMonitoredVariableActions(MonitoredVariableActions.updateMonitoredVariable(monVar))\r\n    \r\n    const [selectedMonitoredVariable, setSelectedMonitoredVariable] : [MonitoredVariable[], Function] = useState([])\r\n    \r\n    const initializeMonitoredVariable = (monVars: MonitoredVariable[]) => {\r\n        \r\n        let monitoredVariable : MonitoredVariable[] = monVars.filter((monVar) => monVar.funcIdAssociated === parseInt(id))\r\n        \r\n        selectedMonitoredVariableGlobal = monitoredVariable;\r\n        \r\n        setSelectedMonitoredVariable(monitoredVariable)\r\n        \r\n    }\r\n    \r\n    useMountEffect(() => {\r\n        setFetching(true)\r\n        getOrDownloadMonitoredVariables(monitoredVariables)\r\n        .then((result: MonitoredVariable[]) => {\r\n            updateMonitoredVariables(result)\r\n            initializeMonitoredVariable(result)\r\n        })\r\n        .catch((e:RequestResponseState) => {\r\n            setError(e.msg)\r\n        })\r\n        .finally(() => setFetching(false))\r\n    })\r\n    \r\n    // Recuperar da base de dados os eventos que estão a ser monitorizados (MonitoredEvent)\r\n    const {data: monitoredEvents, dispatchAction: dispatchMonitoredEventActions} = useStore('monitoredEvents')\r\n    const updateMonitoredEvents = (monEv: MonitoredEvent[]) => dispatchMonitoredEventActions(MonitoredEventActions.updateMonitoredEvent(monEv))\r\n    \r\n    const [selectedMonitoredEvent, setSelectedMonitoredEvent] : [MonitoredEvent[], Function] = useState([])\r\n    \r\n    const initializeMonitoredEvent = (monEvs: MonitoredEvent[]) => {\r\n        \r\n        let monitoredEvent : MonitoredEvent[] = monEvs.filter((monEv) => monEv.funcIdAssociated === parseInt(id))\r\n        \r\n        setSelectedMonitoredEvent(monitoredEvent)\r\n        \r\n    }\r\n    \r\n    useMountEffect(() => {\r\n        \r\n        setFetching(true)\r\n        getOrDownloadMonitoredEvents(monitoredEvents)\r\n        .then((result: MonitoredEvent[]) => {\r\n            updateMonitoredEvents(result)\r\n            initializeMonitoredEvent(result)\r\n        })\r\n        .catch((e:RequestResponseState) => {\r\n            setError(e.msg)\r\n        })\r\n        .finally(() => setFetching(false))\r\n        \r\n    })\r\n    \r\n    // Cabeçalhos da tabela Variable + Funções Necessárias\r\n    const indexes_variable = [\r\n        {label: 'Variable', key: 'monitoredVariableName'},\r\n        {label: 'Function Block', key: 'id'},\r\n        {label: 'Smart Component', key: 'sc'},\r\n        {label: 'Current Value', key: 'currentValueData'},\r\n    ]\r\n    \r\n    // Cabeçalhos da tabela Event + Funções Necessárias\r\n    const indexes_event = [\r\n        {label: 'Event', key: 'monitoredEventName'},\r\n        {label: 'Function Block', key: 'fbAssociated'},\r\n        {label: 'Smart Component', key: 'scAssociated'},\r\n    ]\r\n    \r\n    const getDataMonitoredEvent = () =>  selectedMonitoredEvent.map((monitoredEvent: MonitoredEvent) => {    \r\n        \r\n        return {\r\n            ...monitoredEvent\r\n        }\r\n\r\n    })\r\n    \r\n    const deleteMonitoredVariableAction = (monVar: MonitoredVariableInstance) : Promise<any> => {\r\n        \r\n        return new Promise(async(res:Function,rej:Function) => {\r\n            \r\n            let i = 0\r\n            let idMonitoredVariable: number | undefined = 0\r\n            \r\n            while(i < selectedMonitoredVariableGlobal.length) {\r\n                if((selectedMonitoredVariableGlobal[i].monitoredVariableName === monVar.monitoredVariableName) && (selectedMonitoredVariableGlobal[i].scAssociated === monVar.sc) && (selectedMonitoredVariableGlobal[i].fbAssociated === monVar.id)){\r\n                    idMonitoredVariable = selectedMonitoredVariableGlobal[i].idMonitoredVariable\r\n                }\r\n                i++\r\n            }\r\n            \r\n            console.log(\"idMonitoredVariable:\",idMonitoredVariable)\r\n            \r\n            if(!idMonitoredVariable) {\r\n                console.log(\"entrei aqui\")\r\n                rej('Error')\r\n                return\r\n            }\r\n            \r\n            try {\r\n                console.log(\"idMonitoredVariable:\",idMonitoredVariable)\r\n                const response : RequestResponseState = await deleteMonitoredVariable(idMonitoredVariable)\r\n                res(response)\r\n            }\r\n            \r\n            catch(err) {\r\n                rej(err)\r\n            }\r\n        })\r\n    }\r\n    \r\n    const deleteMonitoredEventAction = (monEv: MonitoredEvent) : Promise<any> => {\r\n        \r\n        return new Promise(async(res:Function,rej:Function) => {\r\n            console.log(monEv.idMonitoredEvent)\r\n            \r\n            if(!monEv.idMonitoredEvent) {\r\n                console.log(\"entrei aqui\")\r\n                rej('Error')\r\n                return\r\n            }\r\n            \r\n            try {\r\n                console.log(\"idMonitoredEvent:\", monEv.idMonitoredEvent)\r\n                const response : RequestResponseState = await deleteMonitoredEvent(monEv.idMonitoredEvent)\r\n                res(response)\r\n            }\r\n            \r\n            catch(err) {\r\n                rej(err)\r\n            }\r\n        })\r\n    }\r\n    \r\n    // Variáveis e funções que permitem o redireccionamento para a página DigitalTwinMonitoring\r\n    const [redirectTo, setRedirectTo] : [string, Function] = useState(\"\")\r\n    \r\n    const redirectToList = () => {\r\n        \r\n        socket.disconnect()\r\n        setRedirectTo(routes.digitalTwinMonitoring)\r\n    }\r\n    \r\n    // Recuperar da base de dados as funcionalidades (Functionality)\r\n    const {data:functionalities, dispatchAction:dispatchFunctionalityActions} = useStore('functionalities')\r\n    const updateFunctionalities = (funcs: Functionality[]) => dispatchFunctionalityActions(FunctionalityActions.updateFunctionalities(funcs))\r\n    \r\n    useMountEffect(() => {\r\n        setTimeout(() => {\r\n            \r\n            setFetching(true)\r\n            getOrDownloadFunctionalities(functionalities)\r\n            .then((result: Functionality[]) => updateFunctionalities(result))\r\n            .catch((e:RequestResponseState) => setError(e.msg))\r\n            .finally(() => setFetching(false))\r\n        }, 0)\r\n    })\r\n    \r\n    // Recuperar dados da funcionalidade\r\n    let [functionalityName, setFunctionalityName] : [Functionality[], Function] = useState([])\r\n    \r\n    let i = 0;\r\n    while(i < functionalities.length){\r\n        \r\n        if(functionalities[i].funcId == id) {\r\n            functionalityName = functionalities[i].funcName\r\n        }\r\n        i++\r\n    }\r\n    \r\n    // Estabelecer a ligação com os sockets\r\n    const socket : SocketConnection = new SocketConnection(SocketConnection.getSmartComponentsNamespace())\r\n    \r\n    const [monitoredVariableInstances,setMonitoredVariableInstances] : [MonitoredVariableWithCurrentValue[],Function] = useState([])\r\n    \r\n    const classes = useSmartComponentStyles()\r\n    \r\n    const updateMonitoredVariableInstances = (monVars:MonitoredVariableInstance[]) => setMonitoredVariableInstances(getMonitoredVariablesWithCurrentValue(monVars))\r\n    \r\n    let lastMonVar : MonitoredVariableInstance\r\n    \r\n    const updateMonitoredVariableInstance = (monVars: MonitoredVariableInstance[]) => { \r\n        console.log(monVars)\r\n        if(flagFirstTime){\r\n            \r\n            flagFirstTime = false\r\n            startCountdown(10)\r\n        }\r\n        \r\n        if(flagDezSegundos){\r\n            \r\n            flagDezSegundos=false\r\n            startCountdown(10)\r\n            \r\n            for(const monVar of monVars) {\r\n                \r\n                if(selectedMonitoredVariableGlobal.length === 0){\r\n                    return []\r\n                }\r\n                else{\r\n                    \r\n                    for(const selectedMonVar of selectedMonitoredVariableGlobal){\r\n                        \r\n                        if((selectedMonVar.monitoredVariableName === monVar.monitoredVariableName) && (selectedMonVar.scAssociated === monVar.sc) && (selectedMonVar.fbAssociated === monVar.id)){\r\n                            \r\n                            setMonitoredVariableInstances((prevMonitoredVariables: MonitoredVariableWithCurrentValue[]) => {\r\n                                \r\n                                let newMonVar = true\r\n                                \r\n                                const newMonitoredVariables = getMonitoredVariablesWithCurrentValue(prevMonitoredVariables.map((oMonVar:MonitoredVariableWithCurrentValue) => {\r\n                                    \r\n                                    if((oMonVar.monitoredVariableName === monVar.monitoredVariableName) && (oMonVar.sc === monVar.sc) &&  (oMonVar.id === monVar.id)) {\r\n                                        newMonVar = false\r\n                                        return monVar\r\n                                    }\r\n                                    return oMonVar\r\n                                    \r\n                                }))\r\n                                \r\n                                if(newMonVar){\r\n                                    return [...prevMonitoredVariables, addCurrentValueData(monVar)]\r\n                                }\r\n                                return newMonitoredVariables\r\n                                \r\n                            })\r\n                        }\r\n                    }\r\n                }\r\n                \r\n            }\r\n            \r\n        }\r\n        \r\n    }\r\n    let pila : MonitoredVariableInstance[]\r\n    \r\n    function startCountdown(seconds: number) {\r\n              \r\n        let counter = seconds;\r\n    \r\n        const interval = setInterval(() => {\r\n          counter--;\r\n          console.log(counter)\r\n            \r\n          if (counter < 0 ) {\r\n            clearInterval(interval);\r\n            updateMonitoredVariableInstance(pila)\r\n            flagDezSegundos = true\r\n          }\r\n        }, 1000);\r\n    }\r\n    const getMonitoredVariablesWithCurrentValue = (monVars: MonitoredVariableInstance[]) : MonitoredVariableWithCurrentValue[] => {\r\n        \r\n        return monVars.map((monVar:MonitoredVariableInstance) => addCurrentValueData(monVar))\r\n        \r\n    }\r\n    \r\n    const addCurrentValueData = (monVar: MonitoredVariableInstance) : MonitoredVariableWithCurrentValue => {\r\n        \r\n        return (\r\n            {\r\n                ...monVar, \r\n                currentValueData:  {\r\n                    key: monVar.monitoredVariableName,\r\n                    data: monVar.currentValue\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    const onDisconnect = () => {\r\n        setError(\"Server error\")\r\n        setFetching(false)\r\n    }\r\n    useMountEffect(() => {\r\n        setTimeout(() => {\r\n\r\n            socket.connect(() => {}, onDisconnect)\r\n            socket.emit(SOCKET_EVENT.UPDATE_BACKEND,\"UpdateMonitoredVariables\")\r\n            socket.addListener(SOCKET_EVENT.EDITED_MVI_EVENT, (data) =>{ \r\n                //updateMonitoredVariableInstance(data)\r\n                pila = data\r\n            })\r\n            \r\n        }, 0)\r\n\r\n    }, () => socket?.disconnect())\r\n\r\n\r\n    //Função de trigger --> manipulação de dados quando carrega no botão de trigger\r\n    const triggerEventAction = (monEv: MonitoredEvent) : Promise<any> => {\r\n        \r\n        return new Promise(async(res:Function,rej:Function) => {\r\n            \r\n            try {\r\n    \r\n                socket.connect(() => {}, onDisconnect)\r\n                socket.emit(SOCKET_EVENT.TRIGGER_EVENT,monEv)\r\n\r\n              }\r\n    \r\n            catch(err) {\r\n                rej(err)\r\n            }\r\n        })\r\n    }\r\n\r\n    if(redirectTo !== \"\") \r\n    return <Redirect to={redirectTo} push={true} />\r\n\r\n    return(\r\n    <Navigator title=\"Digital Twin Monitoring\">\r\n    <>\r\n        <Grid item>\r\n            <Card>\r\n                <CardHeader title={functionalityName} />\r\n                <Divider />\r\n                    <CardContent>\r\n                        <Grid item xs={12}>        \r\n                            <Grid item>\r\n                                <JPTable\r\n                                    sortedkey=\"idMonitoredVariable\"\r\n                                    data={monitoredVariableInstances} \r\n                                    updateData={updateMonitoredVariableInstances} \r\n                                    indexes={indexes_variable} \r\n                                    tName='MonitoredVariable'\r\n                                    extra = {{   \r\n                                        delete: {\r\n                                        action: deleteMonitoredVariableAction,\r\n                                        labelKey: 'idMonitoredVariable',\r\n                                        onSuccessDelete: () => {}\r\n                                    }}}\r\n                                 \r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                    </CardContent>\r\n                    <CardContent>\r\n                        <Grid item xs={12}>        \r\n                            <Grid item>\r\n                                <JPTable\r\n                                    sortedkey=\"idMonitoredEvent\"\r\n                                    data={getDataMonitoredEvent()} \r\n                                    updateData={updateMonitoredEvents} \r\n                                    indexes={indexes_event} \r\n                                    tName='MonitoredEvent'\r\n                                    extra={{\r\n                                        trigger_button: {\r\n                                            action: triggerEventAction\r\n                                        },\r\n                                        delete: {\r\n                                            action: deleteMonitoredEventAction,\r\n                                            labelKey: 'idMonitoredEvent',\r\n                                            onSuccessDelete: () => {}\r\n                                        }\r\n                                    }} \r\n                                />\r\n                                \r\n                            </Grid>\r\n                            \r\n                        </Grid>\r\n                    </CardContent>\r\n            </Card>\r\n        </Grid>\r\n        <FunctionalityForm\r\n            cancel={{action: redirectToList, label: 'Cancel'}}\r\n        />\r\n    </>\r\n    \r\n    </Navigator>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}