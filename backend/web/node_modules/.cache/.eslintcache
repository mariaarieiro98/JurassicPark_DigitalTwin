[{"/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/index.tsx":"1","/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/serviceWorker.ts":"2","/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/App.tsx":"3","/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/styles/main.ts":"4","/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/redux/actions.ts":"5","/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/redux/reducers.ts":"6","/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/utils/main.ts":"7","/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/services/socket/socket.ts":"8","/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/components/DigitalTwin/DigitalTwinMonitoring.tsx":"9","/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/components/DigitalTwin/FunctionalityDetails.tsx":"10","/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/components/FunctionBlocks/List/List.tsx":"11","/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/components/FunctionBlocks/FunctionBlock/NewFunctionBlock.tsx":"12","/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/components/SmartComponents/List/List.tsx":"13","/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/components/templates/Store/Store.tsx":"14","/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/components/FunctionBlocks/FunctionBlock/EditFunctionBlock.tsx":"15","/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/components/SmartComponents/SmartComponent/SmartComponent.tsx":"16","/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/components/FunctionBlockCategories/List/List.tsx":"17","/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/utils/digitalTwins.ts":"18","/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/components/SmartComponents/style.ts":"19","/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/components/FunctionBlockCategories/List/style.ts":"20","/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/utils/functionBlock.ts":"21","/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/services/api/function-block.ts":"22","/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/services/api/digital-twin.ts":"23","/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/components/templates/Navigator/Navigator.tsx":"24","/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/components/templates/LazyComponent/LazyComponent.tsx":"25","/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/components/templates/ConfirmAction/ConfirmAction.tsx":"26","/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/components/FunctionBlocks/FunctionBlock/FunctionBlockForm.tsx":"27","/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/components/templates/Table/JPTable.tsx":"28","/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/components/templates/Charts/Gauge.tsx":"29","/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/components/templates/Charts/Bars.tsx":"30","/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/services/api/api.ts":"31","/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/components/templates/Charts/style.ts":"32","/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/components/FunctionBlocks/FunctionBlock/style.ts":"33","/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/components/FunctionBlocks/FunctionBlock/Event.tsx":"34","/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/components/FunctionBlocks/FunctionBlock/Variable.tsx":"35","/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/model/index.ts":"36","/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/components/templates/ConfirmAction/style.ts":"37","/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/components/templates/Search/SearchableList.tsx":"38","/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/model/model/DigitalTwin.ts":"39","/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/model/model/Tables.ts":"40","/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/model/model/User.ts":"41","/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/model/model/SmartComponent.ts":"42","/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/model/model/FunctionBlock.ts":"43","/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/model/model/EventVariable.ts":"44","/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/model/model/Error.ts":"45","/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/components/DigitalTwin/DigitalTwinForm.tsx":"46","/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/components/DigitalTwin/NewDigitalTwin.tsx":"47","/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/components/DigitalTwin/FunctionalityForm.tsx":"48","/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/index.tsx":"49","/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/serviceWorker.ts":"50","/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/App.tsx":"51","/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/redux/reducers.ts":"52","/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/utils/main.ts":"53","/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/redux/actions.ts":"54","/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/styles/main.ts":"55","/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/services/socket/socket.ts":"56","/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/DigitalTwin/NewDigitalTwin.tsx":"57","/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/FunctionBlocks/List/List.tsx":"58","/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/FunctionBlocks/FunctionBlock/NewFunctionBlock.tsx":"59","/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/DigitalTwin/FunctionalityDetails.tsx":"60","/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/SmartComponents/List/List.tsx":"61","/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/templates/Store/Store.tsx":"62","/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/SmartComponents/SmartComponent/SmartComponent.tsx":"63","/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/FunctionBlocks/FunctionBlock/EditFunctionBlock.tsx":"64","/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/FunctionBlockCategories/List/List.tsx":"65","/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/DigitalTwin/DigitalTwinMonitoring.tsx":"66","/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/utils/digitalTwins.ts":"67","/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/SmartComponents/style.ts":"68","/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/utils/functionBlock.ts":"69","/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/FunctionBlockCategories/List/style.ts":"70","/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/services/api/digital-twin.ts":"71","/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/services/api/function-block.ts":"72","/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/FunctionBlocks/FunctionBlock/style.ts":"73","/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/DigitalTwin/DigitalTwinForm.tsx":"74","/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/DigitalTwin/FunctionalityForm.tsx":"75","/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/templates/Navigator/Navigator.tsx":"76","/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/templates/ConfirmAction/ConfirmAction.tsx":"77","/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/templates/LazyComponent/LazyComponent.tsx":"78","/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/FunctionBlocks/FunctionBlock/FunctionBlockForm.tsx":"79","/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/templates/Table/JPTable.tsx":"80","/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/templates/Charts/Gauge.tsx":"81","/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/templates/Charts/Bars.tsx":"82","/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/services/api/api.ts":"83","/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/templates/Charts/style.ts":"84","/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/FunctionBlocks/FunctionBlock/Event.tsx":"85","/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/templates/ConfirmAction/style.ts":"86","/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/FunctionBlocks/FunctionBlock/Variable.tsx":"87","/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/model/index.ts":"88","/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/templates/Search/SearchableList.tsx":"89","/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/model/model/DigitalTwin.ts":"90","/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/model/model/Tables.ts":"91","/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/model/model/User.ts":"92","/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/model/model/FunctionBlock.ts":"93","/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/model/model/SmartComponent.ts":"94","/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/model/model/EventVariable.ts":"95","/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/model/model/Error.ts":"96","/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/utils/smartComponents.ts":"97","/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/services/api/smart-component.ts":"98","/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/model/model/AssociatedSmartComponent.ts":"99","/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/utils/associatedSmartComponents.ts":"100","/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/DigitalTwin/SmartComponent.tsx":"101"},{"size":452,"mtime":1616239754000,"results":"102","hashOfConfig":"103"},{"size":5295,"mtime":1616239754000,"results":"104","hashOfConfig":"103"},{"size":4655,"mtime":1617299746804,"results":"105","hashOfConfig":"103"},{"size":1053,"mtime":1616239754000,"results":"106","hashOfConfig":"103"},{"size":3918,"mtime":1616492844000,"results":"107","hashOfConfig":"103"},{"size":2389,"mtime":1617121725223,"results":"108","hashOfConfig":"103"},{"size":1296,"mtime":1615796512000,"results":"109","hashOfConfig":"103"},{"size":2617,"mtime":1616853543298,"results":"110","hashOfConfig":"103"},{"size":20140,"mtime":1617371819661,"results":"111","hashOfConfig":"103"},{"size":1131,"mtime":1617299246955,"results":"112","hashOfConfig":"103"},{"size":3819,"mtime":1616493374000,"results":"113","hashOfConfig":"103"},{"size":5409,"mtime":1616578380000,"results":"114","hashOfConfig":"103"},{"size":5200,"mtime":1615872672000,"results":"115","hashOfConfig":"103"},{"size":1065,"mtime":1615796512000,"results":"116","hashOfConfig":"103"},{"size":8586,"mtime":1615796510000,"results":"117","hashOfConfig":"103"},{"size":12587,"mtime":1615796512000,"results":"118","hashOfConfig":"103"},{"size":13191,"mtime":1617034720424,"results":"119","hashOfConfig":"103"},{"size":1132,"mtime":1616944325018,"results":"120","hashOfConfig":"103"},{"size":824,"mtime":1615796512000,"results":"121","hashOfConfig":"103"},{"size":375,"mtime":1617280496811,"results":"122","hashOfConfig":"103"},{"size":8322,"mtime":1616494052000,"results":"123","hashOfConfig":"103"},{"size":1644,"mtime":1615796512000,"results":"124","hashOfConfig":"103"},{"size":1533,"mtime":1617280164374,"results":"125","hashOfConfig":"103"},{"size":5310,"mtime":1617197110672,"results":"126","hashOfConfig":"103"},{"size":436,"mtime":1616397982000,"results":"127","hashOfConfig":"103"},{"size":5257,"mtime":1615796512000,"results":"128","hashOfConfig":"103"},{"size":24437,"mtime":1615796512000,"results":"129","hashOfConfig":"103"},{"size":10354,"mtime":1617297760439,"results":"130","hashOfConfig":"103"},{"size":1164,"mtime":1615796512000,"results":"131","hashOfConfig":"103"},{"size":1093,"mtime":1615796512000,"results":"132","hashOfConfig":"103"},{"size":4240,"mtime":1616944550248,"results":"133","hashOfConfig":"103"},{"size":1232,"mtime":1615796512000,"results":"134","hashOfConfig":"103"},{"size":1007,"mtime":1615796512000,"results":"135","hashOfConfig":"103"},{"size":5125,"mtime":1615796512000,"results":"136","hashOfConfig":"103"},{"size":5008,"mtime":1617189449179,"results":"137","hashOfConfig":"103"},{"size":241,"mtime":1616729330999,"results":"138","hashOfConfig":"103"},{"size":254,"mtime":1615796512000,"results":"139","hashOfConfig":"103"},{"size":1001,"mtime":1615872396000,"results":"140","hashOfConfig":"103"},{"size":626,"mtime":1617371336764,"results":"141","hashOfConfig":"103"},{"size":484,"mtime":1616729172886,"results":"142","hashOfConfig":"103"},{"size":90,"mtime":1616729177335,"results":"143","hashOfConfig":"103"},{"size":649,"mtime":1617371369360,"results":"144","hashOfConfig":"103"},{"size":959,"mtime":1616729238315,"results":"145","hashOfConfig":"103"},{"size":882,"mtime":1616729234983,"results":"146","hashOfConfig":"103"},{"size":310,"mtime":1616729144274,"results":"147","hashOfConfig":"103"},{"size":4422,"mtime":1617366235471,"results":"148","hashOfConfig":"103"},{"size":2892,"mtime":1617366737699,"results":"149","hashOfConfig":"103"},{"size":6907,"mtime":1617299824575,"results":"150","hashOfConfig":"103"},{"size":452,"mtime":1616239754000,"results":"151","hashOfConfig":"152"},{"size":5295,"mtime":1616239754000,"results":"153","hashOfConfig":"152"},{"size":5047,"mtime":1618496897947,"results":"154","hashOfConfig":"152"},{"size":3449,"mtime":1618496435318,"results":"155","hashOfConfig":"152"},{"size":1296,"mtime":1615796512000,"results":"156","hashOfConfig":"152"},{"size":5501,"mtime":1618496438234,"results":"157","hashOfConfig":"152"},{"size":1053,"mtime":1616239754000,"results":"158","hashOfConfig":"152"},{"size":2617,"mtime":1618309931247,"results":"159","hashOfConfig":"152"},{"size":4106,"mtime":1618764541881,"results":"160","hashOfConfig":"152"},{"size":3819,"mtime":1618499577849,"results":"161","hashOfConfig":"152"},{"size":5409,"mtime":1616578380000,"results":"162","hashOfConfig":"152"},{"size":1131,"mtime":1617299246955,"results":"163","hashOfConfig":"152"},{"size":5204,"mtime":1618323753086,"results":"164","hashOfConfig":"152"},{"size":1065,"mtime":1615796512000,"results":"165","hashOfConfig":"152"},{"size":12586,"mtime":1618309099580,"results":"166","hashOfConfig":"152"},{"size":8586,"mtime":1615796510000,"results":"167","hashOfConfig":"152"},{"size":13191,"mtime":1617034720424,"results":"168","hashOfConfig":"152"},{"size":22448,"mtime":1618686069157,"results":"169","hashOfConfig":"152"},{"size":1049,"mtime":1618332724945,"results":"170","hashOfConfig":"152"},{"size":824,"mtime":1615796512000,"results":"171","hashOfConfig":"152"},{"size":8320,"mtime":1618327954841,"results":"172","hashOfConfig":"152"},{"size":375,"mtime":1617280496811,"results":"173","hashOfConfig":"152"},{"size":2008,"mtime":1618683825682,"results":"174","hashOfConfig":"152"},{"size":1644,"mtime":1615796512000,"results":"175","hashOfConfig":"152"},{"size":1007,"mtime":1615796512000,"results":"176","hashOfConfig":"152"},{"size":8759,"mtime":1618772429604,"results":"177","hashOfConfig":"152"},{"size":6907,"mtime":1617299824575,"results":"178","hashOfConfig":"152"},{"size":5310,"mtime":1617197110672,"results":"179","hashOfConfig":"152"},{"size":5257,"mtime":1615796512000,"results":"180","hashOfConfig":"152"},{"size":436,"mtime":1616397982000,"results":"181","hashOfConfig":"152"},{"size":24505,"mtime":1618772142268,"results":"182","hashOfConfig":"152"},{"size":10353,"mtime":1618499567693,"results":"183","hashOfConfig":"152"},{"size":1164,"mtime":1615796512000,"results":"184","hashOfConfig":"152"},{"size":1093,"mtime":1615796512000,"results":"185","hashOfConfig":"152"},{"size":4530,"mtime":1618683864529,"results":"186","hashOfConfig":"152"},{"size":1232,"mtime":1615796512000,"results":"187","hashOfConfig":"152"},{"size":5125,"mtime":1615796512000,"results":"188","hashOfConfig":"152"},{"size":254,"mtime":1615796512000,"results":"189","hashOfConfig":"152"},{"size":5008,"mtime":1617189449179,"results":"190","hashOfConfig":"152"},{"size":291,"mtime":1618495349775,"results":"191","hashOfConfig":"152"},{"size":1001,"mtime":1615872396000,"results":"192","hashOfConfig":"152"},{"size":717,"mtime":1618679395546,"results":"193","hashOfConfig":"152"},{"size":484,"mtime":1616729172886,"results":"194","hashOfConfig":"152"},{"size":90,"mtime":1616729177335,"results":"195","hashOfConfig":"152"},{"size":959,"mtime":1616729238315,"results":"196","hashOfConfig":"152"},{"size":649,"mtime":1617371369360,"results":"197","hashOfConfig":"152"},{"size":882,"mtime":1618673887736,"results":"198","hashOfConfig":"152"},{"size":310,"mtime":1616729144274,"results":"199","hashOfConfig":"152"},{"size":616,"mtime":1618496451234,"results":"200","hashOfConfig":"152"},{"size":442,"mtime":1618331970898,"results":"201","hashOfConfig":"152"},{"size":187,"mtime":1618565651619,"results":"202","hashOfConfig":"152"},{"size":727,"mtime":1618496441894,"results":"203","hashOfConfig":"152"},{"size":6096,"mtime":1618772348013,"results":"204","hashOfConfig":"152"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"207"},"12btwlu",{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"207"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"207"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"207"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"207"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"207"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"207"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"207"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"207"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"207"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"207"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"207"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"207"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"207"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"207"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243","usedDeprecatedRules":"207"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"207"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"207"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"207"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"252","usedDeprecatedRules":"207"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"207"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"207"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"207"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"207"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"207"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"265","usedDeprecatedRules":"207"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"268","usedDeprecatedRules":"207"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"207"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"207"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"207"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"207"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"207"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"207"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"283","usedDeprecatedRules":"207"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"207"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"207"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"207"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"292"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"207"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"207"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"207"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"207"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"207"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"307","usedDeprecatedRules":"207"},{"filePath":"308","messages":"309","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"310","messages":"311","errorCount":0,"warningCount":30,"fixableErrorCount":0,"fixableWarningCount":0,"source":"312","usedDeprecatedRules":"207"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},"1u02fxv",{"filePath":"316","messages":"317","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"315"},{"filePath":"324","messages":"325","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"328","messages":"329","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"330","messages":"331","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"332","messages":"333","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"336","messages":"337","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"315"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"342","messages":"343","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"344","messages":"345","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"346","messages":"347","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243","usedDeprecatedRules":"315"},{"filePath":"348","messages":"349","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"350","usedDeprecatedRules":"315"},{"filePath":"351","messages":"352","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"353","messages":"354","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"355","messages":"356","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"357","usedDeprecatedRules":"315"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"360","messages":"361","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"362","messages":"363","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"364","messages":"365","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"366","messages":"367","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"368","messages":"369","errorCount":0,"warningCount":30,"fixableErrorCount":0,"fixableWarningCount":0,"source":"312","usedDeprecatedRules":"315"},{"filePath":"370","messages":"371","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"372","messages":"373","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"374","messages":"375","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"376","messages":"377","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"378","messages":"379","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"380","usedDeprecatedRules":"315"},{"filePath":"381","messages":"382","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"383","messages":"384","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"385","messages":"386","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"387","messages":"388","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"389","messages":"390","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"391","messages":"392","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"393","messages":"394","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"283","usedDeprecatedRules":"315"},{"filePath":"395","messages":"396","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"397","messages":"398","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"399","messages":"400","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"401","usedDeprecatedRules":"315"},{"filePath":"402","messages":"403","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"404","messages":"405","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"406","messages":"407","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"408","messages":"409","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"410","messages":"411","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"412","messages":"413","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"414","messages":"415","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"416","messages":"417","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"418","messages":"419","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"315"},{"filePath":"420","messages":"421","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"422"},{"filePath":"423","messages":"424","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/index.tsx",[],["425","426"],"/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/serviceWorker.ts",[],"/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/App.tsx",[],"/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/styles/main.ts",[],"/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/redux/actions.ts",[],"/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/redux/reducers.ts",[],"/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/utils/main.ts",["427"],"import { EffectCallback, useEffect } from \"react\"\n\nexport type Order = 'asc' | 'desc'\n\nexport const useMountEffect = (actionOnMount: EffectCallback, actionOnUnmount?:any) => {\n    \n    const action : EffectCallback = () => {\n        actionOnMount()\n        return actionOnUnmount\n    }\n\n    useEffect(action,[])\n    \n}\n\nexport const setField = (setState:Function, fieldName: string, state:any) => (event: any) => setState({...state, [fieldName]: event.target.value})\n\nexport const setSimpleField = (updateFunction: Function, extraJob?: () => void) => (event:any) => {\n    if(extraJob)\n        extraJob()\n    updateFunction(event.target.value)\n}\n\nexport const toBase64 = (file: File) : Promise<string> => {\n\n    return new Promise((res:Function, rej: Function) => {\n\n        const reader = new FileReader()\n        reader.readAsDataURL(file)\n        reader.onload = () => res(reader.result)\n        reader.onerror = error => rej(error)\n\n    })\n\n}\n\nexport const readLocalFile = (file: File) : Promise<string> => {\n    \n    return new Promise((res:Function, rej:Function) => {\n        \n        const fileReader = new FileReader()\n        fileReader.readAsText(file)\n        fileReader.onload = (result:any) => res(result.target.result)\n        fileReader.onerror = (e:any) => rej('Error')\n\n    })\n\n}","/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/services/socket/socket.ts",[],"/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/components/DigitalTwin/DigitalTwinMonitoring.tsx",["428","429","430","431","432"],"import React, { useState } from 'react'\r\nimport { Navigator } from '../templates/Navigator/Navigator'\r\nimport { ConfirmAction, ConfirmActionState, ConfirmActionStateLabel, ConfirmActionProps } from '../templates/ConfirmAction/ConfirmAction'\r\nimport { LazyComponent } from '../templates/LazyComponent/LazyComponent'\r\nimport { JPTable } from '../templates/Table/JPTable'\r\nimport { Functionality, DigitalTwin} from '../../model'\r\nimport { useMountEffect } from '../../utils/main'\r\nimport { getOrDownloadDigitalTwins, getOrDownloadFunctionalities} from '../../utils/digitalTwins'\r\nimport { useStore } from '../templates/Store/Store'\r\nimport { FunctionalityActions , DigitalTwinActions} from '../../redux/actions'\r\nimport { RequestResponseState } from '../../services/api/api'\r\nimport { TextField, Grid, Button, Box, Dialog, DialogTitle, CircularProgress , Select, InputLabel, MenuItem, FormControl, Input, FormHelperText } from '@material-ui/core'\r\nimport { createFunctionality, updateFunctionality } from '../../services/api/digital-twin'\r\nimport { deleteFunctionality} from '../../services/api/digital-twin'\r\nimport { useDialogStyles } from '../FunctionBlockCategories/List/style'\r\nimport { CheckCircle, Error } from '@material-ui/icons'\r\nimport { useFunctionBlockStyles } from '../FunctionBlocks/FunctionBlock/style'\r\nimport { routes } from '../../App'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\nconst NEW_FUNCTIONALITY_RE = /[a-zA-Z0-9]{3,}/\r\n\r\nlet functionalityId = -1\r\nconst funcUserId = 1\r\n\r\nconst EditFunctionalityDialog = (props: {func: Functionality, onGood: (newFunc: Functionality) => void, onError: () => void, onCancel: () => void}) => {\r\n\r\n  const [newFuncName, setNewFuncName] : [string,Function] = useState(props.func.funcName)\r\n\r\n  const classes = useDialogStyles()\r\n\r\n  const [sending, setSending] : [boolean, Function] = useState(false)\r\n\r\n  const [result, setResult] : [{done: boolean, good?: boolean, message?: string},Function] = useState({done:false})\r\n\r\n  const action = () => {\r\n\r\n      if(props.func.funcId) {\r\n\r\n          if(!result.done) {\r\n\r\n              setSending(true)\r\n  \r\n              updateFunctionality(props.func.funcId, newFuncName)\r\n\r\n                  .then((response: RequestResponseState) => {\r\n                      setResult({done:true, good: true, message: response.msg})\r\n                  })\r\n\r\n                  .catch((error: RequestResponseState) => {\r\n                      setResult({done: true, good: false, message: error.msg})\r\n                  })\r\n\r\n                  .finally(() => setSending(false))\r\n\r\n          }\r\n\r\n          else {\r\n\r\n              if(result.good)\r\n                  props.onGood({...props.func, funcName: newFuncName})\r\n              \r\n              else\r\n                  props.onError()\r\n\r\n          }\r\n\r\n      }\r\n\r\n  }\r\n\r\n  return (\r\n      <Dialog open={true}>\r\n          <DialogTitle>Edit Functionality</DialogTitle>\r\n          <Box className={classes.box}>\r\n              {\r\n                  !result.done \r\n                      ?\r\n                          <TextField \r\n                              disabled={sending}\r\n                              value={newFuncName}\r\n                              onChange={(event) => setNewFuncName(event.target.value)}\r\n                          />\r\n                      :    <Grid container justify=\"center\">\r\n                              <Grid item>\r\n                                  {\r\n                                      result.good \r\n                                          ?   <CheckCircle color=\"primary\" />\r\n                                          :   <Error color=\"error\" />\r\n                                  }\r\n                              </Grid>\r\n                              <Grid item>\r\n                                  <Box className={result.good ? classes.good : classes.error} textAlign=\"center\">{result.message}</Box>\r\n                              </Grid>\r\n                          </Grid> \r\n              }\r\n          </Box>\r\n          <Grid className={classes.buttons} container direction=\"row\" justify=\"space-between\">\r\n              <Grid item>\r\n                  {sending \r\n                      ? <CircularProgress color=\"primary\" />\r\n                      : <Button onClick={action}>Ok</Button>\r\n                  }\r\n              </Grid>\r\n              <Grid item>\r\n                  <Button disabled={sending} onClick={props.onCancel}>Cancel</Button>\r\n              </Grid>\r\n          </Grid>\r\n      </Dialog>\r\n  )\r\n\r\n}\r\n\r\nconst AddFunctionalityDetails = (props: {func: Functionality, onGood: (newFunc: Functionality) => void, onError: () => void, onCancel: () => void}) => {\r\n\r\n    const [newFuncName, setNewFuncName] : [string,Function] = useState(props.func.funcName)\r\n  \r\n    const classes = useDialogStyles()\r\n  \r\n    const [sending, setSending] : [boolean, Function] = useState(false)\r\n  \r\n    const [result, setResult] : [{done: boolean, good?: boolean, message?: string},Function] = useState({done:false})\r\n  \r\n    const action = () => {\r\n  \r\n        if(props.func.funcId) {\r\n  \r\n            if(!result.done) {\r\n  \r\n                setSending(true)\r\n    \r\n                updateFunctionality(props.func.funcId, newFuncName)\r\n  \r\n                    .then((response: RequestResponseState) => {\r\n                        setResult({done:true, good: true, message: response.msg})\r\n                    })\r\n  \r\n                    .catch((error: RequestResponseState) => {\r\n                        setResult({done: true, good: false, message: error.msg})\r\n                    })\r\n  \r\n                    .finally(() => setSending(false))\r\n  \r\n            }\r\n  \r\n            else {\r\n  \r\n                if(result.good)\r\n                    props.onGood({...props.func, funcName: newFuncName})\r\n                \r\n                else\r\n                    props.onError()\r\n  \r\n            }\r\n  \r\n        }\r\n  \r\n    }\r\n  \r\n    return (\r\n        <Dialog open={true}>\r\n            <DialogTitle>Add Functionality Details</DialogTitle>\r\n            <Box className={classes.box}>\r\n            <Grid item> \r\n                <Grid container item xs>\r\n                    <Grid className={classes.box} spacing={3} item container direction=\"column\" alignItems=\"flex-start\">\r\n                        {/* <InputLabel id={`digital-twin-label-${newFunc}`}>DINASORE</InputLabel>\r\n                                <Select labelId={`digital-twin-label-${newFunc}`} value={digitalTwinChoice} onChange={handleDigitalTwinChoice}>\r\n                                {(digitalTwins || []).map((digitalTwin: any) => {return <MenuItem key={digitalTwin.dtId} value={digitalTwin.dtName}>{digitalTwin.dtName}</MenuItem>})}\r\n                                </Select> */}\r\n                        <Grid item xs={12} sm={6}>\r\n                            <TextField\r\n                                label= \"Dinasore\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6}>\r\n                            <TextField\r\n                                label= \"Function Block\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6}>\r\n                            <TextField\r\n                                label= \"Variable/Event\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6}>\r\n                            <TextField\r\n                                label= \"Display Name\"\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n            <Grid className={classes.buttons} container direction=\"row\" justify=\"space-between\">\r\n                <Grid item>\r\n                    {sending \r\n                        ? <CircularProgress color=\"primary\" />\r\n                        : <Button onClick={action}>Ok</Button>\r\n                    }\r\n                </Grid>\r\n                <Grid item>\r\n                    <Button disabled={sending} onClick={props.onCancel}>Cancel</Button>\r\n                </Grid>\r\n            </Grid>\r\n         </Box>\r\n        </Dialog>\r\n    )\r\n  \r\n}\r\n  \r\n\r\nexport const DigitalTwinMonitoring = () => {\r\n    \r\n  const classes = useFunctionBlockStyles()\r\n\r\n  const [fetching,setFetching] = useState(true)\r\n  const [error,setError] = useState('')\r\n  const [newFunc,setNewFunc] : [string,Function] = useState('')\r\n\r\n  const [confirmEditing,setConfirmEditing] : [boolean, Function] = useState(false)\r\n  const [confirmAddFunc,setConfirmAddFunc] : [boolean, Function] = useState(false)\r\n\r\n  const [validNewFunc, setValidNewFunc] : [boolean,Function] = useState(true)\r\n\r\n  const errorFetchingFunctionalityState : ConfirmActionState = {\r\n    label: error,\r\n    state: ConfirmActionStateLabel.error,\r\n    positiveLabel: 'Ok'\r\n  }\r\n\r\n  const [redirectTo, setRedirectTo] : [string, Function] = useState(\"\")\r\n\r\n  const {data:functionalities, dispatchAction:dispatchFunctionalityActions} = useStore('functionalities')\r\n  const {data:digitalTwins, dispatchAction:dispatchDigitalTwinActions} = useStore('digitalTwins')\r\n\r\n  const onCancel = () => setError('')\r\n\r\n  const updateFunctionalities = (funcs: Functionality[]) => dispatchFunctionalityActions(FunctionalityActions.updateFunctionalities(funcs))\r\n  const updateDigitalTwins = (dts: DigitalTwin[]) => dispatchDigitalTwinActions(DigitalTwinActions.updateDigitalTwins(dts))\r\n  const addFunc = () => dispatchFunctionalityActions(FunctionalityActions.addFunctionality({funcId: functionalityId, funcUserId: 1 , funcName: newFunc, funcdtId: 1}))\r\n \r\n  const [editingFunc, setEditingFunc] : [Functionality | null,Function] = useState(null)\r\n  const [addDetailsFunc, setAddDetailsFunc] : [Functionality | null,Function] = useState(null)\r\n\r\n\r\n  const indexes = [\r\n    {label: 'Functionality', key: 'funcName'},\r\n    {label: 'Digital Twin', key: 'dtName'},\r\n    {label: 'State', key: 'dtDescription'},\r\n    {label: 'AssociatedSmartComponents', key: 'dtSmartComponents'},\r\n    {label: 'Monitored Variables/Events', key: 'dtMonitoredVariableEvent'},\r\n  ]\r\n\r\n  // Recuperar da base de dados as funcionalidades (Functionality)\r\n  useMountEffect(() => {\r\n\r\n    setTimeout(() => {\r\n\r\n    setFetching(true)\r\n    getOrDownloadFunctionalities(functionalities)\r\n        .then((result: Functionality[]) => updateFunctionalities(result))\r\n        .catch((e:RequestResponseState) => setError(e.msg))\r\n        .finally(() => setFetching(false))\r\n    }, 0)\r\n  })\r\n\r\n  \r\n  // Recuperar da base de dados os digital twins (DigitalTwin)\r\n  useMountEffect(() => {\r\n\r\n    setTimeout(() => {\r\n\r\n    setFetching(true)\r\n    getOrDownloadDigitalTwins(digitalTwins)\r\n        .then((result: DigitalTwin[]) => updateDigitalTwins(result))\r\n        .catch((e:RequestResponseState) => setError(e.msg))\r\n        .finally(() => setFetching(false))\r\n    }, 0)\r\n  })\r\n\r\n  const isFunctionalityValid = (func:string) => NEW_FUNCTIONALITY_RE.test(func)\r\n\r\n  const validateAndCreate = () => {\r\n\r\n  const validFunc= isFunctionalityValid(newFunc)\r\n\r\n    if(!validFunc)\r\n      setValidNewFunc(false)\r\n    else\r\n      setConfirmAddFunc(true)\r\n\r\n  }\r\n\r\n  const buildFunctionality = () : Functionality => ({\r\n    funcName: newFunc, funcId: functionalityId,\r\n    funcdtId: digitalTwinIdChoice , funcUserId, funcdtName: digitalTwinChoice,\r\n  })\r\n\r\n\r\n  const addNewFunctionalityAction = () : Promise<string> => {\r\n\r\n    const functionality : Functionality = buildFunctionality()\r\n\r\n    return new Promise<string>((res:Function, rej:Function)  => {\r\n\r\n        console.log(functionality)\r\n\r\n        createFunctionality(functionality)\r\n\r\n            .then((result: RequestResponseState) => {\r\n            functionalityId = result.extra.lastInsertedId\r\n                res('Functionality created')\r\n            })\r\n\r\n            .catch((e:RequestResponseState) => rej(e.msg))\r\n\r\n    })\r\n  }\r\n\r\n  const confirmFunctionalityCreationActionStates = {\r\n    start: {\r\n      label: `Confirm creation of new functionality: ${newFunc} ?`,\r\n      positiveLabel: 'Ok',\r\n      negativeLabel: 'Cancel',\r\n      state: ConfirmActionStateLabel.start\r\n    },\r\n    executing: {\r\n      label: '',\r\n      state: ConfirmActionStateLabel.executing,\r\n    },\r\n    success: {\r\n      label: 'Functionality Created',\r\n      state: ConfirmActionStateLabel.success,\r\n      positiveLabel: 'Ok'\r\n    },\r\n    error: {\r\n      label: 'Error Creating Functionality',\r\n      state: ConfirmActionStateLabel.error,\r\n      positiveLabel: 'Ok'\r\n    },\r\n  }\r\n\r\n  const confirmActionProps : ConfirmActionProps = {\r\n\r\n    title: 'Add Functionality',\r\n    states: confirmFunctionalityCreationActionStates,\r\n    currentState: confirmFunctionalityCreationActionStates.start,\r\n    onCancel: () => setConfirmAddFunc(false),\r\n    onError: () => setConfirmAddFunc(false),\r\n    onSuccess: () => {\r\n        addFunc()\r\n        setNewFunc('')\r\n    },\r\n    action: addNewFunctionalityAction,\r\n  }\r\n\r\n  const getDataFunctionality = () => functionalities.map((functionality: Functionality) => {\r\n\r\n    return {\r\n          ...functionality,\r\n    }\r\n  })\r\n\r\n  const deleteFunctionalityAction = (func: Functionality) : Promise<any> => {\r\n\r\n    return new Promise(async(res:Function,rej:Function) => {\r\n\r\n        if(!func.funcId) {\r\n            rej('Error')\r\n            return\r\n        }\r\n\r\n        try {\r\n            const response : RequestResponseState = await deleteFunctionality(func.funcId)\r\n            res(response)\r\n          }\r\n\r\n        catch(err) {\r\n            rej(err)\r\n        }\r\n    })\r\n  }\r\n\r\n  //Adicionar Detalhes à Funcionalidade\r\n  const cancelAddDetails = () => setAddDetailsFunc(null);\r\n  const showAddDetails = (func: Functionality) => setAddDetailsFunc(func)\r\n  \r\n  //Editar a Funcionalidade\r\n  const cancelEditing = () => setEditingFunc(null)\r\n  const showEditing = (func: Functionality) => setEditingFunc(func)\r\n\r\n  const onGoodEditing = (editingFunctionality: Functionality) => {\r\n      \r\n    const newFunctionalities = functionalities.map((func: Functionality) => {\r\n\r\n    if(func.funcId === editingFunctionality.funcId)\r\n        return {...func, funcName: editingFunctionality.funcName, funcdtId: editingFunctionality.funcdtId}\r\n    return func\r\n\r\n    })\r\n  \r\n    cancelEditing()\r\n    dispatchFunctionalityActions(FunctionalityActions.updateFunctionalities(newFunctionalities))\r\n  }\r\n\r\n  // Associar um digital twin à nova funcionalidade criada\r\n  const [digitalTwinChoice, setDigitalTwinChoice] = useState('')\r\n  const [digitalTwinIdChoice, setDigitalTwinIdChoice] = useState(0)\r\n\r\n  const handleDigitalTwinChoice = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n    setDigitalTwinChoice(event.target.value as string);\r\n    let i = 0;\r\n    while(i < digitalTwins.length)\r\n    {\r\n        if(digitalTwins[i].dtName === (event.target.value as string))\r\n        {\r\n            setDigitalTwinIdChoice(digitalTwins[i].dtId)\r\n        }\r\n        i++;\r\n    }\r\n   \r\n  };\r\n\r\n  const redirectToList = () => setRedirectTo(routes.functionalityDetails)\r\n  \r\n  if(redirectTo !== \"\") \r\n  return <Redirect to={redirectTo} push={true} />\r\n\r\n  return (\r\n    <Navigator title=\"New Digital Twin Functionality\">\r\n     <> \r\n        {error !== ''\r\n                ? <ConfirmAction title='Fetching Functionalities' currentState={errorFetchingFunctionalityState} states={{error: errorFetchingFunctionalityState}} onCancel={onCancel}/>\r\n                : null \r\n        }\r\n         <LazyComponent loaded={!fetching}>\r\n             <>\r\n                {confirmEditing\r\n                     ? <ConfirmAction {...confirmActionProps} /> \r\n                     : editingFunc\r\n                         ?  <EditFunctionalityDialog\r\n                             onGood={onGoodEditing}\r\n                             func={editingFunc}\r\n                             onError={cancelEditing}\r\n                             onCancel={cancelEditing} />\r\n                         : null\r\n                 }\r\n                {confirmAddFunc \r\n                     ? <ConfirmAction {...confirmActionProps} /> \r\n                     : addDetailsFunc\r\n                         ?  <AddFunctionalityDetails\r\n                             onGood={onGoodEditing}\r\n                             func={addDetailsFunc}\r\n                             onError={cancelAddDetails}\r\n                             onCancel={cancelAddDetails} />\r\n                         : null\r\n                 }\r\n                 <Grid container direction=\"column\" spacing={2}>\r\n                      <Grid item>\r\n                        <JPTable\r\n                            sortedkey=\"funcName\"\r\n                            data={getDataFunctionality()} \r\n                            updateData={updateFunctionalities} \r\n                            indexes={indexes} \r\n                            tName='Functionality'\r\n                            extra={{\r\n                                delete: {\r\n                                    action: deleteFunctionalityAction,\r\n                                    labelKey: 'funcName',\r\n                                    onSuccessDelete: () => {}\r\n                                },\r\n                                edit: {\r\n                                    action: showEditing\r\n                                },\r\n                                details: {\r\n                                    action: redirectToList\r\n                                },\r\n                                add: {\r\n                                    action: showAddDetails\r\n                                }\r\n                              }} \r\n                        />\r\n                      </Grid>\r\n                    <Grid item xs>\r\n                        New Functionality\r\n                    </Grid>\r\n                     <Grid item> \r\n                        <Grid container item xs>\r\n                            <Grid className={classes.box} spacing={1} item container direction=\"row\">\r\n                            <Grid item xs={4}>\r\n                                <TextField\r\n                                    helperText={!validNewFunc ? NEW_FUNCTIONALITY_RE.toString() : ''}\r\n                                    error={!validNewFunc}\r\n                                    label=\"Insert new functionality name\" \r\n                                    required\r\n                                    onChange={(event) => {\r\n                                        setNewFunc(event.target.value)\r\n                                        if(!validNewFunc)\r\n                                            setValidNewFunc(isFunctionalityValid(event.target.value.trim()))\r\n                                    }}\r\n                                    fullWidth\r\n                                    value={newFunc}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={4}>\r\n                                <InputLabel id={`digital-twin-label-${newFunc}`}>Digital Twin</InputLabel>\r\n                                <Select labelId={`digital-twin-label-${newFunc}`} value={digitalTwinChoice} onChange={handleDigitalTwinChoice}>\r\n                                {(digitalTwins || []).map((digitalTwin: any) => {return <MenuItem key={digitalTwin.dtId} value={digitalTwin.dtName}>{digitalTwin.dtName}</MenuItem>})}\r\n                                </Select>\r\n                            </Grid>\r\n                            <Grid container justify=\"flex-end\" spacing={1}>\r\n                             <Grid item>\r\n                                 <Button\r\n                                    color=\"primary\"\r\n                                    variant=\"contained\"\r\n                                    onClick={validateAndCreate}\r\n                                 >\r\n                                    Add Functionality\r\n                                 </Button>\r\n                             </Grid>\r\n                         </Grid>\r\n                        </Grid>\r\n                        </Grid>\r\n                     </Grid>\r\n                 </Grid>\r\n             </>\r\n         </LazyComponent>\r\n     </>\r\n </Navigator>\r\n )\r\n}\r\n","/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/components/DigitalTwin/FunctionalityDetails.tsx",["433","434","435"],"import { Button, Grid } from '@material-ui/core'\r\nimport { Clear } from '@material-ui/icons'\r\nimport React, { useState } from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { routes } from '../../App'\r\nimport { Navigator } from '../templates/Navigator/Navigator'\r\nimport { FunctionalityForm } from './FunctionalityForm'\r\n\r\n//Esta página pretende dispor informação mais detalhada da funcionalidade correspondente disponível na página \"DigitalTwinMonitoring\". Usa o FunctionalyForm\r\n//como base da página.\r\n\r\nexport const FunctionalityDetails = () => {\r\n\r\n    //Variáveis e funções que permitem o redireccionamento para a página DigitalTwinMonitoring\r\n    const [redirectTo, setRedirectTo] : [string, Function] = useState(\"\")\r\n\r\n    const redirectToList = () => setRedirectTo(routes.digitalTwinMonitoring)\r\n  \r\n    if(redirectTo !== \"\") \r\n    return <Redirect to={redirectTo} push={true} />\r\n\r\n    return(\r\n    <Navigator title=\"Digital Twin monitoring\">\r\n       <>\r\n        <FunctionalityForm\r\n            cancel={{action: redirectToList, label: 'Cancel'}}\r\n        />\r\n       </>\r\n    </Navigator>\r\n    )\r\n}","/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/components/FunctionBlocks/List/List.tsx",[],"/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/components/FunctionBlocks/FunctionBlock/NewFunctionBlock.tsx",[],"/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/components/SmartComponents/List/List.tsx",[],"/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/components/templates/Store/Store.tsx",[],"/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/components/FunctionBlocks/FunctionBlock/EditFunctionBlock.tsx",[],"/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/components/SmartComponents/SmartComponent/SmartComponent.tsx",[],"/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/components/FunctionBlockCategories/List/List.tsx",["436","437"],"import React, { useState } from 'react'\nimport { Navigator } from '../../templates/Navigator/Navigator'\nimport { ConfirmAction, ConfirmActionState, ConfirmActionStateLabel, ConfirmActionProps } from '../../templates/ConfirmAction/ConfirmAction'\nimport { LazyComponent } from '../../templates/LazyComponent/LazyComponent'\nimport { JPTable } from '../../templates/Table/JPTable'\nimport { FBCategory, FunctionBlock } from '../../../model'\nimport { useMountEffect } from '../../../utils/main'\nimport { getOrDownloadFunctionBlockCategories } from '../../../utils/functionBlock'\nimport { useStore } from '../../templates/Store/Store'\nimport { FunctionBlockCategoriesActions } from '../../../redux/actions'\nimport { RequestResponseState } from '../../../services/api/api'\nimport { TextField, Grid, Button, Box, Dialog, DialogTitle, CircularProgress } from '@material-ui/core'\nimport { createFunctionBlockCategory, updateFunctionBlockCategory } from '../../../services/api/function-block'\nimport { deleteFunctionBlockCategory} from '../../../services/api/function-block'\nimport { useDialogStyles } from './style'\nimport { CheckCircle, Error } from '@material-ui/icons'\nimport { functionBlockCategoryReducer } from '../../../redux/reducers'\n\nconst NEW_CATEGORY_RE = /[a-zA-Z0-9]{3,}/\n\nlet categoryId = -1\n\nconst EditFBCategoryDialog = (props: {category: FBCategory, onGood: (newCategory: FBCategory) => void, onError: () => void, onCancel: () => void}) => {\n\n    const [newCategoryName, setNewCategoryName] : [string,Function] = useState(props.category.fbcName)\n\n    const classes = useDialogStyles()\n\n    const [sending, setSending] : [boolean, Function] = useState(false)\n\n    const [result, setResult] : [{done: boolean, good?: boolean, message?: string},Function] = useState({done:false})\n\n    const action = () => {\n\n        if(props.category.fbcId) {\n\n            if(!result.done) {\n\n                setSending(true)\n    \n                updateFunctionBlockCategory(props.category.fbcId, newCategoryName)\n\n                    .then((response: RequestResponseState) => {\n                        setResult({done:true, good: true, message: response.msg})\n                    })\n\n                    .catch((error: RequestResponseState) => {\n                        setResult({done: true, good: false, message: error.msg})\n                    })\n\n                    .finally(() => setSending(false))\n\n            }\n\n            else {\n\n                if(result.good)\n                    props.onGood({...props.category, fbcName: newCategoryName})\n                \n                else\n                    props.onError()\n\n            }\n\n        }\n\n    }\n\n    return (\n        <Dialog open={true}>\n            <DialogTitle>Edit Category</DialogTitle>\n            <Box className={classes.box}>\n                {\n                    !result.done \n                        ?\n                            <TextField \n                                disabled={sending}\n                                value={newCategoryName}\n                                onChange={(event) => setNewCategoryName(event.target.value)}\n                            />\n                        :    <Grid container justify=\"center\">\n                                <Grid item>\n                                    {\n                                        result.good \n                                            ?   <CheckCircle color=\"primary\" />\n                                            :   <Error color=\"error\" />\n                                    }\n                                </Grid>\n                                <Grid item>\n                                    <Box className={result.good ? classes.good : classes.error} textAlign=\"center\">{result.message}</Box>\n                                </Grid>\n                            </Grid> \n                }\n            </Box>\n            <Grid className={classes.buttons} container direction=\"row\" justify=\"space-between\">\n                <Grid item>\n                    {sending \n                        ? <CircularProgress color=\"primary\" />\n                        : <Button onClick={action}>Ok</Button>\n                    }\n                </Grid>\n                <Grid item>\n                    <Button disabled={sending} onClick={props.onCancel}>Cancel</Button>\n                </Grid>\n            </Grid>\n        </Dialog>\n    )\n\n}\n\nexport const FunctionBlockCategoryList = () => {\n\n    const [fetching,setFetching] = useState(true)\n    const [error,setError] = useState('')\n    const [newCategory,setNewCategory] = useState('')\n\n    const [confirmAddCategory,setConfirmAddCategory] : [boolean, Function] = useState(false)\n\n    const [validNewCategory, setValidNewCategory] : [boolean,Function] = useState(true)\n\n    const errorFetchngCategoriesState : ConfirmActionState = {\n        label: error,\n        state: ConfirmActionStateLabel.error,\n        positiveLabel: 'Ok'\n    }\n\n    const onCancel = () => setError('')\n\n    const {data: functionBlockCategories, dispatchAction:dispatchFunctionBlockCategoriesActions} = useStore('functionBlockCategories')\n\n    const updateFunctionBlockCategories = (categories: FBCategory[]) => dispatchFunctionBlockCategoriesActions(FunctionBlockCategoriesActions.updateFunctionBlockCategories(categories))\n    const addFunctionBlockCategory = () => dispatchFunctionBlockCategoriesActions(FunctionBlockCategoriesActions.addFunctionBlockCategory({fbcId: categoryId, fbcUserId:1, fbcName: newCategory}))\n\n    const [editingCategory, setEditingCategory] : [FBCategory | null,Function] = useState(null)\n\n\n    const indexes = [\n        {label: 'Name', key: 'fbcName'},\n        {label: 'Function Block List', key: 'fbList'}\n    ]\n\n    useMountEffect(() => {\n\n        setTimeout(() => {\n    \n          setFetching(true)\n          getOrDownloadFunctionBlockCategories(functionBlockCategories)\n              .then((result: FBCategory[]) => updateFunctionBlockCategories(result))\n              .catch((e:RequestResponseState) => setError(e.msg))\n              .finally(() => setFetching(false))\n    \n            \n        }, 0)\n    \n    })\n\n    const isCategoryValid = (category:string) => NEW_CATEGORY_RE.test(category)\n\n    const validateAndCreate = () => {\n\n        const validCategory = isCategoryValid(newCategory)\n\n        if(!validCategory)\n            setValidNewCategory(false)\n        else\n            setConfirmAddCategory(true)\n    \n    }\n\n    const addNewCategoryAction = () : Promise<string> => {\n\n        return new Promise<string>((res:Function, rej:Function)  => { \n            \n            createFunctionBlockCategory(newCategory.trim())\n\n                .then((result: RequestResponseState) => {\n                    categoryId = result.extra.lastInsertedId\n                    res('Category created')\n                })\n\n                .catch((e:RequestResponseState) => rej(e.msg))\n\n        })\n\n    }\n\n    const confirmCategoryCreationActionStates = {\n        start: {\n            label: `Confirm creation of new category: ${newCategory} ?`,\n            positiveLabel: 'Ok',\n            negativeLabel: 'Cancel',\n            state: ConfirmActionStateLabel.start\n        },\n        executing: {\n          label: '',\n          state: ConfirmActionStateLabel.executing,\n        },\n        success: {\n          label: 'Category Created',\n          state: ConfirmActionStateLabel.success,\n          positiveLabel: 'Ok'\n        },\n        error: {\n          label: 'Error Creating Category',\n          state: ConfirmActionStateLabel.error,\n          positiveLabel: 'Ok'\n        },\n      }\n    \n    const confirmActionProps : ConfirmActionProps = {\n\n        title: 'Add Category',\n        states: confirmCategoryCreationActionStates,\n        currentState: confirmCategoryCreationActionStates.start,\n        onCancel: () => setConfirmAddCategory(false),\n        onError: () => setConfirmAddCategory(false),\n        onSuccess: () => {\n            addFunctionBlockCategory()\n            setNewCategory('')\n        },\n        action: addNewCategoryAction,\n    }\n\n    const getData = () => functionBlockCategories.map((category: FBCategory) => {\n\n        return {\n            ...category,\n            fbList: {\n                key: category.functionBlocks?.length ?? 0,\n                data:  <Grid container direction=\"row\" spacing={2} wrap=\"wrap\"> {category.functionBlocks?.map((fb: string, index:number) => (\n                    <Grid key={index} item><Box fontStyle=\"italic\"> {fb} ; </Box></Grid>\n                ))} </Grid>\n            },\n            deleteDisabled: !!category.functionBlocks?.length ?? false\n        }\n\n    })\n\n    const deleteFunctionBlockCategoryAction = (category: FBCategory) : Promise<any> => {\n\n        return new Promise(async(res:Function,rej:Function) => {\n\n            if(!category.fbcId) {\n                rej('Error')\n                return\n            }\n\n            try {\n                const response : RequestResponseState = await deleteFunctionBlockCategory(category.fbcId)\n                res(response)\n              }\n    \n            catch(err) {\n                rej(err)\n            }\n        })\n\n    }\n\n    const cancelEditing = () => setEditingCategory(null)\n    const showEditing = (cat: FBCategory) => setEditingCategory(cat)\n\n    const onGoodEditing = (editingCat: FBCategory) => {\n\n        const newCats = functionBlockCategories.map((cat: FBCategory) => {\n\n            if(cat.fbcId === editingCat.fbcId)\n                return {...cat, fbcName: editingCat.fbcName}\n            return cat\n\n        })\n        \n        cancelEditing()\n        dispatchFunctionBlockCategoriesActions(FunctionBlockCategoriesActions.updateFunctionBlockCategories(newCats))\n\n    }\n\n    return (\n        <Navigator title=\"Function Block Categories\">\n        <> \n            {error !== ''\n                ? <ConfirmAction title='Fetching Function Blocks' currentState={errorFetchngCategoriesState} states={{error: errorFetchngCategoriesState}} onCancel={onCancel}/>\n                : null \n            }\n            <LazyComponent loaded={!fetching}>\n                <>\n                    {confirmAddCategory \n                        ? <ConfirmAction {...confirmActionProps} /> \n                        : editingCategory \n                            ?  <EditFBCategoryDialog \n                                onGood={onGoodEditing}\n                                category={editingCategory}\n                                onError={cancelEditing}\n                                onCancel={cancelEditing} />\n                            : null\n                    }\n                    <Grid container direction=\"column\" spacing={2}>\n                        <Grid item>\n                            <JPTable\n                                sortedkey=\"fbcName\"\n                                data={getData()} \n                                updateData={updateFunctionBlockCategories} \n                                indexes={indexes}\n                                tName='Function Block Category'\n                                extra={{\n                                    delete: {\n                                        action: deleteFunctionBlockCategoryAction,\n                                        labelKey: 'fbcName',\n                                        onSuccessDelete: () => {}\n                                    },\n                                    edit: {\n                                        action: showEditing\n                                    }\n                                }} \n                            />\n                        </Grid>\n                        <Grid item>\n                            <Grid container justify=\"flex-end\" spacing={1}>\n                                <Grid item xs={4}>\n                                    <TextField\n                                        helperText={!validNewCategory ? NEW_CATEGORY_RE.toString() : ''}\n                                        error={!validNewCategory}\n                                        required\n                                        onChange={(event) => {\n                                            setNewCategory(event.target.value)\n                                            if(!validNewCategory)\n                                                setValidNewCategory(isCategoryValid(event.target.value.trim()))\n                                        }}\n                                        fullWidth\n                                        value={newCategory}\n                                    />\n                                </Grid>\n                                <Grid item>\n                                    <Button\n                                        color=\"primary\"\n                                        variant=\"contained\"\n                                        onClick={validateAndCreate}\n                                    >\n                                        Add Category\n                                    </Button>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                </>\n            </LazyComponent>\n        </>\n        </Navigator>\n    )\n\n}","/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/utils/digitalTwins.ts",[],"/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/components/SmartComponents/style.ts",[],"/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/components/FunctionBlockCategories/List/style.ts",[],"/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/utils/functionBlock.ts",["438"],"import { xml2js, Element } from \"xml-js\"\nimport { FunctionBlock, InOutType, Variable, Event, EventVariable, FBCategory, Functionality } from \"../model\"\nimport { readLocalFile } from \"./main\"\nimport { getFunctionBlocks, getFunctionBlockCategories } from \"../services/api/function-block\"\nimport { RequestResponseState } from \"../services/api/api\"\n\nexport const getFBfromFbtFile = (file: File) : Promise<FunctionBlock> => {\n\n    return new Promise(async (res:Function, rej:Function) => {\n\n        const result : FunctionBlock = {\n            fbDescription:'',\n            fbExternalDependencies: [],\n            fbFbcId: 1,\n            fbGeneralCategory: '',\n            fbInputEvents: [],\n            fbOutputEvents: [],\n            fbInputVariables: [],\n            fbOutputVariables: [],\n            fbType: '',\n            fbUserId: 1\n        }\n\n        const rejectNotWellFormed = (elementName?: string) =>  {\n            rej('FBT not well formed' + (elementName ? `: Element ${elementName} not well formed` : ''))\n            return false\n        }\n\n        const getFBTypeElement = (fbJs: any) => {\n\n            let fbElement = null\n            for(let i = 0; i < fbJs.elements.length; i++) {\n                const element = fbJs.elements[i]\n                if(element.type === 'element' && element.name === 'FBType') {\n                    fbElement = element\n                    break\n                }\n            }\n            return fbElement\n\n        }\n\n        const verifyMandatoryElements = (fbJs: any) : boolean =>  {\n\n            if(!fbJs.elements || fbJs.elements.length < 2) return rejectNotWellFormed()\n\n            const fbElement = getFBTypeElement(fbJs)\n\n            if(!fbElement) return rejectNotWellFormed()\n\n            if(!(verifyElement(fbElement,'FBType',['Name'],1))) return rejectNotWellFormed('FBType')\n            if(!verifyElement(fbElement.elements[0],'InterfaceList',[],4)) return rejectNotWellFormed('InterfaceList')\n            if(!verifyElement(fbElement.elements[0].elements[0],'EventInputs')) return rejectNotWellFormed('EventInputs')\n            if(!verifyElement(fbElement.elements[0].elements[1],'EventOutputs')) return rejectNotWellFormed('EventOutputs')\n            if(!verifyElement(fbElement.elements[0].elements[2],'InputVars')) return rejectNotWellFormed('InputVars')\n            if(!verifyElement(fbElement.elements[0].elements[3],'OutputVars')) return rejectNotWellFormed('OutputVars')\n\n            return true\n\n        }\n\n        const getVariables = (variableList: any, inOutYpe:InOutType) : {variables:Variable[], varNames: string[]} | undefined => {\n\n            const result : {variables:Variable[], varNames: string[]} = {variables:[], varNames:[]}\n\n            if(!variableList.elements) return result\n\n            for(let i = 0; i < variableList.elements.length; i++) {\n\n                const variable = variableList.elements[i]\n                if(!verifyElement(variable,'VarDeclaration',['Name','Type'])) {\n                    rejectNotWellFormed('VarDeclaration')\n                    return\n                }\n                result.variables.push({\n                    variableDataType: variable.attributes.Type, \n                    variableInoutType: inOutYpe, \n                    variableName: variable.attributes.Name,\n                    variableOpcua: variable.attributes.OpcUa\n                })\n\n                result.varNames.push(variable.attributes.Name)\n                \n            }\n\n            return result\n\n        } \n\n        const getEvents = (eventList: any, inOutYpe:InOutType, variableNames: string[]) : Event[] | undefined => {\n\n            const result : Event[] = []\n            if(!eventList.elements) return result\n\n            for(let i = 0; i < eventList.elements.length; i++) {\n\n                const event = eventList.elements[i]\n                if(!verifyElement(event,'Event',['Name','Type'])) {\n                    rejectNotWellFormed('Event')\n                    return\n                }\n\n                const eventVars : EventVariable[] = []\n\n                if(event.elements) {\n                    \n                    for(let j = 0; j < event.elements.length; j++) {\n\n                        const eventVariable = event.elements[j]\n                        if(!verifyElement(eventVariable,'With',['Var']) || !variableNames.includes(eventVariable.attributes.Var)) {\n                            rejectNotWellFormed('With')\n                            return\n                        }\n                        eventVars.push({\n                            evEventName: event.attributes.Name,\n                            evVariableName: eventVariable.attributes.Var\n                        })\n\n                    }\n                }\n\n                result.push({\n                    eventName: event.attributes.Name, \n                    eventType: event.attributes.Type, \n                    eventInoutType: inOutYpe,\n                    eventVariables: eventVars,\n                    eventOpcua: event.attributes.OpcUa\n                })\n                \n            }\n\n            return result\n\n        } \n\n        try {\n\n            const fbtString = await readLocalFile(file)\n            const fbJs = xml2js(fbtString)\n\n            if(!verifyMandatoryElements(fbJs)) return\n            \n            const fbTypeElement = getFBTypeElement(fbJs)\n\n            result.fbType = fbTypeElement.attributes.Name\n            result.fbGeneralCategory = fbTypeElement.attributes.OpcUa\n\n            const fbInterfaceListElement = fbTypeElement.elements[0]\n            const fbInputVarsElement = fbInterfaceListElement.elements[2]\n            const fbOutputVarsElement = fbInterfaceListElement.elements[3]\n            const fbEventInputsElement = fbInterfaceListElement.elements[0]\n            const fbEventOutputsElement = fbInterfaceListElement.elements[1]\n\n            const fbInputVariables = getVariables(fbInputVarsElement, InOutType.in)\n            const fbOutputVariables = getVariables(fbOutputVarsElement, InOutType.out)\n\n            if(!fbInputVariables || !fbOutputVariables) return \n            \n            const fbInputEvents = getEvents(fbEventInputsElement, InOutType.in,fbInputVariables.varNames)\n            const fbOutputEvents = getEvents(fbEventOutputsElement, InOutType.out,fbOutputVariables.varNames)\n\n            if(!fbInputEvents || !fbOutputEvents) return \n            \n            result.fbInputVariables = fbInputVariables.variables\n            result.fbOutputVariables = fbOutputVariables.variables\n            result.fbInputEvents = fbInputEvents\n            result.fbOutputEvents = fbOutputEvents\n\n            res(result)\n\n        }\n\n        catch(err) {\n            console.error(err)\n            rej('Error reading fbt file')\n        }\n\n    })\n\n}\n\n\n\nconst verifyElement = (element: Element,name: string, attributes?: string[], elementsLength?: number, type: 'element' | 'doctype' = 'element') : boolean => {\n    \n    if(!(element.type === type)) return false\n    if(!(element.name === name)) return false\n    \n    if(!!elementsLength) {\n\n        if(!element.elements) return false\n        if(element.elements.length !== elementsLength) return false\n    \n    }\n\n    if(!!attributes && !!attributes.length) {\n        \n        if(!element.attributes) return false\n        \n        for(let i = 0; i < attributes.length; i++) {\n            if(!(attributes[i] in element.attributes)) {\n                return false\n            }\n        }\n        \n    }\n\n    return true\n        \n}\n\nexport const getOrDownloadFunctionBlocks = (fbs: FunctionBlock[]) :  Promise<FunctionBlock[]> => {\n\n    return new Promise((res: Function, rej:Function) => {\n\n        if(fbs.length) \n            res(fbs)\n        else \n            getFunctionBlocks()\n                .then((result:FunctionBlock[]) => res(result))\n                .catch((error: RequestResponseState) => rej(error))\n    })\n\n}\n\nexport const getOrDownloadFunctionBlockCategories = (fbCategories: FBCategory[]) :  Promise<FBCategory[]> => {\n\n    return new Promise((res: Function, rej:Function) => {\n\n        if(fbCategories.length) \n            res(fbCategories)\n        else \n            getFunctionBlockCategories()\n                .then((result:FBCategory[]) => res(result))\n                .catch((error: RequestResponseState) => rej(error))\n    })\n\n}\n\n","/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/services/api/function-block.ts",[],"/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/services/api/digital-twin.ts",[],"/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/components/templates/Navigator/Navigator.tsx",[],"/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/components/templates/LazyComponent/LazyComponent.tsx",[],"/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/components/templates/ConfirmAction/ConfirmAction.tsx",[],"/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/components/FunctionBlocks/FunctionBlock/FunctionBlockForm.tsx",["439","440"],"import React, { useState, useCallback, useEffect } from 'react'\nimport { FormControl, InputLabel, TextField, Grid, Select, MenuItem, Box, Button,Typography, Chip } from '@material-ui/core'\nimport { FBGeneralCategory, Variable, InOutType, Event, EventVariable, FunctionBlock, FBCategory, ExternalDependency } from '../../../model'\nimport { useFunctionBlockStyles } from './style'\nimport { VariableList } from './Variable'\nimport { setSimpleField, useMountEffect } from '../../../utils/main'\nimport { EventList } from './Event'\nimport { Done, Clear } from '@material-ui/icons'\nimport { ReactComponent as UploadIcon } from '../../../icons/Upload.svg'\nimport { getFBfromFbtFile, getOrDownloadFunctionBlockCategories } from '../../../utils/functionBlock'\nimport { ConfirmActionProps, ConfirmActionStateLabel, ConfirmActionAction, ConfirmAction } from '../../templates/ConfirmAction/ConfirmAction'\nimport { useStore } from '../../templates/Store/Store'\nimport { FunctionBlockCategoriesActions } from '../../../redux/actions'\n\nconst DEFAULT_VALUES = {\n    eventType: 'Event'\n}\n\nconst updateEventVariablesOnRemoveVariable = (events:Event[],variableToRemove:Variable, ) : Event[] => {\n\n    const newEvents : Event[] = [...events]\n    newEvents.forEach((event: Event) => {\n\n        event.eventVariables = event.eventVariables.filter((ev: EventVariable) => ev.evVariableName !== variableToRemove.variableName)\n\n    })\n\n    return newEvents\n\n}\n\nconst updateEventVariablesOnUpdateVariable = (events:Event[], oldVariable:Variable,variableEdited:Variable) : Event[] => {\n\n    const newEvents : Event[] = [...events]\n    newEvents.forEach((event: Event) => {\n\n      event.eventVariables = event.eventVariables.map((ev: EventVariable) => {\n        if(ev.evVariableName === oldVariable.variableName)\n          return {\n            evVariableName: variableEdited.variableName,\n            evEventName: event.eventName\n          }\n        else\n          return ev\n      }) \n\n    })\n\n    return newEvents\n\n}\n\ninterface FunctionBlockFormProps {\n\n    fbType: {\n        fbType: string\n        setFbType: Function\n    },\n    fbGeneralCategory: {\n        fbGeneralCategory: '' | FBGeneralCategory\n        setfbGeneralCategory: Function\n    },\n    fbCategory: {\n      fbCategory: FBCategory\n      setFbCategory: Function\n    }\n    fbDescription: {\n        fbDescription: string\n        setFbDescription: Function\n    },\n    fbInputVariables: {\n        fbInputVariables: Variable[]\n        setFbInputVariables: Function\n    }\n    fbOutputVariables: {\n        fbOutputVariables: Variable[]\n        setFbOutputVariables: Function\n    },\n    fbInputEvents: {\n        fbInputEvents: Event[]\n        setFbInputEvents: Function\n    }\n    fbOutputEvents: {\n        fbOutputEvents: Event[]\n        setFbOutputEvents: Function\n    },\n    fbExternalDependencies: {\n      fbExternalDependencies: ExternalDependency[]\n      setFbExternalDependencies: Function\n    }\n    fbImplFile: {\n        fbImplFile: File\n        setFbImplFile: Function\n    },\n    cancel: {\n        label: string\n        action: () => void\n    },\n    confirmDialog: {\n        buttonTitle: string\n        title: string\n        initialState: ConfirmActionStateLabel\n        action: ConfirmActionAction\n        onSuccess : () => void\n        start? : {\n            label: string\n            positiveLabel: string\n            negativeLabel: string\n        }\n        success: {\n            label:string\n            positiveLabel: string\n        }\n        error: {\n            label: string\n            positiveLabel: string\n        }\n    },\n    byPassFields?: {\n      fbImplFile: boolean\n    }\n}\n\nexport const FunctionBlockForm = (props: FunctionBlockFormProps) => {\n\n    /**styles */\n    const classes = useFunctionBlockStyles()\n\n    /**list of categories */\n    const {data: functionBlockCategories, dispatchAction:dispatchFunctionBlockCategoriesActions} = useStore('functionBlockCategories')\n\n    const [validCategory,setValidCategory] : [boolean, Function] = useState(true)\n\n    /**Fb type */\n    const {fbType, setFbType} = props.fbType\n    const [validType, setValidType] = useState(true)\n    const onChangeFBType = useCallback((event:any) => {\n\n        setFbType(event.target.value.trim())\n        setValidType(true)\n    \n      },[setFbType])\n\n    /**FB General Category */\n    const {fbGeneralCategory, setfbGeneralCategory} = props.fbGeneralCategory\n    const [validGeneralCategory, setValidGeneralCategory] = useState(true)\n    const [generalCategoryNames,setGeneralCategoryNames] : [string[],Function] = useState([...Object.values(FBGeneralCategory), ''])\n    \n    /**Db Description */\n    const {fbCategory,setFbCategory} = props.fbCategory\n\n    /**Db Description */\n    const {fbDescription,setFbDescription} = props.fbDescription\n    const [validDescription, setValidDescription] = useState(true)\n\n    /* Variables and Events */\n    const {fbInputVariables, setFbInputVariables} = props.fbInputVariables\n    const {fbOutputVariables, setFbOutputVariables} = props.fbOutputVariables\n    \n    const getEmptyEvent = (type:InOutType) : Event => ({\n        eventId: -1,\n        eventOpcua: \"\",\n        eventInoutType: type,\n        eventName: '',\n        eventType:DEFAULT_VALUES.eventType,\n        eventVariables: []\n    })\n\n    const [newInputEvent,setNewInputEvent] : [Event,Function] = useState(getEmptyEvent(InOutType.in))\n    const [newOutputEvent,setNewOutputEvent] : [Event,Function] = useState(getEmptyEvent(InOutType.out))\n\n    const {fbInputEvents, setFbInputEvents} = props.fbInputEvents\n    const {fbOutputEvents, setFbOutputEvents} = props.fbOutputEvents\n\n    /** Variable Update and Edition */\n    \n    const onInputVariableRemoval = useCallback((variableToRemove: Variable) => {\n\n        setFbInputEvents((prevEvents: Event[]) => updateEventVariablesOnRemoveVariable(prevEvents,variableToRemove))\n        setNewInputEvent((prevEvent:Event) => updateEventVariablesOnRemoveVariable([prevEvent],variableToRemove)[0])\n\n    }, [setFbInputEvents])\n\n    const onOutputVariableRemoval = useCallback((variableToRemove: Variable) => {\n\n        setFbOutputEvents((prevEvents: Event[]) => updateEventVariablesOnRemoveVariable(prevEvents,variableToRemove))\n        setNewOutputEvent((prevEvent: Event) => updateEventVariablesOnRemoveVariable([prevEvent],variableToRemove)[0])\n    \n    }, [setFbOutputEvents])\n\n\n    const onInputVariableEdition = useCallback((oldVariable:Variable, newVariable: Variable) => {\n\n        setFbInputEvents((prevEvents: Event[]) => updateEventVariablesOnUpdateVariable(prevEvents,oldVariable,newVariable))\n        setNewInputEvent((prevNewEvent: Event) => updateEventVariablesOnUpdateVariable([prevNewEvent],oldVariable,newVariable)[0])\n    \n    },[setFbInputEvents])\n    \n      const onOutputVariableEdition = useCallback((oldVariable:Variable, newVariable: Variable) => {\n    \n        setFbOutputEvents((prevEvents: Event[]) => updateEventVariablesOnUpdateVariable(prevEvents,oldVariable,newVariable))\n        setNewOutputEvent((pevEvent: Event) => updateEventVariablesOnUpdateVariable([pevEvent],oldVariable,newVariable)[0])\n    \n    },[setFbOutputEvents])\n\n\n    /* Event edition */\n\n    const addNewInputEvent = useCallback(() => {\n\n        setFbInputEvents((prevEvents: Event[]) => [...prevEvents, newInputEvent])\n        setNewInputEvent(getEmptyEvent(InOutType.in))\n    \n    },[newInputEvent, setFbInputEvents])\n    \n    const addNewOutputEvent = useCallback(() => {\n\n        setFbOutputEvents((prevEvents: Event[]) => [...prevEvents, newOutputEvent])\n        setNewOutputEvent(getEmptyEvent(InOutType.out))\n\n    },[newOutputEvent, setFbOutputEvents])\n    \n    const removeInputEvent = useCallback((eventToRemove: Event) => setFbInputEvents((prevEvents:Event[]) => prevEvents.filter((event:Event) => event !== eventToRemove)), [setFbInputEvents]) \n    const removeOutputEvent = useCallback((eventToRemove: Event) => setFbOutputEvents((prevEvents:Event[]) => prevEvents.filter((event:Event) => event !== eventToRemove)), [setFbOutputEvents]) \n    \n    const setEvent = (type:InOutType) => (event:Event,index:number) => {\n    \n        const setFunction = type === InOutType.in ? setFbInputEvents : setFbOutputEvents\n    \n        setFunction((prevEvents:Event[]) => {\n    \n          const newEvents : Event[] = [...prevEvents]\n          newEvents[index] = event\n          return newEvents\n        \n        })\n    \n    }\n\n    const setInputEvent = useCallback(setEvent(InOutType.in),[])\n    const setOutputEvent = useCallback(setEvent(InOutType.out),[])\n\n    /* Dependencies */\n\n    const {fbExternalDependencies, setFbExternalDependencies} = props.fbExternalDependencies\n    const [currentDependency, setCurrentDependency] : [string,Function] = useState('')\n\n    const addDependency = useCallback(() => {\n\n      setFbExternalDependencies((prevDependencies: ExternalDependency[]) => {\n\n        const name = currentDependency.trim()\n        setCurrentDependency('')\n        if(name === '' || prevDependencies.filter((ed: ExternalDependency) => ed.edName === name).length)\n          return prevDependencies\n        return [...prevDependencies, {edName: currentDependency}]\n      })\n\n    }, [setFbExternalDependencies, currentDependency])\n\n    const deleteDependency = useCallback((ed: ExternalDependency) => () => {\n\n      setFbExternalDependencies((prevDependencies: ExternalDependency[]) => prevDependencies.filter((cEd:ExternalDependency) => cEd.edName !== ed.edName))\n\n    }, [setFbExternalDependencies])\n\n    const onChangeCurrentDependency = useCallback((event: any) => setCurrentDependency(event.target.value), [])\n\n    /* Implementation File */\n\n    const {fbImplFile, setFbImplFile} = props.fbImplFile\n    const [validFile, setValidFile] = useState(true)\n\n    const changeImplFile = (event:any) => {\n\n        if(event.target.files.length > 0) {\n          setFbImplFile(event.target.files[0])\n          setValidFile(true)\n        }\n    \n    }\n\n    /* FBT file reading */\n\n    const [errorReadingFBT,setErrorReadingFBT] : [{msg:string, err: boolean, file:boolean},Function] = useState({msg:'', err: false, file:false})\n    \n    const loadFiles = useCallback((fileList: FileList) => {\n\n        if(fileList.length > 0) {\n    \n          let fbt: File | undefined = undefined\n          let py : File | undefined = undefined\n    \n          for(let i = 0; i < fileList.length; i++) {\n    \n            let file = fileList[i]\n    \n            if(/.*.(fbt|xml)$/.test(file.name)) \n              fbt = file\n            else if (/.*.py$/.test(file.name))\n              py = file\n             \n            if(fbt && py)\n              break\n          }\n\n          if(!fbt && !py) {\n            setErrorReadingFBT({file:true, err:true, msg:'Only .fbt and .xml files for fb definition or .py files for fb implementation'})\n            return\n          }\n    \n          else {\n    \n            if(fbt) {\n    \n              getFBfromFbtFile(fbt)\n                .then((result: FunctionBlock) => {\n        \n                  setFbType(result.fbType)\n                  setFbDescription(result.fbType)\n                  setfbGeneralCategory(result.fbGeneralCategory)\n                  setFbInputVariables(result.fbInputVariables)\n                  setFbOutputVariables(result.fbOutputVariables)\n                  setFbInputEvents(result.fbInputEvents)\n                  setFbOutputEvents(result.fbOutputEvents)\n        \n                  setValidType(true)\n                  setValidDescription(true)\n                  setValidGeneralCategory(!!result.fbGeneralCategory)\n                  setErrorReadingFBT({err:false,msg:'',file:true})\n        \n                })\n                .catch((error) => {\n                  console.error(error)\n                  setErrorReadingFBT({file:true,err: true, msg:error.toString()})\n        \n                })\n            }\n    \n            if(py) {\n              setFbImplFile(py)\n              setValidFile(true)\n    \n            }\n    \n          }\n        }\n    \n    }, [setFbDescription,setFbImplFile,setFbInputEvents,setFbInputVariables,setFbOutputEvents,setFbOutputVariables,setFbType,setfbGeneralCategory])\n\n    const onChangeFBTFile = useCallback((event:any) => loadFiles(event.target.files),[loadFiles])\n\n    /* Dropping Files */\n    const addPreventWindowToOpenFile = () => {\n        window.addEventListener('dragover', preventDefaultAction)\n        window.addEventListener('drop',preventDefaultAction)\n    }\n    \n    const removePreventWindowToOpenFile = () => {\n        window.removeEventListener('dragover', preventDefaultAction)\n        window.removeEventListener('drop',preventDefaultAction)\n    } \n     \n    const preventDefaultAction = (event:any) => event.preventDefault()\n    const changeGeneralCategory = useCallback((category: FBGeneralCategory | \"\") => {\n\n      const valid = category !== ''\n\n      if(valid)  \n        setGeneralCategoryNames(Object.values(FBGeneralCategory))\n      \n      setfbGeneralCategory(category)\n      setValidGeneralCategory(true)\n\n    },[setfbGeneralCategory])\n      \n    useMountEffect(() => {\n      \n      addPreventWindowToOpenFile()\n      getOrDownloadFunctionBlockCategories(functionBlockCategories)\n        .then((result: FBCategory[]) => {\n          dispatchFunctionBlockCategoriesActions(FunctionBlockCategoriesActions.updateFunctionBlockCategories(result))\n        })\n        .catch((err) => console.error(err))\n\n    },removePreventWindowToOpenFile)\n    useEffect(() => changeGeneralCategory(fbGeneralCategory),[changeGeneralCategory,fbGeneralCategory])\n\n    const onDropFiles = useCallback((event:any) => loadFiles(event.dataTransfer.files),[loadFiles])\n\n    /* Buttons */\n\n    const onCancel = props.cancel.action\n    const cancelLabel = props.cancel.label\n\n    const confirmLabel = props.confirmDialog.buttonTitle\n\n    /* Confirmation */\n\n    const [confirm, setConfirm] : [boolean, Function] = useState(false)\n\n    const validateFields = () : boolean => {\n\n        const cValidType = fbType.trim() !== ''\n        const cValidDescription = fbDescription.trim() !== ''\n        const cValidGeneralCategory = !!fbGeneralCategory\n        const cValidCategory = fbCategory.fbcId !== -1\n        const cValidFile = !!props.byPassFields?.fbImplFile || fbImplFile.name !== ''  \n            \n        if(!cValidType) setValidType(cValidType)\n        if(!cValidDescription) setValidDescription(cValidDescription)\n        if(!cValidGeneralCategory) setValidGeneralCategory(cValidGeneralCategory)\n        if(!cValidCategory) setValidCategory(cValidCategory)\n        if(!cValidFile) setValidFile(cValidFile)\n    \n        return cValidType && cValidGeneralCategory && cValidCategory && cValidDescription && cValidFile\n    \n    }\n\n    const confirmButtonAction = () => {\n\n        if(validateFields())\n          setConfirm(true)\n    }\n\n    const confirmActionStates = {\n        start: {\n            label: props.confirmDialog.start?.label,\n            positiveLabel: props.confirmDialog.start?.positiveLabel,\n            negativeLabel: props.confirmDialog.start?.negativeLabel,\n            state: ConfirmActionStateLabel.start\n        },\n        executing: {\n          label: '',\n          state: ConfirmActionStateLabel.executing,\n        },\n        success: {\n          label: props.confirmDialog.success.label,\n          state: ConfirmActionStateLabel.success,\n          positiveLabel: props.confirmDialog.success.positiveLabel\n        },\n        error: {\n          label: props.confirmDialog.error.label,\n          state: ConfirmActionStateLabel.error,\n          positiveLabel: props.confirmDialog.success.positiveLabel\n        },\n      }\n    \n    const confirmActionProps : ConfirmActionProps = {\n\n        title: props.confirmDialog.title,\n        states: confirmActionStates,\n        currentState: confirmActionStates.executing,\n        onCancel: () => setConfirm(false),\n        onError: () => setConfirm(false),\n        onSuccess: props.confirmDialog.onSuccess,\n        action:props.confirmDialog.action,\n      \n    }\n\n    return (\n        <> {confirm ? <ConfirmAction {...confirmActionProps} /> : null}\n          <Grid onDrop={onDropFiles} spacing={2} container direction=\"column\" component=\"form\">\n            <Grid item container alignItems=\"center\" justify={errorReadingFBT.file ? 'space-between' : 'flex-end'} direction=\"row\">\n              {errorReadingFBT.file ?\n              <Grid item>\n                {errorReadingFBT.err ? <Typography color=\"error\">{errorReadingFBT.msg}</Typography> : <Done fontSize=\"small\" />}\n              </Grid>\n              : null}\n              <Grid item>\n                <input onChange={onChangeFBTFile} value=\"\" accept=\".xml,.fbt\" type=\"file\" id=\"raised-button-file\" hidden />\n                  <label htmlFor=\"raised-button-file\">\n                    <Button variant=\"outlined\" component=\"span\" size=\"small\">\n                      Choose fbt file for form auto completion\n                    </Button>\n                  </label> \n              </Grid>\n            </Grid>\n            <Grid spacing={1} justify=\"space-between\" item xs container direction=\"row\">\n              <Grid item xs={6}>\n                <TextField\n                  onChange={onChangeFBType} \n                  value={fbType}\n                  helperText=\"\"\n                  error={!validType} \n                  fullWidth required \n                  label=\"Type\" \n                  id=\"fb-type\" \n                  type=\"text\" />\n              </Grid>\n              <Grid item xs>\n                <FormControl fullWidth required>\n                  <InputLabel error={!validCategory} id=\"category-label\">Category</InputLabel>\n                  <>\n                    <Select\n                      error={!validCategory}\n                      labelId=\"category-label\"\n                      value={fbCategory.fbcName}\n                      onChange={(event) => {\n                        setValidCategory(true)\n                        setFbCategory(functionBlockCategories.filter((cat:FBCategory) => event.target.value === cat.fbcName)[0])\n                      }} \n                    >\n                      {functionBlockCategories.map((cat:FBCategory, index:number) => <MenuItem key={index} value={cat.fbcName}>{cat.fbcName}</MenuItem>)}\n                    </Select>\n                   \n                  </>\n                </FormControl>\n              </Grid>\n              <Grid item xs>\n                <FormControl fullWidth required>\n                  <InputLabel error={!validGeneralCategory} id=\"gen-category-label\">General Category</InputLabel>\n                  <Select\n                    error={!validGeneralCategory} \n                    labelId=\"gen-category-label\"\n                    value={fbGeneralCategory || ''}\n                    onChange={(event:any) => {\n                      setValidGeneralCategory(true)\n                      changeGeneralCategory(event.target.value)\n                    }}\n                  >\n                    {generalCategoryNames.map((cat:any, index:number) => <MenuItem key={index} value={cat}>{cat}</MenuItem>)}\n                  </Select>\n                </FormControl>\n              </Grid>\n            </Grid>\n            <Grid item xs>\n              <TextField \n                helperText=\"\" \n                variant=\"standard\" \n                fullWidth \n                required \n                multiline \n                rowsMax=\"4\" \n                label=\"Description\" \n                id=\"description\" \n                type=\"text\"\n                error={!validDescription} \n                onChange={setSimpleField(setFbDescription, () => setValidDescription(true))} \n                value={fbDescription}/>\n            </Grid>\n            <Grid item xs>\n              Variables\n            </Grid>\n            <Grid container item xs>\n              <Grid className={classes.box} spacing={1} item container direction=\"row\">\n                <Grid item xs={6}>\n                  <VariableList onVariableEdition={onInputVariableEdition} onVariableRemoval={onInputVariableRemoval} setVariables={setFbInputVariables} inOutType={InOutType.in} title=\"Input\" variables={fbInputVariables} />\n                </Grid>\n                <Grid item xs={6}>\n                  <VariableList onVariableEdition={onOutputVariableEdition} onVariableRemoval={onOutputVariableRemoval} setVariables={setFbOutputVariables} inOutType={InOutType.out} title=\"Output\" variables={fbOutputVariables} />\n                </Grid>\n              </Grid>\n            </Grid>\n            <Grid item xs>\n              Events\n            </Grid>\n            <Grid container item xs>\n              <Grid className={classes.box} spacing={1} item container direction=\"row\">\n                <Grid item xs={6}>\n                  <EventList setEvent={setInputEvent} removeEvent={removeInputEvent} addNewEvent={addNewInputEvent} setEvents={setFbInputEvents} newEvent={newInputEvent} setNewEvent={setNewInputEvent} variables={fbInputVariables} inOutType={InOutType.in} title=\"Input\" events={fbInputEvents} />\n                </Grid>\n                <Grid item xs={6}>\n                  <EventList setEvent={setOutputEvent} removeEvent={removeOutputEvent} addNewEvent={addNewOutputEvent} setEvents={setFbOutputEvents} newEvent={newOutputEvent} setNewEvent={setNewOutputEvent} variables={fbOutputVariables} inOutType={InOutType.out} title=\"Output\" events={fbOutputEvents} />\n                </Grid>\n              </Grid>\n            </Grid>\n            <Grid item xs>\n              Dependencies\n            </Grid>\n            <Grid container xs item>\n              <Grid item container className={classes.box} alignItems=\"center\" justify=\"space-between\">\n                <Grid item container direction=\"row\" spacing={1} alignItems=\"flex-end\">\n                  <Grid item xs={6}>\n                    <TextField\n                        onChange={onChangeCurrentDependency} \n                        value={currentDependency}\n                        helperText=\"\"\n                        fullWidth \n                        label=\"New Dependency\" \n                        id=\"fb-new-dependency\" \n                        type=\"text\" />\n                  </Grid>\n                  <Grid item>\n                    <Button onClick={addDependency} className={classes.varEvButton} size=\"small\" variant=\"contained\">+</Button>\n                  </Grid>\n                </Grid>\n                <Grid container className={`${classes.box} ${classes.dependenciesBox}`} item>\n                  {fbExternalDependencies.length ?\n                    fbExternalDependencies.map((ed: ExternalDependency, index: number) => (\n                      <Chip key={index} className={classes.dependency} label={ed.edName} onDelete={deleteDependency(ed)} />\n                    )) : 'No Dependencies'\n                  }\n                </Grid>\n              </Grid>\n            </Grid>\n            <Grid item xs container direction=\"row\" justify=\"space-between\" alignItems=\"center\"> \n              <Grid item xs={6}>\n                  <input onChange={changeImplFile} value=\"\" required accept=\".py\" type=\"file\" id=\"button-file\" hidden />\n                  <label htmlFor=\"button-file\">\n                    <TextField\n                      className={classes.tfFile}\n                      label=\"Implementation File\"\n                      required={!props.byPassFields?.fbImplFile}\n                      error={!validFile}\n                      disabled={true}\n                      value={fbImplFile.name} \n                      InputProps={{\n                        startAdornment: (\n                          <Box pb={1} mr={1}>\n                            <Button variant=\"outlined\" component=\"span\">\n                              <UploadIcon className={classes.icon} />\n                            </Button>\n                          </Box> \n                        )\n                      }} />\n                  </label>\n              </Grid>\n              <Grid item xs={6} container direction=\"row\" spacing={2} alignItems=\"center\" justify=\"flex-end\">\n                <Grid item>\n                    <Button onClick={onCancel} color=\"secondary\" variant=\"contained\"><Clear/>{cancelLabel}</Button>\n                </Grid>\n                <Grid>\n                  <Button onClick={confirmButtonAction} color=\"primary\" variant=\"contained\"><Done/>{confirmLabel}</Button>\n                </Grid>\n              </Grid>\n            </Grid>\n            \n          </Grid>\n        </>\n      )\n}","/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/components/templates/Table/JPTable.tsx",["441","442","443"],"import React, { useState, useCallback } from 'react'\nimport { withStyles, Theme, createStyles, makeStyles } from '@material-ui/core/styles'\nimport Table from '@material-ui/core/Table'\nimport TableBody from '@material-ui/core/TableBody'\nimport TableCell from '@material-ui/core/TableCell'\nimport TableContainer from '@material-ui/core/TableContainer'\nimport TableHead from '@material-ui/core/TableHead'\nimport TableRow from '@material-ui/core/TableRow'\nimport Paper from '@material-ui/core/Paper'\nimport { Box, Button } from '@material-ui/core'\nimport { ArrowDropUp,ArrowDropDown,Delete,Edit, SettingsApplications, Add, AddBox, AddBoxOutlined, Settings } from '@material-ui/icons'\nimport { useMountEffect } from '../../../utils/main'\nimport {useGlobalStyles} from '../../../styles/main'\nimport './JPTable.css'\nimport { ConfirmActionStateLabel, ConfirmActionProps, ConfirmAction } from '../ConfirmAction/ConfirmAction'\n\nconst StyledTableCell = withStyles((theme: Theme) =>\n  createStyles({\n    head: {\n      color: theme.palette.primary.main,\n      fontWeight: 'bold',\n      fontSize: 16,\n    },\n    body: {\n      fontSize: 12,\n    },\n    \n  }),\n)(TableCell)\n\nconst StyledTableRow = withStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      '&:nth-of-type(odd)': {\n        backgroundColor: theme.palette.background.default,\n      },\n    },\n  }),\n)(TableRow)\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 700,\n  },\n  tableHeader: {\n    cursor:'pointer'\n  }\n})\n\nexport const JPTable = (props: {\n      data: any[], updateData: ((data: any[]) => void)\n      indexes : {label:string, key: string}[]\n      tName: string\n      extra?: {\n        delete? :{\n          action: (element:any) => Promise<any> \n          labelKey: string,\n          onSuccessDelete: (element: any) => void\n        },\n        edit?: {\n          action: (element: any) => void\n        } \n        details? :{\n          action: (element: any) => void\n        },\n        add? :{\n          action: (element: any) => void\n        },\n      }\n      sortedkey? : string}) => {\n    \n    const classes = useStyles()\n    const globalClasses = useGlobalStyles()\n    const [orderBy, setOrderBy] : [string | '', Function] = useState('')\n    const [previousOrderBy, setPreviousOrderBy] : [string | '', Function] = useState('')\n    const [asc, setAsc] : [boolean, Function] = useState(false)\n    const [deleting, setDeleting] : [string | undefined, Function] = useState(undefined)\n\n    const sort = (criteria: string) => {\n\n      if(!props.data.length)\n        return\n        \n      // const criteria = props.indexes[criteriaIndex].key\n      let newAsc = true\n      \n      const sorted : [] = [...props.data.sort((a:any, b:any) => {\n        \n        let elementA = a[criteria].key ?? a[criteria]\n        let elementB = b[criteria].key ?? b[criteria]\n        if(typeof a[criteria] === 'string') {\n          elementA = (a[criteria].key ?? a[criteria] as string).toLocaleLowerCase()\n          elementB = (b[criteria].key ?? b[criteria] as string).toLocaleLowerCase()\n        }\n        \n        const greater = elementA >= elementB\n        const equal = elementA === elementB\n\n        if(criteria === orderBy)\n          newAsc = !asc\n          \n        return equal ? 0 : newAsc ? greater ? 1 : -1 : greater ? -1 : 1\n  \n      })] as []\n      \n      setPreviousOrderBy(orderBy)\n      setOrderBy(criteria)\n      setAsc(newAsc)\n      \n      props.updateData(sorted)\n\n    }\n\n    useMountEffect(() => sort(props.sortedkey ? props.sortedkey : props.indexes[0].key))\n\n    const setDeletingElement = useCallback((element: any) => () => setDeleting(element),[])\n    const triggerEditElement = (element: any) => () => props.extra && props.extra.edit ? props.extra.edit.action(element) : {}\n    const triggerDetailsElement = (element: any) => () => props.extra && props.extra.details ? props.extra.details.action(element) : {}\n    const triggerAddElement = (element: any) => () => props.extra && props.extra.add ? props.extra.add.action(element) : {}\n\n    const deleteLine = useCallback(() : Promise<string> => {\n\n      return new Promise((res:Function, rej:Function) => {\n\n        if(!(props.extra?.delete) || !deleting) {\n          rej('')\n          return\n        }\n        \n        props.extra.delete.action(deleting)\n\n          .then(_ => {\n            res(`Correctly deleted ${props.tName} \\n${deleting && props.extra?.delete ? deleting[props.extra?.delete?.labelKey] : ''}.`)\n          })\n          .catch(_ => {\n            rej(`Error deleting ${props.tName} \\n${deleting && props.extra?.delete ? deleting[props.extra?.delete?.labelKey] : ''}.`)\n          })\n      })\n\n    },[deleting,props.extra,props.tName])\n\n    const confirmActionStatesToRemove = {\n\n      start: {\n        label: `Delete ${props.tName} \\n${deleting && props.extra?.delete ? deleting[props.extra?.delete?.labelKey] : ''}?`,\n        positiveLabel: 'Yes',\n        negativeLabel: 'No',\n        state: ConfirmActionStateLabel.start\n      },\n      executing: {\n        label: '',\n        state: ConfirmActionStateLabel.executing,\n      },\n      success: {\n        label: `Correctly deleted ${props.tName} \\n${deleting && props.extra?.delete ? deleting[props.extra?.delete?.labelKey] : ''}.`,\n        state: ConfirmActionStateLabel.success,\n        positiveLabel: 'Ok'\n      },\n      error: {\n        label: `Error deleting ${props.tName} \\n${deleting && props.extra?.delete ? deleting[props.extra?.delete?.labelKey] : ''}.`,\n        state: ConfirmActionStateLabel.error,\n        positiveLabel: 'Ok'\n      },\n    }\n\n    const onCancel = () => setDeleting(undefined)\n    const onError = () => setDeleting(undefined)\n    const onSuccess = () => {\n      props.updateData(props.data.filter((cElement: any) => cElement !== deleting))\n      if(deleting)\n        props.extra?.delete?.onSuccessDelete(deleting)\n    }\n  \n    const confirmActionPropsDeleting : ConfirmActionProps = {\n      \n      title: `Deleting ${props.tName}`,\n      states: confirmActionStatesToRemove,\n      currentState: confirmActionStatesToRemove.start,\n      onCancel: onCancel,\n      onError: onError,\n      onSuccess: onSuccess,\n      action:deleteLine,\n    \n    }\n\n    return (\n      <>\n      {deleting ? <ConfirmAction {...confirmActionPropsDeleting} /> : null }\n      <TableContainer component={Paper}>\n          <Table className={classes.table} size=\"small\" aria-label=\"customized table\">\n              <TableHead>\n                  <TableRow>\n                      {props.indexes.map((element: {key: string, label: string}, index: number) => \n                          <StyledTableCell className={classes.tableHeader} onClick={() => sort(element.key)} key={index}>\n                              <Box className={globalClasses.hoverOpacity} display=\"flex\" flexDirection=\"row\" alignItems=\"center\">\n                                  {element.label}\n                                  {element.key === orderBy ? asc ? <ArrowDropUp className={previousOrderBy === orderBy ? \"arrow-up\" : \"\"}/> : <ArrowDropDown className={element.key === orderBy ? \"arrow-down\" : \"\"}/> : <ArrowDropUp className={`${globalClasses.hiddenHoverOpacity}`} />}\n                              </Box> \n                          </StyledTableCell>)\n                      }\n                      {props.extra \n                          ? props.extra.details ? <StyledTableCell></StyledTableCell> : null\n                          : null\n                      }\n                      {props.extra \n                          ? props.extra.add ? <StyledTableCell></StyledTableCell> : null\n                          : null\n                      }\n                      {props.extra \n                          ? props.extra.edit ? <StyledTableCell></StyledTableCell> : null\n                          : null\n                      }\n                      {props.extra \n                          ? props.extra.delete ? <StyledTableCell></StyledTableCell> : null\n                          : null\n                      }\n                  </TableRow>\n              </TableHead>\n              {!!props.data.length ?\n                <TableBody>\n                {props.data.map((row:any, elIndex:number) => (\n                    <StyledTableRow key={elIndex}>\n                        {props.indexes.map((element: {key: string, label: string}, valIndex: number) => <StyledTableCell key={valIndex}>{row[element.key]?.data ?? row[element.key] }</StyledTableCell>)}\n                        {props.extra \n                          \n                          ? props.extra.details\n                            ? <StyledTableCell><Button disabled={row.detailsDisabled ?? false} onClick={triggerDetailsElement(row)} style={{minWidth:0}} variant=\"text\" size=\"small\"><Settings fontSize=\"small\"/></Button></StyledTableCell> \n                            : null\n                          : null\n                        }\n                           {props.extra \n                          \n                          ? props.extra.add\n                            ? <StyledTableCell><Button disabled={row.addDisabled ?? false} onClick={triggerAddElement(row)} style={{minWidth:0}} variant=\"text\" size=\"small\"><AddBoxOutlined fontSize=\"small\"/></Button></StyledTableCell> \n                            : null\n                          : null\n                        }\n                        {props.extra \n                          \n                          ? props.extra.edit \n                            ? <StyledTableCell><Button disabled={row.editDisabled ?? false} onClick={triggerEditElement(row)} style={{minWidth:0}} variant=\"text\" size=\"small\"><Edit fontSize=\"small\"/></Button></StyledTableCell> \n                            : null\n                          : null\n                        }\n                        {props.extra \n                          \n                          ? props.extra.delete \n                            ? <StyledTableCell><Button disabled={row.deleteDisabled ?? false} onClick={setDeletingElement(row)} style={{minWidth:0}} variant=\"text\" size=\"small\"><Delete fontSize=\"small\"/></Button></StyledTableCell> \n                            : null\n                          : null\n                        }\n                    </StyledTableRow>\n                ))}\n                </TableBody>\n                : null\n              }\n          </Table>\n      </TableContainer>\n      </>\n    )\n}","/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/components/templates/Charts/Gauge.tsx",[],"/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/components/templates/Charts/Bars.tsx",[],"/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/services/api/api.ts",[],"/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/components/templates/Charts/style.ts",[],"/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/components/FunctionBlocks/FunctionBlock/style.ts",[],"/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/components/FunctionBlocks/FunctionBlock/Event.tsx",[],"/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/components/FunctionBlocks/FunctionBlock/Variable.tsx",["444"],"import React, { useEffect, useState, useCallback } from 'react'\nimport { useFunctionBlockStyles } from \"./style\"\nimport { Variable, DataType, InOutType } from \"../../../model/index\"\nimport { Grid, TextField, FormControl, InputLabel, Select, Button, MenuItem } from \"@material-ui/core\"\n\ninterface VariableProps {\n  setVariables: Function\n  variables: Variable[]\n  title: string\n  inOutType: InOutType\n  onVariableRemoval: (variable: Variable) => void\n  onVariableEdition: (oldVariable: Variable, newVariable: Variable) => void\n}\n\nexport const VariableList = React.memo((props: VariableProps) => {\n  \n  const {variables,setVariables,onVariableRemoval,onVariableEdition} = props\n\n  const classes = useFunctionBlockStyles()\n\n  const newVar : Variable = {\n    variableId: -1,\n    variableDataType: DataType.dtString,\n    variableOpcua: \"\",\n    variableInoutType: props.inOutType,\n    variableName: \"\",\n  }\n\n  const [newVariable,setNewVariable] : [Variable,Function] = useState(newVar)\n\n  const setVariable = useCallback((variable:Variable,index:number) => {\n\n    setVariables((prevVars: Variable[]) => {\n\n      const oldVariable : Variable = prevVars[index]\n      const newVariables : Variable[] = [...prevVars]\n      newVariables[index] = variable\n      onVariableEdition(oldVariable,variable)\n      return newVariables\n\n    }) \n\n  },[onVariableEdition, setVariables])\n\n  const addVariable = useCallback((varToAdd: Variable) => {\n    \n    setVariables((prevVariables: Variable[]) =>[...prevVariables, varToAdd])\n    setNewVariable(newVar)\n\n  }, [setVariables,newVar]) \n\n  const removeVariable = useCallback((variableToRemove:Variable) => {\n    setVariables((prevVars: Variable[]) => prevVars.filter((variable:Variable,index:number) => variable !== variableToRemove))\n    onVariableRemoval(variableToRemove)\n  },[onVariableRemoval,setVariables]) \n\n  return (\n    <Grid container direction=\"column\">\n      <Grid item>{props.title}</Grid>\n      <Grid item className={classes.box}>\n        {variables.map((variable:Variable, index:number) => <VariableRow key={index} index={index} addRemoveVariable={removeVariable} setVariable={setVariable} variable={variable} newVar={false} />)}\n        <VariableRow index={-1} addRemoveVariable={addVariable} setVariable={setNewVariable} variable={newVariable} newVar={true}  />\n      </Grid> \n    </Grid>\n  )\n})\n\ninterface VariableRowProps {\n  index: number \n  addRemoveVariable: (variable: Variable) => void\n  setVariable:Function\n  variable: Variable\n  newVar: boolean\n  order?: number\n}\n  \nconst VariableRow = React.memo((props: VariableRowProps) => {\n\n  const classes = useFunctionBlockStyles()\n\n  const [validName,setValidName] = useState(\"\")\n\n  const action = () => {\n\n    if(!isValid() && props.newVar) \n      setValidName(\"Mandatory\")\n    \n    else\n      props.addRemoveVariable(props.variable)\n    \n  }\n\n  const isValid = useCallback(() => props.variable.variableName !== '', [props.variable])\n\n  const validate = useCallback(() => {\n    \n    !isValid() ? setValidName(\"Mandatory\") : setValidName('')\n\n  },[isValid]) \n\n  useEffect(() => {if(!props.newVar) validate()}, [props.variable.variableName, props.newVar, validate])\n\n  const updateField = (field:string) => (event:any) => {\n\n    setValidName('')\n    props.setVariable({...props.variable, [field]: event.target.value},props.index)\n  \n  }\n\n  return (\n    <Grid item container direction=\"row\" justify=\"space-between\" alignItems=\"center\">\n      { props.order ?\n      <Grid item xs={1}>\n          {props.order}\n      </Grid>\n      : null\n      }\n      <Grid item xs={4}>\n        <TextField \n          value={props.variable.variableName} \n          onChange={updateField('variableName')}\n          helperText={validName} fullWidth \n          required\n          error={validName !== ''} \n          label=\"Name\" \n          type=\"text\" />\n      </Grid>\n      <Grid item xs={2}>\n        <TextField \n          value={props.variable.variableOpcua || ''}\n          onChange={updateField('variableOpcua')} \n          helperText=\"\" \n          fullWidth \n          label=\"OPCUA\" \n          type=\"text\" />\n      </Grid>\n      <Grid item xs={3}>\n        <FormControl fullWidth required>\n          <InputLabel id={`data-type-label-${props.variable.variableName}`}>Data Type</InputLabel>\n          <Select\n            labelId={`data-type-label-${props.variable.variableName}`}\n            value={props.variable.variableDataType}\n            onChange={updateField('variableDataType')}\n          >\n            {Object.values(DataType).map((dt:any, index:number) => <MenuItem key={index} value={dt}>{dt}</MenuItem>)}\n\n          </Select>\n        </FormControl>\n      </Grid>\n      <Grid item xs={1}>\n        <Button \n          className={classes.varEvButton} \n          size=\"small\" \n          variant=\"contained\"\n          onClick={action}\n        >\n        {props.newVar ? '+' : 'x' }</Button>\n      </Grid>\n    </Grid>\n  )\n}\n ,(prevProps:VariableRowProps, nextProps: VariableRowProps) => prevProps.variable === nextProps.variable\n)","/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/model/index.ts",[],"/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/components/templates/ConfirmAction/style.ts",[],"/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/components/templates/Search/SearchableList.tsx",[],"/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/model/model/DigitalTwin.ts",["445","446"],"import { Event, Variable } from \"./EventVariable\";\r\nimport { User } from \"./User\";\r\n\r\nexport interface DigitalTwin {\r\n    dtId?: number\r\n    dtName: string\r\n    dtUser?: User\r\n    dtUserId: number\r\n    functionalities? : string[]\r\n} \r\n\r\nexport interface Functionality {\r\n    funcId?: number\r\n    funcName: string\r\n    dt?: DigitalTwin\r\n    funcdtName?: string\r\n    funcdtId: number\r\n    //state:number\r\n    funcUser?: User\r\n    funcUserId: number\r\n    /* funcMonitoredInputEvents: Event[]\r\n    funcMonitoredOutputEvents: Event[]\r\n    funcMonitoredInputVariables: Variable[]\r\n    funcMonitoredOutputVariables: Variable[] */\r\n} ","/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/model/model/Tables.ts",[],"/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/model/model/User.ts",[],"/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/model/model/SmartComponent.ts",[],"/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/model/model/FunctionBlock.ts",[],"/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/model/model/EventVariable.ts",[],"/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/model/model/Error.ts",[],"/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/components/DigitalTwin/DigitalTwinForm.tsx",["447","448"],"import React, { useState, useCallback, useEffect } from 'react'\nimport { TextField, Grid, Button } from '@material-ui/core'\nimport { useFunctionBlockStyles } from '../FunctionBlocks/FunctionBlock/style'\nimport { Done, Clear } from '@material-ui/icons'\nimport { ConfirmActionProps, ConfirmActionStateLabel, ConfirmActionAction, ConfirmAction } from '../templates/ConfirmAction/ConfirmAction'\n\ninterface DigitalTwinProps {\n\n    dtName: {\n        dtName: string\n        setDtName: Function\n    },\n    cancel: {\n        label: string\n        action: () => void\n    },\n    confirmDialog: {\n        buttonTitle: string\n        title: string\n        initialState: ConfirmActionStateLabel\n        action: ConfirmActionAction\n        onSuccess : () => void\n        start? : {\n            label: string\n            positiveLabel: string\n            negativeLabel: string\n        }\n        success: {\n            label:string\n            positiveLabel: string\n        }\n        error: {\n            label: string\n            positiveLabel: string\n        }\n    },\n}\n\nexport const DigitalTwinForm = (props: DigitalTwinProps) => {\n\n    /**styles */\n    const classes = useFunctionBlockStyles()\n\n    /**Digital Twin Name*/\n    const {dtName, setDtName} = props.dtName\n    const [validDtName, setValidDtName] = useState(true)\n    const onChangeDtName = useCallback((event:any) => {\n\n        setDtName(event.target.value.trim())\n        setValidDtName(true)\n    \n      },[setDtName])\n\n    /* Buttons */\n\n    const onCancel = props.cancel.action\n    const cancelLabel = props.cancel.label\n\n    const confirmLabel = props.confirmDialog.buttonTitle\n\n    /* Confirmation */\n\n    const [confirm, setConfirm] : [boolean, Function] = useState(false)\n\n    const validateFields = () : boolean => {\n\n        const cValidDtName = dtName.trim() !== ''\n            \n        if(!cValidDtName) setValidDtName(cValidDtName)\n    \n        return cValidDtName\n    \n    }\n\n    const confirmButtonAction = () => {\n\n        if(validateFields())\n          setConfirm(true)\n    }\n\n    const confirmActionStates = {\n        start: {\n            label: props.confirmDialog.start?.label,\n            positiveLabel: props.confirmDialog.start?.positiveLabel,\n            negativeLabel: props.confirmDialog.start?.negativeLabel,\n            state: ConfirmActionStateLabel.start\n        },\n        executing: {\n          label: '',\n          state: ConfirmActionStateLabel.executing,\n        },\n        success: {\n          label: props.confirmDialog.success.label,\n          state: ConfirmActionStateLabel.success,\n          positiveLabel: props.confirmDialog.success.positiveLabel\n        },\n        error: {\n          label: props.confirmDialog.error.label,\n          state: ConfirmActionStateLabel.error,\n          positiveLabel: props.confirmDialog.success.positiveLabel\n        },\n      }\n    \n    const confirmActionProps : ConfirmActionProps = {\n\n        title: props.confirmDialog.title,\n        states: confirmActionStates,\n        currentState: confirmActionStates.executing,\n        onCancel: () => setConfirm(false),\n        onError: () => setConfirm(false),\n        onSuccess: props.confirmDialog.onSuccess,\n        action:props.confirmDialog.action,\n      \n    }\n\n    return (\n        <> {confirm ? <ConfirmAction {...confirmActionProps} /> : null}\n            <Grid spacing={1} justify=\"space-between\" item xs container direction=\"row\">\n              <Grid item xs={6}>\n                <TextField\n                  onChange={onChangeDtName} \n                  value={dtName}\n                  helperText=\"\"\n                  error={!validDtName} \n                  fullWidth required \n                  label=\"Insert New Digital Twin Name\" \n                  id=\"dt-name\" \n                  type=\"text\" />\n            </Grid>\n            </Grid>\n            <Grid item xs container direction=\"row\" justify=\"space-between\" alignItems=\"center\"> \n              <Grid item xs={6} container direction=\"row\" spacing={2} alignItems=\"center\" justify=\"flex-end\">\n                <Grid item>\n                    <Button onClick={onCancel} color=\"secondary\" variant=\"contained\"><Clear/>{cancelLabel}</Button>\n                </Grid>\n                <Grid>\n                  <Button onClick={confirmButtonAction} color=\"primary\" variant=\"contained\"><Done/>{confirmLabel}</Button>\n                </Grid>\n              </Grid>\n            </Grid>\n        </>\n    )\n}","/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/components/DigitalTwin/NewDigitalTwin.tsx",[],"/home/maria/Desktop/Marketplace-JurassicPark/backend/web/src/components/DigitalTwin/FunctionalityForm.tsx",["449","450","451","452","453","454","455","456","457","458","459","460","461","462","463","464","465","466","467","468","469","470","471","472","473","474","475","476","477","478"],"import React, { useState, useCallback, useEffect } from 'react'\r\nimport { FormControl, InputLabel, TextField, Grid, Select, MenuItem, Box, Button,Typography, Chip } from '@material-ui/core'\r\nimport { DigitalTwin , Functionality} from '../../model'\r\nimport { useFunctionBlockStyles } from '../FunctionBlocks/FunctionBlock/style'\r\nimport { VariableList } from '../FunctionBlocks/FunctionBlock/Variable'\r\nimport { setSimpleField, useMountEffect } from '../../utils/main'\r\nimport { Done, Clear, BackspaceOutlined } from '@material-ui/icons'\r\nimport { ReactComponent as UploadIcon } from '../../../icons/Upload.svg'\r\nimport { getFBfromFbtFile, getOrDownloadFunctionBlockCategories } from '../../utils/functionBlock'\r\nimport { ConfirmActionProps, ConfirmActionStateLabel, ConfirmActionAction, ConfirmAction } from '../templates/ConfirmAction/ConfirmAction'\r\nimport { useStore } from '../templates/Store/Store'\r\n\r\ninterface FunctionalityFormProps {\r\n\r\n    // funcName: {\r\n    //   funcName: string\r\n    //   setFuncName: Function\r\n    // },\r\n    // digitalTwin: {\r\n    //   digitalTwin: DigitalTwin\r\n    //   setDigitalTwin: Function\r\n    // }\r\n    cancel: {\r\n        label: string\r\n        action: () => void\r\n    },\r\n    // confirmDialog: {\r\n    //     buttonTitle: string\r\n    //     title: string\r\n    //     initialState: ConfirmActionStateLabel\r\n    //     onSuccess : () => void\r\n    //     start? : {\r\n    //         label: string\r\n    //         positiveLabel: string\r\n    //         negativeLabel: string\r\n    //     }\r\n    //     success: {\r\n    //         label:string\r\n    //         positiveLabel: string\r\n    //     }\r\n    //     error: {\r\n    //         label: string\r\n    //         positiveLabel: string\r\n    //     }\r\n    // },\r\n}\r\n\r\nexport const FunctionalityForm = (props: FunctionalityFormProps) => {\r\n\r\n    /**styles */\r\n    const classes = useFunctionBlockStyles()\r\n\r\n    /**list of digital-twins */\r\n    const {data: digitalTwins, dispatchAction:dispatchDigitalTwinsActions} = useStore('digitalTwins')\r\n    const [validDt,setValidDt] : [boolean, Function] = useState(true)\r\n\r\n    /**Functionality Name */\r\n    // const {funcName, setFuncName} = props.funcName\r\n    // const [validFuncName, setValidFuncName] = useState(true)\r\n    // const onChangeFuncName = useCallback((event:any) => {\r\n\r\n    //   setFuncName(event.target.value.trim())\r\n    //   setValidFuncName(true)\r\n    \r\n    // },[setFuncName])\r\n\r\n    /*Digital Twin*/\r\n    // const {digitalTwin,setDigitalTwin} = props.digitalTwin\r\n\r\n\r\n    /* Buttons */\r\n\r\n    const onCancel = props.cancel.action\r\n    const cancelLabel = props.cancel.label\r\n\r\n    // const confirmLabel = props.confirmDialog.buttonTitle\r\n\r\n    /* Confirmation */\r\n\r\n    // const [confirm, setConfirm] : [boolean, Function] = useState(false)\r\n\r\n    // const validateFields = () : boolean => {\r\n\r\n    //     const cValidFuncName = funcName.trim() !== ''\r\n    //     const cValidDigitalTwin = digitalTwin.dtId !== -1\r\n            \r\n    //     if(!cValidFuncName) setValidFuncName(cValidFuncName)\r\n    //     if(!cValidDigitalTwin ) setValidDt(cValidDigitalTwin)\r\n    \r\n    //     return cValidFuncName && cValidDigitalTwin\r\n    // }\r\n\r\n    // const confirmButtonAction = () => {\r\n\r\n    //     if(validateFields())\r\n    //       setConfirm(true)\r\n    // }\r\n\r\n    // const confirmActionStates = {\r\n    //     start: {\r\n    //         label: props.confirmDialog.start?.label,\r\n    //         positiveLabel: props.confirmDialog.start?.positiveLabel,\r\n    //         negativeLabel: props.confirmDialog.start?.negativeLabel,\r\n    //         state: ConfirmActionStateLabel.start\r\n    //     },\r\n    //     executing: {\r\n    //       label: '',\r\n    //       state: ConfirmActionStateLabel.executing,\r\n    //     },\r\n    //     success: {\r\n    //       label: props.confirmDialog.success.label,\r\n    //       state: ConfirmActionStateLabel.success,\r\n    //       positiveLabel: props.confirmDialog.success.positiveLabel\r\n    //     },\r\n    //     error: {\r\n    //       label: props.confirmDialog.error.label,\r\n    //       state: ConfirmActionStateLabel.error,\r\n    //       positiveLabel: props.confirmDialog.success.positiveLabel\r\n    //     },\r\n    //   }\r\n    \r\n    // const confirmActionProps : ConfirmActionProps = {\r\n\r\n    //     title: props.confirmDialog.title,\r\n    //     states: confirmActionStates,\r\n    //     currentState: confirmActionStates.executing,\r\n    //     onCancel: () => setConfirm(false),\r\n    //     onError: () => setConfirm(false),\r\n    //     onSuccess: props.confirmDialog.onSuccess,\r\n    // }\r\n\r\n    return (\r\n        //  <>  {confirm ? <ConfirmAction {...confirmActionProps} /> : null}\r\n            // <Grid spacing={1} justify=\"space-between\" item xs container direction=\"row\">\r\n            //   <Grid item xs={6}>\r\n            //     <TextField\r\n            //       onChange={onChangeFuncName} \r\n            //       value={funcName}\r\n            //       helperText=\"\"\r\n            //       error={!validFuncName} \r\n            //       fullWidth required \r\n            //       label=\"Type\" \r\n            //       id=\"fb-type\" \r\n            //       type=\"text\" />\r\n            //   </Grid>\r\n            // </Grid>\r\n            // <Grid item xs>\r\n            //     <FormControl fullWidth required>\r\n            //       <InputLabel error={!validDt} id=\"digital-twin-label\">DigitalTwin</InputLabel>\r\n            //       <>\r\n            //         <Select\r\n            //           error={!validDt}\r\n            //           labelId=\"digital-twin-label\"\r\n            //           value={digitalTwin.dtName}\r\n            //           onChange={(event) => {\r\n            //             setValidDt(true)\r\n            //             setDigitalTwin(digitalTwins.filter((dts:DigitalTwin) => event.target.value === dts.dtName)[0])\r\n            //           }} \r\n            //         >\r\n            //           {digitalTwins.map((dts:DigitalTwin, index:number) => <MenuItem key={index} value={dts.dtName}>{dts.dtName}</MenuItem>)}\r\n            //         </Select>\r\n                   \r\n            //       </>\r\n            //     </FormControl>\r\n            //   </Grid>\r\n            <Grid item xs container direction=\"row\" justify=\"space-between\" alignItems=\"center\"> \r\n              <Grid item xs={6} container direction=\"row\" spacing={2} alignItems=\"center\" justify=\"flex-end\">\r\n                <Grid item>\r\n                <Button onClick={onCancel} style={{minWidth:0}} variant=\"text\" size=\"medium\"><BackspaceOutlined fontSize=\"large\"/></Button>\r\n                    {/* <Button onClick={onCancel} color=\"secondary\" variant=\"contained\"><Clear/>{cancelLabel}</Button> */}\r\n                </Grid>\r\n                {/* <Grid>\r\n                  <Button onClick={confirmButtonAction} color=\"primary\" variant=\"contained\"><Done/>{confirmLabel}</Button>\r\n                </Grid> */}\r\n              </Grid>\r\n            </Grid>\r\n      )\r\n}","/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/index.tsx",[],["479","480"],"/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/serviceWorker.ts",[],"/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/App.tsx",[],"/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/redux/reducers.ts",[],"/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/utils/main.ts",["481"],"/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/redux/actions.ts",[],"/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/styles/main.ts",[],"/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/services/socket/socket.ts",[],"/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/DigitalTwin/NewDigitalTwin.tsx",["482","483","484","485","486","487","488","489","490","491","492","493","494","495"],"/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/FunctionBlocks/List/List.tsx",[],"/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/FunctionBlocks/FunctionBlock/NewFunctionBlock.tsx",[],"/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/DigitalTwin/FunctionalityDetails.tsx",["496","497","498"],"/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/SmartComponents/List/List.tsx",[],"/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/templates/Store/Store.tsx",[],"/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/SmartComponents/SmartComponent/SmartComponent.tsx",[],"/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/FunctionBlocks/FunctionBlock/EditFunctionBlock.tsx",[],"/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/FunctionBlockCategories/List/List.tsx",["499","500"],"/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/DigitalTwin/DigitalTwinMonitoring.tsx",["501","502","503","504","505","506","507","508","509","510"],"import React, { useState } from 'react'\r\nimport { Navigator } from '../templates/Navigator/Navigator'\r\nimport { ConfirmAction, ConfirmActionState, ConfirmActionStateLabel, ConfirmActionProps } from '../templates/ConfirmAction/ConfirmAction'\r\nimport { LazyComponent } from '../templates/LazyComponent/LazyComponent'\r\nimport { JPTable } from '../templates/Table/JPTable'\r\nimport { Functionality, DigitalTwin, SmartComponent, AssociatedSmartComponent} from '../../model'\r\nimport { useMountEffect } from '../../utils/main'\r\nimport { getOrDownloadDigitalTwins, getOrDownloadFunctionalities} from '../../utils/digitalTwins'\r\nimport { getOrDownloadSmartComponents } from '../../utils/smartComponents'\r\nimport { getOrDownloadAssociatedSmartComponents } from '../../utils/associatedSmartComponents'\r\nimport { useStore } from '../templates/Store/Store'\r\nimport { FunctionalityActions , DigitalTwinActions, SmartComponentActions, AssociatedSmartComponentActions} from '../../redux/actions'\r\nimport { RequestResponseState } from '../../services/api/api'\r\nimport { TextField, Grid, Button, Box, Dialog, DialogTitle, CircularProgress , Select, InputLabel, MenuItem, FormControl, Input, FormHelperText } from '@material-ui/core'\r\nimport { createFunctionality, updateFunctionality } from '../../services/api/digital-twin'\r\nimport { deleteFunctionality} from '../../services/api/digital-twin'\r\nimport { useDialogStyles } from '../FunctionBlockCategories/List/style'\r\nimport { CheckCircle, Error } from '@material-ui/icons'\r\nimport { useFunctionBlockStyles } from '../FunctionBlocks/FunctionBlock/style'\r\nimport { routes } from '../../App'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\nconst NEW_FUNCTIONALITY_RE = /[a-zA-Z0-9]{3,}/\r\n\r\nlet functionalityId = -1\r\nconst funcUserId = 1\r\n\r\nconst EditFunctionalityDialog = (props: {func: Functionality, onGood: (newFunc: Functionality) => void, onError: () => void, onCancel: () => void}) => {\r\n\r\n  const [newFuncName, setNewFuncName] : [string,Function] = useState(props.func.funcName)\r\n\r\n  const classes = useDialogStyles()\r\n\r\n  const [sending, setSending] : [boolean, Function] = useState(false)\r\n\r\n  const [result, setResult] : [{done: boolean, good?: boolean, message?: string},Function] = useState({done:false})\r\n\r\n  const action = () => {\r\n\r\n      if(props.func.funcId) {\r\n\r\n          if(!result.done) {\r\n\r\n              setSending(true)\r\n  \r\n              updateFunctionality(props.func)\r\n\r\n                  .then((response: RequestResponseState) => {\r\n                      setResult({done:true, good: true, message: response.msg})\r\n                  })\r\n\r\n                  .catch((error: RequestResponseState) => {\r\n                      setResult({done: true, good: false, message: error.msg})\r\n                  })\r\n\r\n                  .finally(() => setSending(false))\r\n\r\n          }\r\n\r\n          else {\r\n\r\n              if(result.good)\r\n                  props.onGood({...props.func, funcName: newFuncName})\r\n              \r\n              else\r\n                  props.onError()\r\n\r\n          }\r\n\r\n      }\r\n\r\n  }\r\n\r\n  return (\r\n      <Dialog open={true}>\r\n          <DialogTitle>Edit Functionality</DialogTitle>\r\n          <Box className={classes.box}>\r\n              {\r\n                  !result.done \r\n                      ?\r\n                          <TextField \r\n                              disabled={sending}\r\n                              value={newFuncName}\r\n                              onChange={(event) => setNewFuncName(event.target.value)}\r\n                          />\r\n                      :    <Grid container justify=\"center\">\r\n                              <Grid item>\r\n                                  {\r\n                                      result.good \r\n                                          ?   <CheckCircle color=\"primary\" />\r\n                                          :   <Error color=\"error\" />\r\n                                  }\r\n                              </Grid>\r\n                              <Grid item>\r\n                                  <Box className={result.good ? classes.good : classes.error} textAlign=\"center\">{result.message}</Box>\r\n                              </Grid>\r\n                          </Grid> \r\n              }\r\n          </Box>\r\n          <Grid className={classes.buttons} container direction=\"row\" justify=\"space-between\">\r\n              <Grid item>\r\n                  {sending \r\n                      ? <CircularProgress color=\"primary\" />\r\n                      : <Button onClick={action}>Ok</Button>\r\n                  }\r\n              </Grid>\r\n              <Grid item>\r\n                  <Button disabled={sending} onClick={props.onCancel}>Cancel</Button>\r\n              </Grid>\r\n          </Grid>\r\n      </Dialog>\r\n  )\r\n\r\n}\r\n\r\nconst AddFunctionalityDetails = (props: {func: Functionality, onGood: (newFunc: Functionality) => void, onError: () => void, onCancel: () => void}) => {\r\n\r\n    const [newFuncName, setNewFuncName] : [string,Function] = useState(props.func.funcName)\r\n  \r\n    const classes = useDialogStyles()\r\n  \r\n    const [sending, setSending] : [boolean, Function] = useState(false)\r\n  \r\n    const [result, setResult] : [{done: boolean, good?: boolean, message?: string},Function] = useState({done:false})\r\n\r\n    const [fetching,setFetching] = useState(true)\r\n    const {data:smartComponents, dispatchAction:dispatchSmartComponentActions} = useStore('smartComponents')\r\n    const updateSmartComponents = (scs: SmartComponent[]) => dispatchSmartComponentActions(SmartComponentActions.updateSmartComponent(scs))\r\n    const [error,setError] = useState('')\r\n\r\n    // Recuperar diretamente da comunicação OPC-UA os smart_components disponíveis (SmartComponent)\r\n    useMountEffect(() => {\r\n\r\n    setTimeout(() => {\r\n\r\n    setFetching(true)\r\n    getOrDownloadSmartComponents(smartComponents)\r\n        .then((result: SmartComponent[]) => updateSmartComponents(result))\r\n        .catch((e:RequestResponseState) => setError(e.msg))\r\n        .finally(() => setFetching(false))\r\n    }, 0)\r\n    })\r\n\r\n    // Associar um smartComponent à funcionalidade\r\n    const [smartComponentChoice, setSmartComponentChoice] = useState('')\r\n    const [smartComponentIdChoice, setSmartComponentIdChoice] = useState(0)\r\n\r\n    const handleSmartComponentChoice = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n    setSmartComponentChoice(event.target.value as string);\r\n    let i = 0;\r\n    while(i < smartComponents.length)\r\n    {\r\n        if( smartComponents[i].scName === (event.target.value as string))\r\n        {\r\n            setSmartComponentIdChoice(smartComponents[i].scId)\r\n        }\r\n        i++;\r\n    }\r\n    };\r\n\r\n  \r\n    const action = () => {\r\n  \r\n        props.func.funcscId = smartComponentIdChoice;\r\n        props.func.funcscName = smartComponentChoice;\r\n\r\n        if(props.func.funcId) {\r\n  \r\n            if(!result.done) {\r\n  \r\n                setSending(true)\r\n                console.log(props.func)\r\n    \r\n                updateFunctionality(props.func)\r\n  \r\n                    .then((response: RequestResponseState) => {\r\n                        setResult({done:true, good: true, message: response.msg})\r\n                    })\r\n  \r\n                    .catch((error: RequestResponseState) => {\r\n                        setResult({done: true, good: false, message: error.msg})\r\n                    })\r\n  \r\n                    .finally(() => setSending(false))\r\n            }\r\n  \r\n            else {\r\n  \r\n                if(result.good)\r\n                    props.onGood({...props.func, funcName: newFuncName})\r\n                \r\n                else\r\n                    props.onError()\r\n            }\r\n        }\r\n    }\r\n  \r\n    return (\r\n        <Dialog open={true}>\r\n            <DialogTitle>Add Functionality Details</DialogTitle>\r\n            <Box className={classes.box}>\r\n            <Grid item> \r\n                <Grid container item xs>\r\n                    <Grid className={classes.box} spacing={3} item container direction=\"column\" alignItems=\"flex-start\">\r\n                        <Grid item xs={12} sm={6}>\r\n                            <InputLabel id={`digital-twin-label-${smartComponents}`}>DINASORE</InputLabel>\r\n                            <Select labelId={`digital-twin-label-${smartComponents}`} value={smartComponentChoice} onChange={handleSmartComponentChoice}>\r\n                            {(smartComponents || []).map((smartComponent: any) => {return <MenuItem key={smartComponent.scId} value={smartComponent.scName}>{smartComponent.scName}</MenuItem>})}\r\n                            </Select> \r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6}>\r\n                            <TextField\r\n                                label= \"Function Block\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6}>\r\n                            <TextField\r\n                                label= \"Variable/Event\"\r\n                            />\r\n                        </Grid>\r\n\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n            <Grid className={classes.buttons} container direction=\"row\" justify=\"space-between\">\r\n                <Grid item>\r\n                    {sending \r\n                        ? <CircularProgress color=\"primary\" />\r\n                        : <Button onClick={action}>Ok</Button>\r\n                    }\r\n                </Grid>\r\n                <Grid item>\r\n                    <Button disabled={sending} onClick={props.onCancel}>Cancel</Button>\r\n                </Grid>\r\n            </Grid>\r\n         </Box>\r\n        </Dialog>\r\n    )\r\n  \r\n}\r\n  \r\n\r\nexport const DigitalTwinMonitoring = () => {\r\n    \r\n  const classes = useFunctionBlockStyles()\r\n\r\n  const [fetching,setFetching] = useState(true)\r\n  const [error,setError] = useState('')\r\n  const [newFunc,setNewFunc] : [string,Function] = useState('')\r\n\r\n  const [confirmEditing,setConfirmEditing] : [boolean, Function] = useState(false)\r\n  const [confirmAddFunc,setConfirmAddFunc] : [boolean, Function] = useState(false)\r\n\r\n  const [validNewFunc, setValidNewFunc] : [boolean,Function] = useState(true)\r\n\r\n  const errorFetchingFunctionalityState : ConfirmActionState = {\r\n    label: error,\r\n    state: ConfirmActionStateLabel.error,\r\n    positiveLabel: 'Ok'\r\n  }\r\n\r\n  const [redirectTo, setRedirectTo] : [string, Function] = useState(\"\")\r\n\r\n  const {data:functionalities, dispatchAction:dispatchFunctionalityActions} = useStore('functionalities')\r\n  const {data:digitalTwins, dispatchAction:dispatchDigitalTwinActions} = useStore('digitalTwins')\r\n  const {data:associatedSmartComponents, dispatchAction:dispatchAssociatedSmartComponentActions} = useStore('associatedSmartComponents')\r\n\r\n  const onCancel = () => setError('')\r\n\r\n  const updateFunctionalities = (funcs: Functionality[]) => dispatchFunctionalityActions(FunctionalityActions.updateFunctionalities(funcs))\r\n  const updateDigitalTwins = (dts: DigitalTwin[]) => dispatchDigitalTwinActions(DigitalTwinActions.updateDigitalTwins(dts))\r\n  const updateAssociatedSmartComponents = (assSc: AssociatedSmartComponent[]) => dispatchAssociatedSmartComponentActions(AssociatedSmartComponentActions.updateAssociatedSmartComponents(assSc))\r\n  \r\n  \r\n  const addFunc = () => dispatchFunctionalityActions(FunctionalityActions.addFunctionality({funcId: functionalityId, funcUserId: 1 , funcName: newFunc, funcdtId: 1}))\r\n \r\n  const [editingFunc, setEditingFunc] : [Functionality | null,Function] = useState(null)\r\n  const [addDetailsFunc, setAddDetailsFunc] : [Functionality | null,Function] = useState(null)\r\n\r\n  const indexes = [\r\n    {label: 'Functionality', key: 'funcName'},\r\n    {label: 'Digital Twin', key: 'dtName'},\r\n    {label: 'State', key: 'dtDescription'},\r\n    {label: 'Associated Smart Components', key: 'scName'},\r\n    {label: 'Monitored Variables/Events', key: 'dtMonitoredVariableEvent'},\r\n  ]\r\n\r\n  // Recuperar da base de dados as funcionalidades (Functionality)\r\n  useMountEffect(() => {\r\n\r\n    setTimeout(() => {\r\n\r\n    setFetching(true)\r\n    getOrDownloadFunctionalities(functionalities)\r\n        .then((result: Functionality[]) => updateFunctionalities(result))\r\n        .catch((e:RequestResponseState) => setError(e.msg))\r\n        .finally(() => setFetching(false))\r\n    }, 0)\r\n  })\r\n\r\n  // Recuperar da base de dados os digital twins (DigitalTwin)\r\n  useMountEffect(() => {\r\n\r\n    setTimeout(() => {\r\n\r\n    setFetching(true)\r\n    getOrDownloadDigitalTwins(digitalTwins)\r\n        .then((result: DigitalTwin[]) => updateDigitalTwins(result))\r\n        .catch((e:RequestResponseState) => setError(e.msg))\r\n        .finally(() => setFetching(false))\r\n    }, 0)\r\n  })\r\n\r\n  // Recuperar da base de dados os smartComponents associados (AssociatedSmartComponent)\r\n//   useMountEffect(() => {\r\n\r\n//     setTimeout(() => {\r\n\r\n//     setFetching(true)\r\n//     getOrDownloadAssociatedSmartComponents(associatedSmartComponents)\r\n//         .then((result: AssociatedSmartComponent[]) => updateAssociatedSmartComponents(result))\r\n//         .catch((e:RequestResponseState) => setError(e.msg))\r\n//         .finally(() => setFetching(false))\r\n//     }, 0)\r\n//   })\r\n//   console.log(associatedSmartComponents)\r\n\r\n\r\n  const isFunctionalityValid = (func:string) => NEW_FUNCTIONALITY_RE.test(func)\r\n\r\n  const validateAndCreate = () => {\r\n\r\n  const validFunc= isFunctionalityValid(newFunc)\r\n\r\n    if(!validFunc)\r\n      setValidNewFunc(false)\r\n    else\r\n      setConfirmAddFunc(true)\r\n\r\n  }\r\n\r\n  const buildFunctionality = () : Functionality => ({\r\n    funcName: newFunc, funcId: functionalityId,\r\n    funcdtId: digitalTwinIdChoice , funcUserId, funcdtName: digitalTwinChoice,\r\n  })\r\n\r\n\r\n  const addNewFunctionalityAction = () : Promise<string> => {\r\n\r\n    const functionality : Functionality = buildFunctionality()\r\n\r\n    return new Promise<string>((res:Function, rej:Function)  => {\r\n\r\n        console.log(functionality)\r\n\r\n        createFunctionality(functionality)\r\n\r\n            .then((result: RequestResponseState) => {\r\n            functionalityId = result.extra.lastInsertedId\r\n                res('Functionality created')\r\n            })\r\n\r\n            .catch((e:RequestResponseState) => rej(e.msg))\r\n\r\n    })\r\n  }\r\n\r\n  const confirmFunctionalityCreationActionStates = {\r\n    start: {\r\n      label: `Confirm creation of new functionality: ${newFunc} ?`,\r\n      positiveLabel: 'Ok',\r\n      negativeLabel: 'Cancel',\r\n      state: ConfirmActionStateLabel.start\r\n    },\r\n    executing: {\r\n      label: '',\r\n      state: ConfirmActionStateLabel.executing,\r\n    },\r\n    success: {\r\n      label: 'Functionality Created',\r\n      state: ConfirmActionStateLabel.success,\r\n      positiveLabel: 'Ok'\r\n    },\r\n    error: {\r\n      label: 'Error Creating Functionality',\r\n      state: ConfirmActionStateLabel.error,\r\n      positiveLabel: 'Ok'\r\n    },\r\n  }\r\n\r\n  const confirmActionProps : ConfirmActionProps = {\r\n\r\n    title: 'Add Functionality',\r\n    states: confirmFunctionalityCreationActionStates,\r\n    currentState: confirmFunctionalityCreationActionStates.start,\r\n    onCancel: () => setConfirmAddFunc(false),\r\n    onError: () => setConfirmAddFunc(false),\r\n    onSuccess: () => {\r\n        addFunc()\r\n        setNewFunc('')\r\n    },\r\n    action: addNewFunctionalityAction,\r\n  }\r\n\r\n  const getDataFunctionality = () => functionalities.map((functionality: Functionality) => {\r\n\r\n    return {\r\n          ...functionality,\r\n    }\r\n  })\r\n\r\n  const deleteFunctionalityAction = (func: Functionality) : Promise<any> => {\r\n\r\n    return new Promise(async(res:Function,rej:Function) => {\r\n\r\n        if(!func.funcId) {\r\n            rej('Error')\r\n            return\r\n        }\r\n\r\n        try {\r\n            const response : RequestResponseState = await deleteFunctionality(func.funcId)\r\n            res(response)\r\n          }\r\n\r\n        catch(err) {\r\n            rej(err)\r\n        }\r\n    })\r\n  }\r\n\r\n  //Adicionar Detalhes à Funcionalidade\r\n  const cancelAddDetails = () => setAddDetailsFunc(null);\r\n  const showAddDetails = (func: Functionality) => setAddDetailsFunc(func)\r\n  \r\n  //Editar a Funcionalidade\r\n  const cancelEditing = () => setEditingFunc(null)\r\n  const showEditing = (func: Functionality) => setEditingFunc(func)\r\n\r\n  const onGoodEditing = (editingFunctionality: Functionality) => {\r\n      \r\n    const newFunctionalities = functionalities.map((func: Functionality) => {\r\n\r\n    if(func.funcId === editingFunctionality.funcId)\r\n        return {...func, funcName: editingFunctionality.funcName, funcdtId: editingFunctionality.funcdtId}\r\n    return func\r\n\r\n    })\r\n  \r\n    cancelEditing()\r\n    dispatchFunctionalityActions(FunctionalityActions.updateFunctionalities(newFunctionalities))\r\n  }\r\n\r\n  // Associar um digital twin à nova funcionalidade criada\r\n  const [digitalTwinChoice, setDigitalTwinChoice] = useState('')\r\n  const [digitalTwinIdChoice, setDigitalTwinIdChoice] = useState(0)\r\n\r\n  const handleDigitalTwinChoice = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n    setDigitalTwinChoice(event.target.value as string);\r\n    let i = 0;\r\n    while(i < digitalTwins.length)\r\n    {\r\n        if(digitalTwins[i].dtName === (event.target.value as string))\r\n        {\r\n            setDigitalTwinIdChoice(digitalTwins[i].dtId)\r\n        }\r\n        i++;\r\n    }\r\n   \r\n  };\r\n\r\n  const redirectToList = () => setRedirectTo(routes.functionalityDetails)\r\n  \r\n  if(redirectTo !== \"\") \r\n  return <Redirect to={redirectTo} push={true} />\r\n\r\n  return (\r\n    <Navigator title=\"New Digital Twin Functionality\">\r\n     <> \r\n        {error !== ''\r\n                ? <ConfirmAction title='Fetching Functionalities' currentState={errorFetchingFunctionalityState} states={{error: errorFetchingFunctionalityState}} onCancel={onCancel}/>\r\n                : null \r\n        }\r\n         <LazyComponent loaded={!fetching}>\r\n             <>\r\n                {confirmEditing\r\n                     ? <ConfirmAction {...confirmActionProps} /> \r\n                     : editingFunc\r\n                         ?  <EditFunctionalityDialog\r\n                             onGood={onGoodEditing}\r\n                             func={editingFunc}\r\n                             onError={cancelEditing}\r\n                             onCancel={cancelEditing} />\r\n                         : null\r\n                 }\r\n                {confirmAddFunc \r\n                     ? <ConfirmAction {...confirmActionProps} /> \r\n                     : addDetailsFunc\r\n                         ?  <AddFunctionalityDetails\r\n                             onGood={onGoodEditing}\r\n                             func={addDetailsFunc}\r\n                             onError={cancelAddDetails}\r\n                             onCancel={cancelAddDetails} />\r\n                         : null\r\n                 }\r\n                 <Grid container direction=\"column\" spacing={2}>\r\n                      <Grid item>\r\n                        <JPTable\r\n                            sortedkey=\"funcName\"\r\n                            data={getDataFunctionality()} \r\n                            updateData={updateFunctionalities} \r\n                            indexes={indexes} \r\n                            tName='Functionality'\r\n                            extra={{\r\n                                delete: {\r\n                                    action: deleteFunctionalityAction,\r\n                                    labelKey: 'funcName',\r\n                                    onSuccessDelete: () => {}\r\n                                },\r\n                                edit: {\r\n                                    action: showEditing\r\n                                },\r\n                                details: {\r\n                                    action: redirectToList\r\n                                },\r\n                                add: {\r\n                                    action: showAddDetails\r\n                                }\r\n                            }} \r\n                        />\r\n                      </Grid>\r\n                    <Grid item xs>\r\n                        New Functionality\r\n                    </Grid>\r\n                     <Grid item> \r\n                        <Grid container item xs>\r\n                            <Grid className={classes.box} spacing={1} item container direction=\"row\">\r\n                            <Grid item xs={4}>\r\n                                <TextField\r\n                                    helperText={!validNewFunc ? NEW_FUNCTIONALITY_RE.toString() : ''}\r\n                                    error={!validNewFunc}\r\n                                    label=\"Insert new functionality name\" \r\n                                    required\r\n                                    onChange={(event) => {\r\n                                        setNewFunc(event.target.value)\r\n                                        if(!validNewFunc)\r\n                                            setValidNewFunc(isFunctionalityValid(event.target.value.trim()))\r\n                                    }}\r\n                                    fullWidth\r\n                                    value={newFunc}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={4}>\r\n                                <InputLabel id={`digital-twin-label-${newFunc}`}>Digital Twin</InputLabel>\r\n                                <Select labelId={`digital-twin-label-${newFunc}`} value={digitalTwinChoice} onChange={handleDigitalTwinChoice}>\r\n                                {(digitalTwins || []).map((digitalTwin: any) => {return <MenuItem key={digitalTwin.dtId} value={digitalTwin.dtName}>{digitalTwin.dtName}</MenuItem>})}\r\n                                </Select>\r\n                            </Grid>\r\n                            <Grid container justify=\"flex-end\" spacing={1}>\r\n                             <Grid item>\r\n                                 <Button\r\n                                    color=\"primary\"\r\n                                    variant=\"contained\"\r\n                                    onClick={validateAndCreate}\r\n                                 >\r\n                                    Add Functionality\r\n                                 </Button>\r\n                             </Grid>\r\n                         </Grid>\r\n                        </Grid>\r\n                        </Grid>\r\n                     </Grid>\r\n                 </Grid>\r\n             </>\r\n         </LazyComponent>\r\n     </>\r\n </Navigator>\r\n )\r\n}\r\n","/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/utils/digitalTwins.ts",[],"/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/SmartComponents/style.ts",[],"/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/utils/functionBlock.ts",["511"],"import { xml2js, Element } from \"xml-js\"\nimport { FunctionBlock, InOutType, Variable, Event, EventVariable, FBCategory, Functionality } from \"../model\"\nimport { readLocalFile } from \"./main\"\nimport { getFunctionBlocks, getFunctionBlockCategories } from \"../services/api/function-block\"\nimport { RequestResponseState } from \"../services/api/api\"\n\nexport const getFBfromFbtFile = (file: File) : Promise<FunctionBlock> => {\n\n    return new Promise(async (res:Function, rej:Function) => {\n\n        const result : FunctionBlock = {\n            fbDescription:'',\n            fbExternalDependencies: [],\n            fbFbcId: 1,\n            fbGeneralCategory: '',\n            fbInputEvents: [],\n            fbOutputEvents: [],\n            fbInputVariables: [],\n            fbOutputVariables: [],\n            fbType: '',\n            fbUserId: 1\n        }\n\n        const rejectNotWellFormed = (elementName?: string) =>  {\n            rej('FBT not well formed' + (elementName ? `: Element ${elementName} not well formed` : ''))\n            return false\n        }\n\n        const getFBTypeElement = (fbJs: any) => {\n\n            let fbElement = null\n            for(let i = 0; i < fbJs.elements.length; i++) {\n                const element = fbJs.elements[i]\n                if(element.type === 'element' && element.name === 'FBType') {\n                    fbElement = element\n                    break\n                }\n            }\n            return fbElement\n\n        }\n\n        const verifyMandatoryElements = (fbJs: any) : boolean =>  {\n\n            if(!fbJs.elements || fbJs.elements.length < 2) return rejectNotWellFormed()\n\n            const fbElement = getFBTypeElement(fbJs)\n\n            if(!fbElement) return rejectNotWellFormed()\n\n            if(!(verifyElement(fbElement,'FBType',['Name'],1))) return rejectNotWellFormed('FBType')\n            if(!verifyElement(fbElement.elements[0],'InterfaceList',[],4)) return rejectNotWellFormed('InterfaceList')\n            if(!verifyElement(fbElement.elements[0].elements[0],'EventInputs')) return rejectNotWellFormed('EventInputs')\n            if(!verifyElement(fbElement.elements[0].elements[1],'EventOutputs')) return rejectNotWellFormed('EventOutputs')\n            if(!verifyElement(fbElement.elements[0].elements[2],'InputVars')) return rejectNotWellFormed('InputVars')\n            if(!verifyElement(fbElement.elements[0].elements[3],'OutputVars')) return rejectNotWellFormed('OutputVars')\n\n            return true\n\n        }\n\n        const getVariables = (variableList: any, inOutYpe:InOutType) : {variables:Variable[], varNames: string[]} | undefined => {\n\n            const result : {variables:Variable[], varNames: string[]} = {variables:[], varNames:[]}\n\n            if(!variableList.elements) return result\n\n            for(let i = 0; i < variableList.elements.length; i++) {\n\n                const variable = variableList.elements[i]\n                if(!verifyElement(variable,'VarDeclaration',['Name','Type'])) {\n                    rejectNotWellFormed('VarDeclaration')\n                    return\n                }\n                result.variables.push({\n                    variableDataType: variable.attributes.Type, \n                    variableInoutType: inOutYpe, \n                    variableName: variable.attributes.Name,\n                    variableOpcua: variable.attributes.OpcUa\n                })\n\n                result.varNames.push(variable.attributes.Name)\n                \n            }\n\n            return result\n\n        } \n\n        const getEvents = (eventList: any, inOutYpe:InOutType, variableNames: string[]) : Event[] | undefined => {\n\n            const result : Event[] = []\n            if(!eventList.elements) return result\n\n            for(let i = 0; i < eventList.elements.length; i++) {\n\n                const event = eventList.elements[i]\n                if(!verifyElement(event,'Event',['Name','Type'])) {\n                    rejectNotWellFormed('Event')\n                    return\n                }\n\n                const eventVars : EventVariable[] = []\n\n                if(event.elements) {\n                    \n                    for(let j = 0; j < event.elements.length; j++) {\n\n                        const eventVariable = event.elements[j]\n                        if(!verifyElement(eventVariable,'With',['Var']) || !variableNames.includes(eventVariable.attributes.Var)) {\n                            rejectNotWellFormed('With')\n                            return\n                        }\n                        eventVars.push({\n                            evEventName: event.attributes.Name,\n                            evVariableName: eventVariable.attributes.Var\n                        })\n\n                    }\n                }\n\n                result.push({\n                    eventName: event.attributes.Name, \n                    eventType: event.attributes.Type, \n                    eventInoutType: inOutYpe,\n                    eventVariables: eventVars,\n                    eventOpcua: event.attributes.OpcUa\n                })\n                \n            }\n\n            return result\n\n        } \n\n        try {\n\n            const fbtString = await readLocalFile(file)\n            const fbJs = xml2js(fbtString)\n\n            if(!verifyMandatoryElements(fbJs)) return\n            \n            const fbTypeElement = getFBTypeElement(fbJs)\n\n            result.fbType = fbTypeElement.attributes.Name\n            result.fbGeneralCategory = fbTypeElement.attributes.OpcUa\n\n            const fbInterfaceListElement = fbTypeElement.elements[0]\n            const fbInputVarsElement = fbInterfaceListElement.elements[2]\n            const fbOutputVarsElement = fbInterfaceListElement.elements[3]\n            const fbEventInputsElement = fbInterfaceListElement.elements[0]\n            const fbEventOutputsElement = fbInterfaceListElement.elements[1]\n\n            const fbInputVariables = getVariables(fbInputVarsElement, InOutType.in)\n            const fbOutputVariables = getVariables(fbOutputVarsElement, InOutType.out)\n\n            if(!fbInputVariables || !fbOutputVariables) return \n            \n            const fbInputEvents = getEvents(fbEventInputsElement, InOutType.in,fbInputVariables.varNames)\n            const fbOutputEvents = getEvents(fbEventOutputsElement, InOutType.out,fbOutputVariables.varNames)\n\n            if(!fbInputEvents || !fbOutputEvents) return \n            \n            result.fbInputVariables = fbInputVariables.variables\n            result.fbOutputVariables = fbOutputVariables.variables\n            result.fbInputEvents = fbInputEvents\n            result.fbOutputEvents = fbOutputEvents\n\n            res(result)\n\n        }\n\n        catch(err) {\n            console.error(err)\n            rej('Error reading fbt file')\n        }\n\n    })\n\n}\n\nconst verifyElement = (element: Element,name: string, attributes?: string[], elementsLength?: number, type: 'element' | 'doctype' = 'element') : boolean => {\n    \n    if(!(element.type === type)) return false\n    if(!(element.name === name)) return false\n    \n    if(!!elementsLength) {\n\n        if(!element.elements) return false\n        if(element.elements.length !== elementsLength) return false\n    \n    }\n\n    if(!!attributes && !!attributes.length) {\n        \n        if(!element.attributes) return false\n        \n        for(let i = 0; i < attributes.length; i++) {\n            if(!(attributes[i] in element.attributes)) {\n                return false\n            }\n        }\n        \n    }\n\n    return true\n        \n}\n\nexport const getOrDownloadFunctionBlocks = (fbs: FunctionBlock[]) :  Promise<FunctionBlock[]> => {\n\n    return new Promise((res: Function, rej:Function) => {\n\n        if(fbs.length) \n            res(fbs)\n        else \n            getFunctionBlocks()\n                .then((result:FunctionBlock[]) => res(result))\n                .catch((error: RequestResponseState) => rej(error))\n    })\n\n}\n\nexport const getOrDownloadFunctionBlockCategories = (fbCategories: FBCategory[]) :  Promise<FBCategory[]> => {\n\n    return new Promise((res: Function, rej:Function) => {\n\n        if(fbCategories.length) \n            res(fbCategories)\n        else \n            getFunctionBlockCategories()\n                .then((result:FBCategory[]) => res(result))\n                .catch((error: RequestResponseState) => rej(error))\n    })\n\n}\n\n","/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/FunctionBlockCategories/List/style.ts",[],"/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/services/api/digital-twin.ts",[],"/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/services/api/function-block.ts",[],"/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/FunctionBlocks/FunctionBlock/style.ts",[],"/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/DigitalTwin/DigitalTwinForm.tsx",["512","513","514","515","516","517","518","519","520","521","522","523","524"],"/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/DigitalTwin/FunctionalityForm.tsx",["525","526","527","528","529","530","531","532","533","534","535","536","537","538","539","540","541","542","543","544","545","546","547","548","549","550","551","552","553","554"],"/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/templates/Navigator/Navigator.tsx",[],"/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/templates/ConfirmAction/ConfirmAction.tsx",[],"/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/templates/LazyComponent/LazyComponent.tsx",[],"/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/FunctionBlocks/FunctionBlock/FunctionBlockForm.tsx",["555","556","557"],"/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/templates/Table/JPTable.tsx",["558","559","560"],"import React, { useState, useCallback } from 'react'\nimport { withStyles, Theme, createStyles, makeStyles } from '@material-ui/core/styles'\nimport Table from '@material-ui/core/Table'\nimport TableBody from '@material-ui/core/TableBody'\nimport TableCell from '@material-ui/core/TableCell'\nimport TableContainer from '@material-ui/core/TableContainer'\nimport TableHead from '@material-ui/core/TableHead'\nimport TableRow from '@material-ui/core/TableRow'\nimport Paper from '@material-ui/core/Paper'\nimport { Box, Button } from '@material-ui/core'\nimport { ArrowDropUp,ArrowDropDown,Delete,Edit, SettingsApplications, Add, AddBox, AddBoxOutlined, Settings } from '@material-ui/icons'\nimport { useMountEffect } from '../../../utils/main'\nimport {useGlobalStyles} from '../../../styles/main'\nimport './JPTable.css'\nimport { ConfirmActionStateLabel, ConfirmActionProps, ConfirmAction } from '../ConfirmAction/ConfirmAction'\n\nconst StyledTableCell = withStyles((theme: Theme) =>\n  createStyles({\n    head: {\n      color: theme.palette.primary.main,\n      fontWeight: 'bold',\n      fontSize: 16,\n    },\n    body: {\n      fontSize: 12,\n    },\n    \n  }),\n)(TableCell)\n\nconst StyledTableRow = withStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      '&:nth-of-type(odd)': {\n        backgroundColor: theme.palette.background.default,\n      },\n    },\n  }),\n)(TableRow)\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 700,\n  },\n  tableHeader: {\n    cursor:'pointer'\n  }\n})\n\nexport const JPTable = (props: {\n      data: any[], updateData: ((data: any[]) => void)\n      indexes : {label:string, key: string}[]\n      tName: string\n      extra?: {\n        delete? :{\n          action: (element:any) => Promise<any>\n          labelKey: string,\n          onSuccessDelete: (element: any) => void\n        },\n        edit?: {\n          action: (element: any) => void\n        } \n        details? :{\n          action: (element: any) => void\n        },\n        add? :{\n          action: (element: any) => void\n        },\n      }\n      sortedkey? : string}) => {\n    \n    const classes = useStyles()\n    const globalClasses = useGlobalStyles()\n    const [orderBy, setOrderBy] : [string | '', Function] = useState('')\n    const [previousOrderBy, setPreviousOrderBy] : [string | '', Function] = useState('')\n    const [asc, setAsc] : [boolean, Function] = useState(false)\n    const [deleting, setDeleting] : [string | undefined, Function] = useState(undefined)\n\n    const sort = (criteria: string) => {\n\n      if(!props.data.length)\n        return\n        \n      // const criteria = props.indexes[criteriaIndex].key\n      let newAsc = true\n      \n      const sorted : [] = [...props.data.sort((a:any, b:any) => {\n        \n        let elementA = a[criteria].key ?? a[criteria]\n        let elementB = b[criteria].key ?? b[criteria]\n        if(typeof a[criteria] === 'string') {\n          elementA = (a[criteria].key ?? a[criteria] as string).toLocaleLowerCase()\n          elementB = (b[criteria].key ?? b[criteria] as string).toLocaleLowerCase()\n        }\n        \n        const greater = elementA >= elementB\n        const equal = elementA === elementB\n\n        if(criteria === orderBy)\n          newAsc = !asc\n          \n        return equal ? 0 : newAsc ? greater ? 1 : -1 : greater ? -1 : 1\n  \n      })] as []\n      \n      setPreviousOrderBy(orderBy)\n      setOrderBy(criteria)\n      setAsc(newAsc)\n      \n      props.updateData(sorted)\n\n    }\n\n    useMountEffect(() => sort(props.sortedkey ? props.sortedkey : props.indexes[0].key))\n\n    const setDeletingElement = useCallback((element: any) => () => setDeleting(element),[])\n    const triggerEditElement = (element: any) => () => props.extra && props.extra.edit ? props.extra.edit.action(element) : {}\n    const triggerDetailsElement = (element: any) => () => props.extra && props.extra.details ? props.extra.details.action(element) : {}\n    const triggerAddElement = (element: any) => () => props.extra && props.extra.add ? props.extra.add.action(element) : {}\n\n    const deleteLine = useCallback(() : Promise<string> => {\n\n      return new Promise((res:Function, rej:Function) => {\n\n        if(!(props.extra?.delete) || !deleting) {\n          rej('')\n          return\n        }\n        \n        props.extra.delete.action(deleting)\n\n          .then(_ => {\n            res(`Correctly deleted ${props.tName} \\n${deleting && props.extra?.delete ? deleting[props.extra?.delete?.labelKey] : ''}.`)\n          })\n          .catch(_ => {\n            rej(`Error deleting ${props.tName} \\n${deleting && props.extra?.delete ? deleting[props.extra?.delete?.labelKey] : ''}.`)\n          })\n      })\n\n    },[deleting,props.extra,props.tName])\n\n    const confirmActionStatesToRemove = {\n\n      start: {\n        label: `Delete ${props.tName} \\n${deleting && props.extra?.delete ? deleting[props.extra?.delete?.labelKey] : ''}?`,\n        positiveLabel: 'Yes',\n        negativeLabel: 'No',\n        state: ConfirmActionStateLabel.start\n      },\n      executing: {\n        label: '',\n        state: ConfirmActionStateLabel.executing,\n      },\n      success: {\n        label: `Correctly deleted ${props.tName} \\n${deleting && props.extra?.delete ? deleting[props.extra?.delete?.labelKey] : ''}.`,\n        state: ConfirmActionStateLabel.success,\n        positiveLabel: 'Ok'\n      },\n      error: {\n        label: `Error deleting ${props.tName} \\n${deleting && props.extra?.delete ? deleting[props.extra?.delete?.labelKey] : ''}.`,\n        state: ConfirmActionStateLabel.error,\n        positiveLabel: 'Ok'\n      },\n    }\n\n    const onCancel = () => setDeleting(undefined)\n    const onError = () => setDeleting(undefined)\n    const onSuccess = () => {\n      props.updateData(props.data.filter((cElement: any) => cElement !== deleting))\n      if(deleting)\n        props.extra?.delete?.onSuccessDelete(deleting)\n    }\n  \n    const confirmActionPropsDeleting : ConfirmActionProps = {\n      \n      title: `Deleting ${props.tName}`,\n      states: confirmActionStatesToRemove,\n      currentState: confirmActionStatesToRemove.start,\n      onCancel: onCancel,\n      onError: onError,\n      onSuccess: onSuccess,\n      action:deleteLine,\n    \n    }\n\n    return (\n      <>\n      {deleting ? <ConfirmAction {...confirmActionPropsDeleting} /> : null }\n      <TableContainer component={Paper}>\n          <Table className={classes.table} size=\"small\" aria-label=\"customized table\">\n              <TableHead>\n                  <TableRow>\n                      {props.indexes.map((element: {key: string, label: string}, index: number) => \n                          <StyledTableCell className={classes.tableHeader} onClick={() => sort(element.key)} key={index}>\n                              <Box className={globalClasses.hoverOpacity} display=\"flex\" flexDirection=\"row\" alignItems=\"center\">\n                                  {element.label}\n                                  {element.key === orderBy ? asc ? <ArrowDropUp className={previousOrderBy === orderBy ? \"arrow-up\" : \"\"}/> : <ArrowDropDown className={element.key === orderBy ? \"arrow-down\" : \"\"}/> : <ArrowDropUp className={`${globalClasses.hiddenHoverOpacity}`} />}\n                              </Box> \n                          </StyledTableCell>)\n                      }\n                      {props.extra \n                          ? props.extra.details ? <StyledTableCell></StyledTableCell> : null\n                          : null\n                      }\n                      {props.extra \n                          ? props.extra.add ? <StyledTableCell></StyledTableCell> : null\n                          : null\n                      }\n                      {props.extra \n                          ? props.extra.edit ? <StyledTableCell></StyledTableCell> : null\n                          : null\n                      }\n                      {props.extra \n                          ? props.extra.delete ? <StyledTableCell></StyledTableCell> : null\n                          : null\n                      }\n                  </TableRow>\n              </TableHead>\n              {!!props.data.length ?\n                <TableBody>\n                {props.data.map((row:any, elIndex:number) => (\n                    <StyledTableRow key={elIndex}>\n                        {props.indexes.map((element: {key: string, label: string}, valIndex: number) => <StyledTableCell key={valIndex}>{row[element.key]?.data ?? row[element.key] }</StyledTableCell>)}\n                        {props.extra \n                          \n                          ? props.extra.details\n                            ? <StyledTableCell><Button disabled={row.detailsDisabled ?? false} onClick={triggerDetailsElement(row)} style={{minWidth:0}} variant=\"text\" size=\"small\"><Settings fontSize=\"small\"/></Button></StyledTableCell> \n                            : null\n                          : null\n                        }\n                           {props.extra \n                          \n                          ? props.extra.add\n                            ? <StyledTableCell><Button disabled={row.addDisabled ?? false} onClick={triggerAddElement(row)} style={{minWidth:0}} variant=\"text\" size=\"small\"><AddBoxOutlined fontSize=\"small\"/></Button></StyledTableCell> \n                            : null\n                          : null\n                        }\n                        {props.extra \n                          \n                          ? props.extra.edit \n                            ? <StyledTableCell><Button disabled={row.editDisabled ?? false} onClick={triggerEditElement(row)} style={{minWidth:0}} variant=\"text\" size=\"small\"><Edit fontSize=\"small\"/></Button></StyledTableCell> \n                            : null\n                          : null\n                        }\n                        {props.extra \n                          \n                          ? props.extra.delete \n                            ? <StyledTableCell><Button disabled={row.deleteDisabled ?? false} onClick={setDeletingElement(row)} style={{minWidth:0}} variant=\"text\" size=\"small\"><Delete fontSize=\"small\"/></Button></StyledTableCell> \n                            : null\n                          : null\n                        }\n                    </StyledTableRow>\n                ))}\n                </TableBody>\n                : null\n              }\n          </Table>\n      </TableContainer>\n      </>\n    )\n}","/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/templates/Charts/Gauge.tsx",[],"/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/templates/Charts/Bars.tsx",[],"/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/services/api/api.ts",[],"/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/templates/Charts/style.ts",[],"/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/FunctionBlocks/FunctionBlock/Event.tsx",[],"/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/templates/ConfirmAction/style.ts",[],"/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/FunctionBlocks/FunctionBlock/Variable.tsx",["561"],"/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/model/index.ts",[],"/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/templates/Search/SearchableList.tsx",[],"/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/model/model/DigitalTwin.ts",["562","563"],"import { Event, Variable } from \"./EventVariable\";\r\nimport { User } from \"./User\";\r\n\r\nexport interface DigitalTwin {\r\n    dtId?: number\r\n    dtName: string\r\n    dtUser?: User\r\n    dtUserId: number\r\n    functionalities? : string[]\r\n    associatedSmartComponents? : string[]\r\n} \r\n\r\nexport interface Functionality {\r\n    funcId?: number\r\n    funcName: string\r\n    dt?: DigitalTwin\r\n    funcdtName?: string\r\n    funcdtId: number\r\n    //state:number\r\n    funcUser?: User\r\n    funcUserId: number\r\n    funcscId?: number\r\n    funcscName?: string\r\n    /* funcMonitoredInputEvents: Event[]\r\n    funcMonitoredOutputEvents: Event[]\r\n    funcMonitoredInputVariables: Variable[]\r\n    funcMonitoredOutputVariables: Variable[] */\r\n} ","/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/model/model/Tables.ts",[],"/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/model/model/User.ts",[],"/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/model/model/FunctionBlock.ts",[],"/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/model/model/SmartComponent.ts",[],"/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/model/model/EventVariable.ts",[],"/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/model/model/Error.ts",[],"/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/utils/smartComponents.ts",[],"/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/services/api/smart-component.ts",[],"/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/model/model/AssociatedSmartComponent.ts",[],"/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/utils/associatedSmartComponents.ts",[],["564","565"],"/media/maria/96ae9a87-ebe3-48cb-a2c1-fae5fe76b9e7/maria/Marketplace-JurassicPark/backend/web/src/components/DigitalTwin/SmartComponent.tsx",["566","567","568","569","570","571","572","573"],{"ruleId":"574","replacedBy":"575"},{"ruleId":"576","replacedBy":"577"},{"ruleId":"578","severity":1,"message":"579","line":12,"column":22,"nodeType":"580","endLine":12,"endColumn":24,"suggestions":"581"},{"ruleId":"582","severity":1,"message":"583","line":12,"column":110,"nodeType":"584","messageId":"585","endLine":12,"endColumn":121},{"ruleId":"582","severity":1,"message":"586","line":12,"column":123,"nodeType":"584","messageId":"585","endLine":12,"endColumn":128},{"ruleId":"582","severity":1,"message":"587","line":12,"column":130,"nodeType":"584","messageId":"585","endLine":12,"endColumn":144},{"ruleId":"582","severity":1,"message":"588","line":116,"column":25,"nodeType":"584","messageId":"585","endLine":116,"endColumn":39},{"ruleId":"582","severity":1,"message":"589","line":220,"column":25,"nodeType":"584","messageId":"585","endLine":220,"endColumn":42},{"ruleId":"582","severity":1,"message":"590","line":1,"column":10,"nodeType":"584","messageId":"585","endLine":1,"endColumn":16},{"ruleId":"582","severity":1,"message":"591","line":1,"column":18,"nodeType":"584","messageId":"585","endLine":1,"endColumn":22},{"ruleId":"582","severity":1,"message":"592","line":2,"column":10,"nodeType":"584","messageId":"585","endLine":2,"endColumn":15},{"ruleId":"582","severity":1,"message":"593","line":6,"column":22,"nodeType":"584","messageId":"585","endLine":6,"endColumn":35},{"ruleId":"582","severity":1,"message":"594","line":17,"column":10,"nodeType":"584","messageId":"585","endLine":17,"endColumn":38},{"ruleId":"582","severity":1,"message":"595","line":2,"column":80,"nodeType":"584","messageId":"585","endLine":2,"endColumn":93},{"ruleId":"578","severity":1,"message":"596","line":240,"column":27,"nodeType":"584","endLine":240,"endColumn":38},{"ruleId":"578","severity":1,"message":"596","line":241,"column":28,"nodeType":"584","endLine":241,"endColumn":39},{"ruleId":"582","severity":1,"message":"597","line":11,"column":49,"nodeType":"584","messageId":"585","endLine":11,"endColumn":69},{"ruleId":"582","severity":1,"message":"598","line":11,"column":71,"nodeType":"584","messageId":"585","endLine":11,"endColumn":74},{"ruleId":"582","severity":1,"message":"599","line":11,"column":76,"nodeType":"584","messageId":"585","endLine":11,"endColumn":82},{"ruleId":"578","severity":1,"message":"600","line":21,"column":9,"nodeType":"601","endLine":27,"endColumn":4},{"ruleId":"582","severity":1,"message":"602","line":1,"column":10,"nodeType":"584","messageId":"585","endLine":1,"endColumn":15},{"ruleId":"582","severity":1,"message":"603","line":1,"column":17,"nodeType":"584","messageId":"585","endLine":1,"endColumn":25},{"ruleId":"582","severity":1,"message":"604","line":1,"column":40,"nodeType":"584","messageId":"585","endLine":1,"endColumn":49},{"ruleId":"582","severity":1,"message":"605","line":42,"column":11,"nodeType":"584","messageId":"585","endLine":42,"endColumn":18},{"ruleId":"582","severity":1,"message":"606","line":1,"column":27,"nodeType":"584","messageId":"585","endLine":1,"endColumn":38},{"ruleId":"582","severity":1,"message":"604","line":1,"column":40,"nodeType":"584","messageId":"585","endLine":1,"endColumn":49},{"ruleId":"582","severity":1,"message":"583","line":2,"column":10,"nodeType":"584","messageId":"585","endLine":2,"endColumn":21},{"ruleId":"582","severity":1,"message":"607","line":2,"column":23,"nodeType":"584","messageId":"585","endLine":2,"endColumn":33},{"ruleId":"582","severity":1,"message":"608","line":2,"column":35,"nodeType":"584","messageId":"585","endLine":2,"endColumn":44},{"ruleId":"582","severity":1,"message":"609","line":2,"column":52,"nodeType":"584","messageId":"585","endLine":2,"endColumn":58},{"ruleId":"582","severity":1,"message":"610","line":2,"column":60,"nodeType":"584","messageId":"585","endLine":2,"endColumn":68},{"ruleId":"582","severity":1,"message":"611","line":2,"column":70,"nodeType":"584","messageId":"585","endLine":2,"endColumn":73},{"ruleId":"582","severity":1,"message":"612","line":2,"column":82,"nodeType":"584","messageId":"585","endLine":2,"endColumn":92},{"ruleId":"582","severity":1,"message":"613","line":2,"column":94,"nodeType":"584","messageId":"585","endLine":2,"endColumn":98},{"ruleId":"582","severity":1,"message":"614","line":3,"column":10,"nodeType":"584","messageId":"585","endLine":3,"endColumn":21},{"ruleId":"582","severity":1,"message":"595","line":3,"column":24,"nodeType":"584","messageId":"585","endLine":3,"endColumn":37},{"ruleId":"582","severity":1,"message":"615","line":5,"column":10,"nodeType":"584","messageId":"585","endLine":5,"endColumn":22},{"ruleId":"582","severity":1,"message":"616","line":6,"column":10,"nodeType":"584","messageId":"585","endLine":6,"endColumn":24},{"ruleId":"582","severity":1,"message":"617","line":6,"column":26,"nodeType":"584","messageId":"585","endLine":6,"endColumn":40},{"ruleId":"582","severity":1,"message":"618","line":7,"column":10,"nodeType":"584","messageId":"585","endLine":7,"endColumn":14},{"ruleId":"582","severity":1,"message":"592","line":7,"column":16,"nodeType":"584","messageId":"585","endLine":7,"endColumn":21},{"ruleId":"582","severity":1,"message":"619","line":8,"column":28,"nodeType":"584","messageId":"585","endLine":8,"endColumn":38},{"ruleId":"582","severity":1,"message":"620","line":9,"column":10,"nodeType":"584","messageId":"585","endLine":9,"endColumn":26},{"ruleId":"582","severity":1,"message":"621","line":9,"column":28,"nodeType":"584","messageId":"585","endLine":9,"endColumn":64},{"ruleId":"582","severity":1,"message":"622","line":10,"column":10,"nodeType":"584","messageId":"585","endLine":10,"endColumn":28},{"ruleId":"582","severity":1,"message":"623","line":10,"column":30,"nodeType":"584","messageId":"585","endLine":10,"endColumn":53},{"ruleId":"582","severity":1,"message":"624","line":10,"column":55,"nodeType":"584","messageId":"585","endLine":10,"endColumn":74},{"ruleId":"582","severity":1,"message":"625","line":10,"column":76,"nodeType":"584","messageId":"585","endLine":10,"endColumn":89},{"ruleId":"582","severity":1,"message":"605","line":51,"column":11,"nodeType":"584","messageId":"585","endLine":51,"endColumn":18},{"ruleId":"582","severity":1,"message":"626","line":54,"column":18,"nodeType":"584","messageId":"585","endLine":54,"endColumn":30},{"ruleId":"582","severity":1,"message":"627","line":54,"column":47,"nodeType":"584","messageId":"585","endLine":54,"endColumn":74},{"ruleId":"582","severity":1,"message":"628","line":55,"column":12,"nodeType":"584","messageId":"585","endLine":55,"endColumn":19},{"ruleId":"582","severity":1,"message":"629","line":55,"column":20,"nodeType":"584","messageId":"585","endLine":55,"endColumn":30},{"ruleId":"582","severity":1,"message":"630","line":74,"column":11,"nodeType":"584","messageId":"585","endLine":74,"endColumn":22},{"ruleId":"574","replacedBy":"631"},{"ruleId":"576","replacedBy":"632"},{"ruleId":"578","severity":1,"message":"579","line":12,"column":22,"nodeType":"580","endLine":12,"endColumn":24,"suggestions":"633"},{"ruleId":"582","severity":1,"message":"634","line":3,"column":10,"nodeType":"584","messageId":"585","endLine":3,"endColumn":27},{"ruleId":"582","severity":1,"message":"602","line":3,"column":39,"nodeType":"584","messageId":"585","endLine":3,"endColumn":44},{"ruleId":"582","severity":1,"message":"593","line":3,"column":46,"nodeType":"584","messageId":"585","endLine":3,"endColumn":59},{"ruleId":"582","severity":1,"message":"635","line":3,"column":61,"nodeType":"584","messageId":"585","endLine":3,"endColumn":79},{"ruleId":"582","severity":1,"message":"636","line":3,"column":81,"nodeType":"584","messageId":"585","endLine":3,"endColumn":91},{"ruleId":"582","severity":1,"message":"637","line":3,"column":106,"nodeType":"584","messageId":"585","endLine":3,"endColumn":130},{"ruleId":"582","severity":1,"message":"638","line":6,"column":10,"nodeType":"584","messageId":"585","endLine":6,"endColumn":29},{"ruleId":"582","severity":1,"message":"639","line":11,"column":10,"nodeType":"584","messageId":"585","endLine":11,"endColumn":18},{"ruleId":"582","severity":1,"message":"640","line":13,"column":30,"nodeType":"584","messageId":"585","endLine":13,"endColumn":50},{"ruleId":"582","severity":1,"message":"641","line":13,"column":52,"nodeType":"584","messageId":"585","endLine":13,"endColumn":82},{"ruleId":"582","severity":1,"message":"642","line":14,"column":10,"nodeType":"584","messageId":"585","endLine":14,"endColumn":37},{"ruleId":"582","severity":1,"message":"643","line":46,"column":10,"nodeType":"584","messageId":"585","endLine":46,"endColumn":26},{"ruleId":"582","severity":1,"message":"644","line":46,"column":28,"nodeType":"584","messageId":"585","endLine":46,"endColumn":47},{"ruleId":"582","severity":1,"message":"645","line":78,"column":25,"nodeType":"584","messageId":"585","endLine":78,"endColumn":51},{"ruleId":"582","severity":1,"message":"590","line":1,"column":10,"nodeType":"584","messageId":"585","endLine":1,"endColumn":16},{"ruleId":"582","severity":1,"message":"591","line":1,"column":18,"nodeType":"584","messageId":"585","endLine":1,"endColumn":22},{"ruleId":"582","severity":1,"message":"592","line":2,"column":10,"nodeType":"584","messageId":"585","endLine":2,"endColumn":15},{"ruleId":"582","severity":1,"message":"593","line":6,"column":22,"nodeType":"584","messageId":"585","endLine":6,"endColumn":35},{"ruleId":"582","severity":1,"message":"594","line":17,"column":10,"nodeType":"584","messageId":"585","endLine":17,"endColumn":38},{"ruleId":"582","severity":1,"message":"646","line":10,"column":10,"nodeType":"584","messageId":"585","endLine":10,"endColumn":48},{"ruleId":"582","severity":1,"message":"583","line":14,"column":110,"nodeType":"584","messageId":"585","endLine":14,"endColumn":121},{"ruleId":"582","severity":1,"message":"586","line":14,"column":123,"nodeType":"584","messageId":"585","endLine":14,"endColumn":128},{"ruleId":"582","severity":1,"message":"587","line":14,"column":130,"nodeType":"584","messageId":"585","endLine":14,"endColumn":144},{"ruleId":"582","severity":1,"message":"588","line":118,"column":25,"nodeType":"584","messageId":"585","endLine":118,"endColumn":39},{"ruleId":"582","severity":1,"message":"647","line":126,"column":12,"nodeType":"584","messageId":"585","endLine":126,"endColumn":20},{"ruleId":"582","severity":1,"message":"648","line":129,"column":12,"nodeType":"584","messageId":"585","endLine":129,"endColumn":17},{"ruleId":"582","severity":1,"message":"589","line":251,"column":25,"nodeType":"584","messageId":"585","endLine":251,"endColumn":42},{"ruleId":"582","severity":1,"message":"649","line":266,"column":15,"nodeType":"584","messageId":"585","endLine":266,"endColumn":40},{"ruleId":"582","severity":1,"message":"650","line":272,"column":9,"nodeType":"584","messageId":"585","endLine":272,"endColumn":40},{"ruleId":"582","severity":1,"message":"595","line":2,"column":80,"nodeType":"584","messageId":"585","endLine":2,"endColumn":93},{"ruleId":"582","severity":1,"message":"604","line":1,"column":40,"nodeType":"584","messageId":"585","endLine":1,"endColumn":49},{"ruleId":"582","severity":1,"message":"607","line":2,"column":35,"nodeType":"584","messageId":"585","endLine":2,"endColumn":45},{"ruleId":"582","severity":1,"message":"609","line":2,"column":47,"nodeType":"584","messageId":"585","endLine":2,"endColumn":53},{"ruleId":"582","severity":1,"message":"610","line":2,"column":55,"nodeType":"584","messageId":"585","endLine":2,"endColumn":63},{"ruleId":"582","severity":1,"message":"583","line":2,"column":65,"nodeType":"584","messageId":"585","endLine":2,"endColumn":76},{"ruleId":"582","severity":1,"message":"637","line":3,"column":10,"nodeType":"584","messageId":"585","endLine":3,"endColumn":34},{"ruleId":"582","severity":1,"message":"651","line":7,"column":10,"nodeType":"584","messageId":"585","endLine":7,"endColumn":41},{"ruleId":"582","severity":1,"message":"647","line":145,"column":12,"nodeType":"584","messageId":"585","endLine":145,"endColumn":20},{"ruleId":"582","severity":1,"message":"648","line":148,"column":12,"nodeType":"584","messageId":"585","endLine":148,"endColumn":17},{"ruleId":"582","severity":1,"message":"652","line":150,"column":12,"nodeType":"584","messageId":"585","endLine":150,"endColumn":32},{"ruleId":"582","severity":1,"message":"653","line":151,"column":12,"nodeType":"584","messageId":"585","endLine":151,"endColumn":34},{"ruleId":"582","severity":1,"message":"654","line":153,"column":11,"nodeType":"584","messageId":"585","endLine":153,"endColumn":37},{"ruleId":"582","severity":1,"message":"655","line":167,"column":11,"nodeType":"584","messageId":"585","endLine":167,"endColumn":17},{"ruleId":"582","severity":1,"message":"606","line":1,"column":27,"nodeType":"584","messageId":"585","endLine":1,"endColumn":38},{"ruleId":"582","severity":1,"message":"604","line":1,"column":40,"nodeType":"584","messageId":"585","endLine":1,"endColumn":49},{"ruleId":"582","severity":1,"message":"583","line":2,"column":10,"nodeType":"584","messageId":"585","endLine":2,"endColumn":21},{"ruleId":"582","severity":1,"message":"607","line":2,"column":23,"nodeType":"584","messageId":"585","endLine":2,"endColumn":33},{"ruleId":"582","severity":1,"message":"608","line":2,"column":35,"nodeType":"584","messageId":"585","endLine":2,"endColumn":44},{"ruleId":"582","severity":1,"message":"609","line":2,"column":52,"nodeType":"584","messageId":"585","endLine":2,"endColumn":58},{"ruleId":"582","severity":1,"message":"610","line":2,"column":60,"nodeType":"584","messageId":"585","endLine":2,"endColumn":68},{"ruleId":"582","severity":1,"message":"611","line":2,"column":70,"nodeType":"584","messageId":"585","endLine":2,"endColumn":73},{"ruleId":"582","severity":1,"message":"612","line":2,"column":82,"nodeType":"584","messageId":"585","endLine":2,"endColumn":92},{"ruleId":"582","severity":1,"message":"613","line":2,"column":94,"nodeType":"584","messageId":"585","endLine":2,"endColumn":98},{"ruleId":"582","severity":1,"message":"614","line":3,"column":10,"nodeType":"584","messageId":"585","endLine":3,"endColumn":21},{"ruleId":"582","severity":1,"message":"595","line":3,"column":24,"nodeType":"584","messageId":"585","endLine":3,"endColumn":37},{"ruleId":"582","severity":1,"message":"615","line":5,"column":10,"nodeType":"584","messageId":"585","endLine":5,"endColumn":22},{"ruleId":"582","severity":1,"message":"616","line":6,"column":10,"nodeType":"584","messageId":"585","endLine":6,"endColumn":24},{"ruleId":"582","severity":1,"message":"617","line":6,"column":26,"nodeType":"584","messageId":"585","endLine":6,"endColumn":40},{"ruleId":"582","severity":1,"message":"618","line":7,"column":10,"nodeType":"584","messageId":"585","endLine":7,"endColumn":14},{"ruleId":"582","severity":1,"message":"592","line":7,"column":16,"nodeType":"584","messageId":"585","endLine":7,"endColumn":21},{"ruleId":"582","severity":1,"message":"619","line":8,"column":28,"nodeType":"584","messageId":"585","endLine":8,"endColumn":38},{"ruleId":"582","severity":1,"message":"620","line":9,"column":10,"nodeType":"584","messageId":"585","endLine":9,"endColumn":26},{"ruleId":"582","severity":1,"message":"621","line":9,"column":28,"nodeType":"584","messageId":"585","endLine":9,"endColumn":64},{"ruleId":"582","severity":1,"message":"622","line":10,"column":10,"nodeType":"584","messageId":"585","endLine":10,"endColumn":28},{"ruleId":"582","severity":1,"message":"623","line":10,"column":30,"nodeType":"584","messageId":"585","endLine":10,"endColumn":53},{"ruleId":"582","severity":1,"message":"624","line":10,"column":55,"nodeType":"584","messageId":"585","endLine":10,"endColumn":74},{"ruleId":"582","severity":1,"message":"625","line":10,"column":76,"nodeType":"584","messageId":"585","endLine":10,"endColumn":89},{"ruleId":"582","severity":1,"message":"605","line":51,"column":11,"nodeType":"584","messageId":"585","endLine":51,"endColumn":18},{"ruleId":"582","severity":1,"message":"626","line":54,"column":18,"nodeType":"584","messageId":"585","endLine":54,"endColumn":30},{"ruleId":"582","severity":1,"message":"627","line":54,"column":47,"nodeType":"584","messageId":"585","endLine":54,"endColumn":74},{"ruleId":"582","severity":1,"message":"628","line":55,"column":12,"nodeType":"584","messageId":"585","endLine":55,"endColumn":19},{"ruleId":"582","severity":1,"message":"629","line":55,"column":20,"nodeType":"584","messageId":"585","endLine":55,"endColumn":30},{"ruleId":"582","severity":1,"message":"630","line":74,"column":11,"nodeType":"584","messageId":"585","endLine":74,"endColumn":22},{"ruleId":"582","severity":1,"message":"656","line":14,"column":10,"nodeType":"584","messageId":"585","endLine":14,"endColumn":28},{"ruleId":"578","severity":1,"message":"596","line":241,"column":27,"nodeType":"584","endLine":241,"endColumn":38},{"ruleId":"578","severity":1,"message":"596","line":242,"column":28,"nodeType":"584","endLine":242,"endColumn":39},{"ruleId":"582","severity":1,"message":"597","line":11,"column":49,"nodeType":"584","messageId":"585","endLine":11,"endColumn":69},{"ruleId":"582","severity":1,"message":"598","line":11,"column":71,"nodeType":"584","messageId":"585","endLine":11,"endColumn":74},{"ruleId":"582","severity":1,"message":"599","line":11,"column":76,"nodeType":"584","messageId":"585","endLine":11,"endColumn":82},{"ruleId":"578","severity":1,"message":"600","line":21,"column":9,"nodeType":"601","endLine":27,"endColumn":4},{"ruleId":"582","severity":1,"message":"602","line":1,"column":10,"nodeType":"584","messageId":"585","endLine":1,"endColumn":15},{"ruleId":"582","severity":1,"message":"603","line":1,"column":17,"nodeType":"584","messageId":"585","endLine":1,"endColumn":25},{"ruleId":"574","replacedBy":"657"},{"ruleId":"576","replacedBy":"658"},{"ruleId":"582","severity":1,"message":"603","line":3,"column":10,"nodeType":"584","messageId":"585","endLine":3,"endColumn":18},{"ruleId":"582","severity":1,"message":"659","line":3,"column":20,"nodeType":"584","messageId":"585","endLine":3,"endColumn":28},{"ruleId":"582","severity":1,"message":"660","line":3,"column":30,"nodeType":"584","messageId":"585","endLine":3,"endColumn":39},{"ruleId":"582","severity":1,"message":"637","line":3,"column":57,"nodeType":"584","messageId":"585","endLine":3,"endColumn":81},{"ruleId":"578","severity":1,"message":"661","line":25,"column":9,"nodeType":"601","endLine":30,"endColumn":4},{"ruleId":"582","severity":1,"message":"662","line":84,"column":10,"nodeType":"584","messageId":"585","endLine":84,"endColumn":19},{"ruleId":"582","severity":1,"message":"647","line":86,"column":10,"nodeType":"584","messageId":"585","endLine":86,"endColumn":18},{"ruleId":"582","severity":1,"message":"648","line":89,"column":10,"nodeType":"584","messageId":"585","endLine":89,"endColumn":15},"no-native-reassign",["663"],"no-negated-in-lhs",["664"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'actionOnMount' and 'actionOnUnmount'. Either include them or remove the dependency array. If 'actionOnMount' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["665"],"@typescript-eslint/no-unused-vars","'FormControl' is defined but never used.","Identifier","unusedVar","'Input' is defined but never used.","'FormHelperText' is defined but never used.","'setNewFuncName' is assigned a value but never used.","'setConfirmEditing' is assigned a value but never used.","'Button' is defined but never used.","'Grid' is defined but never used.","'Clear' is defined but never used.","'FunctionBlock' is defined but never used.","'functionBlockCategoryReducer' is defined but never used.","'Functionality' is defined but never used.","React Hook useCallback received a function whose dependencies are unknown. Pass an inline function instead.","'SettingsApplications' is defined but never used.","'Add' is defined but never used.","'AddBox' is defined but never used.","The 'newVar' object makes the dependencies of useCallback Hook (at line 50) change on every render. To fix this, wrap the initialization of 'newVar' in its own useMemo() Hook.","VariableDeclarator","'Event' is defined but never used.","'Variable' is defined but never used.","'useEffect' is defined but never used.","'classes' is assigned a value but never used.","'useCallback' is defined but never used.","'InputLabel' is defined but never used.","'TextField' is defined but never used.","'Select' is defined but never used.","'MenuItem' is defined but never used.","'Box' is defined but never used.","'Typography' is defined but never used.","'Chip' is defined but never used.","'DigitalTwin' is defined but never used.","'VariableList' is defined but never used.","'setSimpleField' is defined but never used.","'useMountEffect' is defined but never used.","'Done' is defined but never used.","'UploadIcon' is defined but never used.","'getFBfromFbtFile' is defined but never used.","'getOrDownloadFunctionBlockCategories' is defined but never used.","'ConfirmActionProps' is defined but never used.","'ConfirmActionStateLabel' is defined but never used.","'ConfirmActionAction' is defined but never used.","'ConfirmAction' is defined but never used.","'digitalTwins' is assigned a value but never used.","'dispatchDigitalTwinsActions' is assigned a value but never used.","'validDt' is assigned a value but never used.","'setValidDt' is assigned a value but never used.","'cancelLabel' is assigned a value but never used.",["663"],["664"],["666"],"'FBGeneralCategory' is defined but never used.","'ExternalDependency' is defined but never used.","'FBCategory' is defined but never used.","'AssociatedSmartComponent' is defined but never used.","'createFunctionBlock' is defined but never used.","'toBase64' is defined but never used.","'FunctionBlockActions' is defined but never used.","'FunctionBlockCategoriesActions' is defined but never used.","'getOrDownloadFunctionBlocks' is defined but never used.","'fbInputVariables' is assigned a value but never used.","'setFbInputVariables' is assigned a value but never used.","'idAssociatedSmartComponent' is assigned a value but never used.","'getOrDownloadAssociatedSmartComponents' is defined but never used.","'fetching' is assigned a value but never used.","'error' is assigned a value but never used.","'associatedSmartComponents' is assigned a value but never used.","'updateAssociatedSmartComponents' is assigned a value but never used.","'AssociatedSmartComponentActions' is defined but never used.","'smartComponentChoice' is assigned a value but never used.","'smartComponentIdChoice' is assigned a value but never used.","'handleSmartComponentChoice' is assigned a value but never used.","'action' is assigned a value but never used.","'SmartComponentList' is defined but never used.",["663"],["664"],"'DataType' is defined but never used.","'InOutType' is defined but never used.","The 'newSc' object makes the dependencies of useCallback Hook (at line 53) change on every render. To fix this, wrap the initialization of 'newSc' in its own useMemo() Hook.","'validName' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"667","fix":"668"},{"desc":"667","fix":"669"},"Update the dependencies array to be: [actionOnMount, actionOnUnmount]",{"range":"670","text":"671"},{"range":"672","text":"671"},[308,310],"[actionOnMount, actionOnUnmount]",[308,310]]